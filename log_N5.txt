Running with n=5, max_workers=256, and batch_size=2
Full integrand (with prefactor) is:
                                                                               ↪
                                                                               ↪
────────────────────────────────────────────────────────────────────────────── ↪
        5         5                                                            ↪
(1 - x₁) ⋅(1 - x₂) ⋅(t₁ - x₁)⋅(t₁ - x₂)⋅(t₂ - x₁)⋅(t₂ - x₂)⋅(t₃ - x₁)⋅(t₃ - x₂ ↪

↪                                                                              ↪
↪                                                                              ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ )⋅(t₄ - x₁)⋅(t₄ - x₂)⋅(t₁⋅t₂ - x₁)⋅(t₁⋅t₂ - x₂)⋅(-t₁⋅x₁ + 1)⋅(-t₁⋅x₂ + 1)⋅(t ↪

↪                                                                              ↪
↪                                                                           t₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ ₂⋅t₃ - x₁)⋅(t₂⋅t₃ - x₂)⋅(-t₂⋅x₁ + 1)⋅(-t₂⋅x₂ + 1)⋅(t₃⋅t₄ - x₁)⋅(t₃⋅t₄ - x₂)⋅ ↪

↪ 7   11   11   7                                                              ↪
↪  ⋅t₂  ⋅t₃  ⋅t₄ ⋅(1 - t₁)⋅(1 - t₂)⋅(1 - t₃)⋅(1 - t₄)⋅(-t₁⋅t₂ + 1)⋅(-t₂⋅t₃ + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ (-t₃⋅x₁ + 1)⋅(-t₃⋅x₂ + 1)⋅(-t₄⋅x₁ + 1)⋅(-t₄⋅x₂ + 1)⋅(t₁⋅t₂⋅t₃ - x₁)⋅(t₁⋅t₂⋅t ↪

↪                                                                              ↪
↪ )⋅(-t₃⋅t₄ + 1)⋅(-t₁⋅t₂⋅t₃ + 1)⋅(-t₂⋅t₃⋅t₄ + 1)⋅(-t₁⋅t₂⋅t₃⋅t₄ + 1)            ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ ₃ - x₂)⋅(-t₁⋅t₂⋅x₁ + 1)⋅(-t₁⋅t₂⋅x₂ + 1)⋅(t₂⋅t₃⋅t₄ - x₁)⋅(t₂⋅t₃⋅t₄ - x₂)⋅(-t₂ ↪

↪                                                                              ↪
↪                                                                              ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ ⋅t₃⋅x₁ + 1)⋅(-t₂⋅t₃⋅x₂ + 1)⋅(-t₃⋅t₄⋅x₁ + 1)⋅(-t₃⋅t₄⋅x₂ + 1)⋅(t₁⋅t₂⋅t₃⋅t₄ - x ↪

↪                                                                              ↪
↪                                                                              ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪ ₁)⋅(t₁⋅t₂⋅t₃⋅t₄ - x₂)⋅(-t₁⋅t₂⋅t₃⋅x₁ + 1)⋅(-t₁⋅t₂⋅t₃⋅x₂ + 1)⋅(-t₂⋅t₃⋅t₄⋅x₁ +  ↪

↪                                                                  
↪                                                                  
↪ ─────────────────────────────────────────────────────────────────
↪                                                                  
↪ 1)⋅(-t₂⋅t₃⋅t₄⋅x₂ + 1)⋅(-t₁⋅t₂⋅t₃⋅t₄⋅x₁ + 1)⋅(-t₁⋅t₂⋅t₃⋅t₄⋅x₂ + 1)


Integration order is:
[t4, t3, t2, t1]


------------------------------------------------------
Integrating over variable: t4
Number of terms in f_current: 1
Expression small enough for direct denominator calculation
Total time for denominator calculation: 0.001 seconds
Time to factor denominator: 0.033 seconds
Factors of the denominator:
x1 - 1, x2 - 1, -t1 + x1, -t1 + x2, -t2 + x1, -t2 + x2, -t3 + x1, -t3 + x2, -t4 + x1, -t4 + x2, t1*x1 - 1, t1*x2 - 1, t2*x1 - 1, t2*x2 - 1, t3*x1 - 1, t3*x2 - 1, t4*x1 - 1, t4*x2 - 1, -t1*t2 + x1, -t2*t3 + x1, -t3*t4 + x1, -t1*t2 + x2, -t2*t3 + x2, -t3*t4 + x2, t1*t2*x1 - 1, t1*t2*x2 - 1, t2*t3*x1 - 1, t2*t3*x2 - 1, t3*t4*x1 - 1, t3*t4*x2 - 1, -t1*t2*t3 + x1, -t2*t3*t4 + x1, -t1*t2*t3 + x2, -t2*t3*t4 + x2, t1*t2*t3*x1 - 1, t1*t2*t3*x2 - 1, t2*t3*t4*x1 - 1, t2*t3*t4*x2 - 1, -t1*t2*t3*t4 + x1, -t1*t2*t3*t4 + x2, t1*t2*t3*t4*x1 - 1, t1*t2*t3*t4*x2 - 1


Candidate poles for t4 with their original factors:
Pole: x1, Factor: -t4 + x1, Order: 1
Pole: x2, Factor: -t4 + x2, Order: 1
Pole: 1/x1, Factor: t4*x1 - 1, Order: 1
Pole: 1/x2, Factor: t4*x2 - 1, Order: 1
Pole: x1/t3, Factor: -t3*t4 + x1, Order: 1
Pole: x2/t3, Factor: -t3*t4 + x2, Order: 1
Pole: 1/(t3*x1), Factor: t3*t4*x1 - 1, Order: 1
Pole: 1/(t3*x2), Factor: t3*t4*x2 - 1, Order: 1
Pole: x1/(t2*t3), Factor: -t2*t3*t4 + x1, Order: 1
Pole: x2/(t2*t3), Factor: -t2*t3*t4 + x2, Order: 1
Pole: 1/(t2*t3*x1), Factor: t2*t3*t4*x1 - 1, Order: 1
Pole: 1/(t2*t3*x2), Factor: t2*t3*t4*x2 - 1, Order: 1
Pole: x1/(t1*t2*t3), Factor: -t1*t2*t3*t4 + x1, Order: 1
Pole: x2/(t1*t2*t3), Factor: -t1*t2*t3*t4 + x2, Order: 1
Pole: 1/(t1*t2*t3*x1), Factor: t1*t2*t3*t4*x1 - 1, Order: 1
Pole: 1/(t1*t2*t3*x2), Factor: t1*t2*t3*t4*x2 - 1, Order: 1


Testing whether the poles are inside unit circle
Candidate pole: x1
Original factor: -t4 + x1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2
Original factor: -t4 + x2
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/x1
Original factor: t4*x1 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/x2
Original factor: t4*x2 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/t3
Original factor: -t3*t4 + x1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2/t3
Original factor: -t3*t4 + x2
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/(t3*x1)
Original factor: t3*t4*x1 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t3*x2)
Original factor: t3*t4*x2 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/(t2*t3)
Original factor: -t2*t3*t4 + x1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2/(t2*t3)
Original factor: -t2*t3*t4 + x2
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/(t2*t3*x1)
Original factor: t2*t3*t4*x1 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t2*t3*x2)
Original factor: t2*t3*t4*x2 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/(t1*t2*t3)
Original factor: -t1*t2*t3*t4 + x1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2/(t1*t2*t3)
Original factor: -t1*t2*t3*t4 + x2
Remaining vars: [t1, t2, t3]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/(t1*t2*t3*x1)
Original factor: t1*t2*t3*t4*x1 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t1*t2*t3*x2)
Original factor: t1*t2*t3*t4*x2 - 1
Remaining vars: [t1, t2, t3]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586


Poles inside | t4 | = 1 with their factors and highest orders:
Pole: x1, Factor: -t4 + x1, Highest Order: 1
Pole: x2, Factor: -t4 + x2, Highest Order: 1
Pole: x1/t3, Factor: -t3*t4 + x1, Highest Order: 1
Pole: x2/t3, Factor: -t3*t4 + x2, Highest Order: 1
Pole: x1/(t2*t3), Factor: -t2*t3*t4 + x1, Highest Order: 1
Pole: x2/(t2*t3), Factor: -t2*t3*t4 + x2, Highest Order: 1
Pole: x1/(t1*t2*t3), Factor: -t1*t2*t3*t4 + x1, Highest Order: 1
Pole: x2/(t1*t2*t3), Factor: -t1*t2*t3*t4 + x2, Highest Order: 1


Residue for candidate pole x2 is: t1**7*t2**11*t3**11*x2**4*(t1 - 1)*(t2 - 1)*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 - x2)*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - 1)*(t2*x2 - 1)*(t3*x1 - 1)*(-t3*x2 + x1)*(t3*x2**2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t2*t3*x1 - 1)*(-t2*t3*x2 + x1)*(t2*t3*x2**2 - 1)*(t3*x1*x2 - 1)*(t1*t2*t3*x1 - 1)*(-t1*t2*t3*x2 + x1)*(t1*t2*t3*x2**2 - 1)*(t2*t3*x1*x2 - 1)*(t1*t2*t3*x1*x2 - 1))
Residue for candidate pole x1 is: t1**7*t2**11*t3**11*x1**4*(t1 - 1)*(t2 - 1)*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - 1)*(t2*x2 - 1)*(t3*x1 - x2)*(t3*x1**2 - 1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t2*t3*x1 - x2)*(t2*t3*x1**2 - 1)*(t2*t3*x2 - 1)*(t3*x1*x2 - 1)*(t1*t2*t3*x1 - x2)*(t1*t2*t3*x1**2 - 1)*(t1*t2*t3*x2 - 1)*(t2*t3*x1*x2 - 1)*(t1*t2*t3*x1*x2 - 1))
Residue for candidate pole x2/t3 is: -t1**7*t2**11*t3**6*x2**4*(t1 - 1)*(t2*t3 - 1)*(t1*t2*t3 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1)*(-t3 + x2**2)*(-t3 + x1*x2)*(x1 - 1)**5*(x1 - x2)*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(t3*x1 - 1)*(t3*x1 - x2)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t2*t3*x1 - 1)*(t2*t3*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*t3*x1 - 1)*(t1*t2*t3*x2 - 1)*(t1*t2*x1*x2 - 1))
Residue for candidate pole x1/t3 is: -t1**7*t2**11*t3**6*x1**4*(t1 - 1)*(t2*t3 - 1)*(t1*t2*t3 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1**2)*(-t3 + x2)*(-t3 + x1*x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)*(t3*x1 - 1)*(-t3*x2 + x1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)*(t2*t3*x1 - 1)*(t2*t3*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*t3*x1 - 1)*(t1*t2*t3*x2 - 1)*(t1*t2*x1*x2 - 1))
Residue for candidate pole x1/(t2*t3) is: t1**7*t2**9*t3**6*x1**4*(t3 - 1)*(t1*t2 - 1)*(t1*t2*t3 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)*(-t2*t3 + x1**2)*(-t2*t3 + x2)*(-t2*t3 + x1*x2)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(t3*x1 - 1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*t3*x1 - 1)*(-t2*t3*x2 + x1)*(t2*t3*x2 - 1)*(t1*t2*t3*x1 - 1)*(t1*t2*t3*x2 - 1))
Residue for candidate pole x2/(t2*t3) is: t1**7*t2**9*t3**6*x2**4*(t3 - 1)*(t1*t2 - 1)*(t1*t2*t3 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2**2)*(-t2 + x1*x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 - x2)*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2**2)*(-t2*t3 + x1*x2)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(t3*x1 - 1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*t3*x1 - 1)*(t2*t3*x1 - x2)*(t2*t3*x2 - 1)*(t1*t2*t3*x1 - 1)*(t1*t2*t3*x2 - 1))
Residue for candidate pole x1/(t1*t2*t3) is: -t1**8*t2**9*t3**6*x1**4*(t2 - 1)*(t3 - 1)*(t2*t3 - 1)/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)*(x2 - 1)**5*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - 1)*(t2*x2 - 1)*(t3*x1 - 1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1**2)*(-t1*t2*t3 + x2)*(-t1*t2*t3 + x1*x2)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t2*t3*x1 - 1)*(t2*t3*x2 - 1)*(t1*t2*t3*x1 - 1)*(-t1*t2*t3*x2 + x1)*(t1*t2*t3*x2 - 1))
Residue for candidate pole x2/(t1*t2*t3) is: -t1**8*t2**9*t3**6*x2**4*(t2 - 1)*(t3 - 1)*(t2*t3 - 1)/((-t1 + x1)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(-t3 + x1)*(-t3 + x2)*(x1 - 1)**5*(x1 - x2)*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(-t2*t3 + x1)*(-t2*t3 + x2)*(t2*x1 - 1)*(t2*x2 - 1)*(t3*x1 - 1)*(t3*x2 - 1)*(x1*x2 - 1)*(-t1*t2*t3 + x1)*(-t1*t2*t3 + x2**2)*(-t1*t2*t3 + x1*x2)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)*(t2*t3*x1 - 1)*(t2*t3*x2 - 1)*(t1*t2*t3*x1 - 1)*(t1*t2*t3*x1 - x2)*(t1*t2*t3*x2 - 1))
Time taken for integration over variable t4: 1.6190838813781738 seconds

------------------------------------------------------
Integrating over variable: t3
Number of terms in f_current: 8
Large expression with 8 terms detected for denominator calculation
Using batch processing with batch_size_lcm=2
Denominator iteration 1: Processing 8 terms in 4 batches
Denominator iteration 1 completed in 0.305 seconds
Reduced to 4 terms
Denominator iteration 2: Processing 4 terms in 2 batches
Denominator iteration 2 completed in 0.308 seconds
Reduced to 2 terms
Computing final denominator...
Total time for denominator calculation: 0.661 seconds
Time to factor denominator: 0.065 seconds
Factors of the denominator:
x1 + 1, x2 + 1, x1 - 1, x2 - 1, -t1 + x1, -t2 + x1, -t3 + x1, x1 - x2, -t1 + x2, -t2 + x2, -t3 + x2, t1*x1 - 1, t1*x2 - 1, t2*x1 - 1, t2*x2 - 1, t3*x1 - 1, t3*x2 - 1, x1*x2 - 1, -t1*t2 + x1, -t1*x2 + x1, -t2*t3 + x1, -t2*x2 + x1, -t3*x2 + x1, -t1*t2 + x2, -t2*t3 + x2, -t1 + x1*x2, -t2 + x1*x2, -t3 + x1*x2, t1*x1 - x2, t2*x1 - x2, t3*x1 - x2, t1*t2*x1 - 1, t1*t2*x2 - 1, t1*x1*x2 - 1, t2*t3*x1 - 1, t2*t3*x2 - 1, t2*x1*x2 - 1, t3*x1*x2 - 1, -t1*t2*t3 + x1, -t1*t2*x2 + x1, -t2*t3*x2 + x1, -t1*t2*t3 + x2, -t1*t2 + x1*x2, -t2*t3 + x1*x2, t1*t2*x1 - x2, t2*t3*x1 - x2, t1*t2*t3*x1 - 1, t1*t2*t3*x2 - 1, t1*t2*x1*x2 - 1, t2*t3*x1*x2 - 1, -t1*t2*t3*x2 + x1, -t1*t2*t3 + x1*x2, t1*t2*t3*x1 - x2, t1*t2*t3*x1*x2 - 1, -t1 + x1**2, -t2 + x1**2, -t3 + x1**2, -t1 + x2**2, -t2 + x2**2, -t3 + x2**2, t1*x1**2 - 1, t1*x2**2 - 1, t2*x1**2 - 1, t2*x2**2 - 1, t3*x1**2 - 1, t3*x2**2 - 1, -t1*t2 + x1**2, -t2*t3 + x1**2, -t1*t2 + x2**2, -t2*t3 + x2**2, t1*t2*x1**2 - 1, t1*t2*x2**2 - 1, t2*t3*x1**2 - 1, t2*t3*x2**2 - 1, -t1*t2*t3 + x1**2, -t1*t2*t3 + x2**2, t1*t2*t3*x1**2 - 1, t1*t2*t3*x2**2 - 1


Candidate poles for t3 with their original factors:
Pole: x1, Factor: -t3 + x1, Order: 1
Pole: x2, Factor: -t3 + x2, Order: 1
Pole: 1/x1, Factor: t3*x1 - 1, Order: 1
Pole: 1/x2, Factor: t3*x2 - 1, Order: 1
Pole: x1/t2, Factor: -t2*t3 + x1, Order: 1
Pole: x1/x2, Factor: -t3*x2 + x1, Order: 1
Pole: x2/t2, Factor: -t2*t3 + x2, Order: 1
Pole: x1*x2, Factor: -t3 + x1*x2, Order: 1
Pole: x2/x1, Factor: t3*x1 - x2, Order: 1
Pole: 1/(t2*x1), Factor: t2*t3*x1 - 1, Order: 1
Pole: 1/(t2*x2), Factor: t2*t3*x2 - 1, Order: 1
Pole: 1/(x1*x2), Factor: t3*x1*x2 - 1, Order: 1
Pole: x1/(t1*t2), Factor: -t1*t2*t3 + x1, Order: 1
Pole: x1/(t2*x2), Factor: -t2*t3*x2 + x1, Order: 1
Pole: x2/(t1*t2), Factor: -t1*t2*t3 + x2, Order: 1
Pole: x1*x2/t2, Factor: -t2*t3 + x1*x2, Order: 1
Pole: x2/(t2*x1), Factor: t2*t3*x1 - x2, Order: 1
Pole: 1/(t1*t2*x1), Factor: t1*t2*t3*x1 - 1, Order: 1
Pole: 1/(t1*t2*x2), Factor: t1*t2*t3*x2 - 1, Order: 1
Pole: 1/(t2*x1*x2), Factor: t2*t3*x1*x2 - 1, Order: 1
Pole: x1/(t1*t2*x2), Factor: -t1*t2*t3*x2 + x1, Order: 1
Pole: x1*x2/(t1*t2), Factor: -t1*t2*t3 + x1*x2, Order: 1
Pole: x2/(t1*t2*x1), Factor: t1*t2*t3*x1 - x2, Order: 1
Pole: 1/(t1*t2*x1*x2), Factor: t1*t2*t3*x1*x2 - 1, Order: 1
Pole: x1**2, Factor: -t3 + x1**2, Order: 1
Pole: x2**2, Factor: -t3 + x2**2, Order: 1
Pole: x1**(-2), Factor: t3*x1**2 - 1, Order: 1
Pole: x2**(-2), Factor: t3*x2**2 - 1, Order: 1
Pole: x1**2/t2, Factor: -t2*t3 + x1**2, Order: 1
Pole: x2**2/t2, Factor: -t2*t3 + x2**2, Order: 1
Pole: 1/(t2*x1**2), Factor: t2*t3*x1**2 - 1, Order: 1
Pole: 1/(t2*x2**2), Factor: t2*t3*x2**2 - 1, Order: 1
Pole: x1**2/(t1*t2), Factor: -t1*t2*t3 + x1**2, Order: 1
Pole: x2**2/(t1*t2), Factor: -t1*t2*t3 + x2**2, Order: 1
Pole: 1/(t1*t2*x1**2), Factor: t1*t2*t3*x1**2 - 1, Order: 1
Pole: 1/(t1*t2*x2**2), Factor: t1*t2*t3*x2**2 - 1, Order: 1


Testing whether the poles are inside unit circle
Candidate pole: x1
Original factor: -t3 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2
Original factor: -t3 + x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/x1
Original factor: t3*x1 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/x2
Original factor: t3*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/t2
Original factor: -t2*t3 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1/x2
Original factor: -t3*x2 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x2/t2
Original factor: -t2*t3 + x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1*x2
Original factor: -t3 + x1*x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2/x1
Original factor: t3*x1 - x2
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: 1/(t2*x1)
Original factor: t2*t3*x1 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t2*x2)
Original factor: t2*t3*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(x1*x2)
Original factor: t3*x1*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1/(t1*t2)
Original factor: -t1*t2*t3 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1/(t2*x2)
Original factor: -t2*t3*x2 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x2/(t1*t2)
Original factor: -t1*t2*t3 + x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1*x2/t2
Original factor: -t2*t3 + x1*x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2/(t2*x1)
Original factor: t2*t3*x1 - x2
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: 1/(t1*t2*x1)
Original factor: t1*t2*t3*x1 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t1*t2*x2)
Original factor: t1*t2*t3*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t2*x1*x2)
Original factor: t2*t3*x1*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1/(t1*t2*x2)
Original factor: -t1*t2*t3*x2 + x1
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x1*x2/(t1*t2)
Original factor: -t1*t2*t3 + x1*x2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2/(t1*t2*x1)
Original factor: t1*t2*t3*x1 - x2
Remaining vars: [t1, t2]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: 1/(t1*t2*x1*x2)
Original factor: t1*t2*t3*x1*x2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2
Original factor: -t3 + x1**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2**2
Original factor: -t3 + x2**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**(-2)
Original factor: t3*x1**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x2**(-2)
Original factor: t3*x2**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2/t2
Original factor: -t2*t3 + x1**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2**2/t2
Original factor: -t2*t3 + x2**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: 1/(t2*x1**2)
Original factor: t2*t3*x1**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(t2*x2**2)
Original factor: t2*t3*x2**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2/(t1*t2)
Original factor: -t1*t2*t3 + x1**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2**2/(t1*t2)
Original factor: -t1*t2*t3 + x2**2
Remaining vars: [t1, t2]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: 1/(t1*t2*x1**2)
Original factor: t1*t2*t3*x1**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(t1*t2*x2**2)
Original factor: t1*t2*t3*x2**2 - 1
Remaining vars: [t1, t2]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503


Poles inside | t3 | = 1 with their factors and highest orders:
Pole: x1, Factor: -t3 + x1, Highest Order: 1
Pole: x2, Factor: -t3 + x2, Highest Order: 1
Pole: x1/t2, Factor: -t2*t3 + x1, Highest Order: 1
Pole: x2/t2, Factor: -t2*t3 + x2, Highest Order: 1
Pole: x1*x2, Factor: -t3 + x1*x2, Highest Order: 1
Pole: x1/(t1*t2), Factor: -t1*t2*t3 + x1, Highest Order: 1
Pole: x2/(t1*t2), Factor: -t1*t2*t3 + x2, Highest Order: 1
Pole: x1*x2/t2, Factor: -t2*t3 + x1*x2, Highest Order: 1
Pole: x1*x2/(t1*t2), Factor: -t1*t2*t3 + x1*x2, Highest Order: 1
Pole: x1**2, Factor: -t3 + x1**2, Highest Order: 1
Pole: x2**2, Factor: -t3 + x2**2, Highest Order: 1
Pole: x1**2/t2, Factor: -t2*t3 + x1**2, Highest Order: 1
Pole: x2**2/t2, Factor: -t2*t3 + x2**2, Highest Order: 1
Pole: x1**2/(t1*t2), Factor: -t1*t2*t3 + x1**2, Highest Order: 1
Pole: x2**2/(t1*t2), Factor: -t1*t2*t3 + x2**2, Highest Order: 1


Progress for pole x1: 12% (1/8) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x1: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1 is: -t1**8*t2**9*x1**6/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)**2*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)**2*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**8*t2**9*x1**3*x2**4/((-t1 + x1)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1 - x2**2)*(t1*t2*x1**2 - 1)*(t1*t2*x1**2 - x2)*(t1*t2*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**7*t2**11*x1**13*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - x2)*(t2*x1**3 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - x2)*(t1*t2*x1**3 - 1)*(t1*t2*x2 - 1)*(t2*x1*x2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2 - 1)*(t1*t2*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*t2**11*x1**6*x2**4*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)**2*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)**2*(t2*x1*x2**2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(t1*t2*x1**2*x2 - 1)) - t1**7*t2**11*x1**3*x2**4*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(t2 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)**2*(t1*t2*x1*x2 - 1)**2) + t1**7*t2**9*x1**6/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)**2*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)**2*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**7*t2**9*x1**3*x2**4/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2)*(t2 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1 - x2**2)*(t2*x1**2 - 1)*(t2*x1**2 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) 
Progress for pole x2: 12% (1/8) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x2: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x2: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2 is: t1**8*t2**9*x1**4*x2**3/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*t2 - 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(-t1*t2*x2 + x1**2)*(t1*t2*x2 - 1)*(-t1*t2*x2**2 + x1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**8*t2**9*x2**6/((-t1 + x1)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)**2*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)**2*(t1*t2*x1 - x2)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**7*t2**11*x1**4*x2**6*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)**2*(-t2*x2 + x1)*(t2*x2 - 1)*(t2*x2**2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)**2*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*t2*x2**2 - 1)*(t2*x1*x2**2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(t1*t2*x1**2*x2 - 1)) + t1**7*t2**11*x1**4*x2**3*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(t2 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)**2*(t1*t2*x1*x2 - 1)**2) - t1**7*t2**11*x2**13*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(-t2*x2**2 + x1)*(t2*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(-t1*t2*x2**2 + x1)*(t1*t2*x2**3 - 1)*(t2*x1*x2 - 1)*(t2*x1*x2**2 - 1)*(t1*t2*x1*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*t2**9*x1**4*x2**3/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(t2 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(-t2*x2 + x1**2)*(t2*x2 - 1)*(-t2*x2**2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**7*t2**9*x2**6/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)**2*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)**2*(t2*x1 - x2)*(-t2*x2 + x1)*(t2*x2 - 1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) 
Progress for pole x1/t2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 4.8s
Progress for pole x1/t2: 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.3s
Progress for pole x1/t2: 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1/t2: 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1/t2: 62% (5/8) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1/t2: 75% (6/8) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1/t2: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1/t2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1/t2 is: t1**8*t2**5*x1**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) + t1**8*t2**5*x1**3*x2**4/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*t2**10*x1**6/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)**2*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)**2*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**7*t2**10*x1**3*x2**4/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(t2 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(-t2*x2 + x1**2)*(t2*x2 - 1)*(-t2*x2**2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**7*t2**5*x1**13*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**3)*(-t2 + x2)*(-t2 + x1*x2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(-t2*x2 + x1**2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*t2**5*x1**6*x2**4*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)**2*(-t2 + x1*x2**2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*t2**5*x1**3*x2**4*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(-t2 + x1**2)*(-t2 + x2**2)*(-t2 + x1*x2)**2*(t2 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)**2) 
Progress for pole x2/t2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 5.0s
Progress for pole x2/t2: 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x2/t2: 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2/t2: 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x2/t2: 62% (5/8) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x2/t2: 75% (6/8) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x2/t2: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2/t2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2/t2 is: -t1**8*t2**5*x1**4*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(-t2 + x1)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) + t1**8*t2**5*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*t2**10*x1**4*x2**3/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2)*(t2 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1 - x2**2)*(t2*x1**2 - 1)*(t2*x1**2 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**7*t2**10*x2**6/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)**2*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)**2*(t2*x1 - x2)*(-t2*x2 + x1)*(t2*x2 - 1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2**2 - 1)*(t1*x1*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**7*t2**5*x1**4*x2**6*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)**2*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2**2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*t2**5*x1**4*x2**3*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(-t2 + x1**2)*(-t2 + x2**2)*(-t2 + x1*x2)**2*(t2 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)**2) + t1**7*t2**5*x2**13*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t2 + x2**3)*(-t2 + x1*x2)*(-t2 + x1*x2**2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1 - x2**2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1*x2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 5.0s
Progress for pole x1*x2: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1*x2: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1*x2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1*x2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1*x2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1*x2 is: t1**7*t2**11*x1**6*x2**3*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)**2*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(t1*t2*x2 - 1)**2*(t2*x1*x2**2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(t1*t2*x1**2*x2 - 1)) + t1**7*t2**11*x1**3*x2**6*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)**2*(-t2*x2 + x1)*(t2*x2 - 1)*(t2*x2**2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)**2*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*t2*x2**2 - 1)*(t2*x1*x2**2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(t1*t2*x1**2*x2 - 1)) 
Progress for pole x1/(t1*t2): 12% (1/8) - Elapsed: 0.7s, Est. remaining: 5.1s
Progress for pole x1/(t1*t2): 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x1/(t1*t2): 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x1/(t1*t2): 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1/(t1*t2): 62% (5/8) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1/(t1*t2): 75% (6/8) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1/(t1*t2): 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1/(t1*t2): 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1/(t1*t2) is: t1**9*t2**10*x1**6/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)**2*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)**2*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**9*t2**10*x1**3*x2**4/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*t2 - 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(-t1*t2*x2 + x1**2)*(t1*t2*x2 - 1)*(-t1*t2*x2**2 + x1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**9*t2**5*x1**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)**2*(x1 - x2)**2*(x2 - 1)**5*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) + t1**9*t2**5*x1**3*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(-t2 + x1)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) + t1**7*t2**5*x1**13*(t2 - 1)/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x1**3)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(-t1*t2*x2 + x1**2)*(t1*t2*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*t2**5*x1**6*x2**4*(t2 - 1)/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)**2*(-t1*t2 + x1*x2**2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)) - t1**7*t2**5*x1**3*x2**4*(t2 - 1)/((-t1 + x1**2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1**2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)**2*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)) 
Progress for pole x2/(t1*t2): 12% (1/8) - Elapsed: 0.8s, Est. remaining: 5.3s
Progress for pole x2/(t1*t2): 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.5s
Progress for pole x2/(t1*t2): 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x2/(t1*t2): 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x2/(t1*t2): 62% (5/8) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2/(t1*t2): 75% (6/8) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2/(t1*t2): 87% (7/8) - Elapsed: 0.9s, Est. remaining: 0.1s
Progress for pole x2/(t1*t2): 100% (8/8) - Elapsed: 0.9s, Est. remaining: 0.0s
(completed in 0.9s) Residue for candidate pole x2/(t1*t2) is: t1**9*t2**10*x1**4*x2**3/((-t1 + x1)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - x2)*(t2*x1**2 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1 - x2**2)*(t1*t2*x1**2 - 1)*(t1*t2*x1**2 - x2)*(t1*t2*x2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) + t1**9*t2**10*x2**6/((-t1 + x1)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)**2*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2**2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)**2*(t1*t2*x1 - x2)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(t1*t2*x2**2 - 1)*(t2*x1*x2 - 1)*(t1*t2*x1*x2 - 1)) - t1**9*t2**5*x1**4*x2**3/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(-t2 + x1**2)*(-t2 + x2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) - t1**9*t2**5*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t2 + x1)*(-t2 + x2**2)*(-t2 + x1*x2)*(x1 - 1)**5*(x1 - x2)**2*(x2 - 1)**5*(x2 + 1)**2*(-t1*t2 + x1)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*t2**5*x1**4*x2**6*(t2 - 1)/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)**2*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2**2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)) + t1**7*t2**5*x1**4*x2**3*(t2 - 1)/((-t1 + x1**2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1**2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2)**2*(t1*t2 - 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)) - t1**7*t2**5*x2**13*(t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(-t1*t2 + x2**3)*(-t1*t2 + x1*x2)*(-t1*t2 + x1*x2**2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1 - x2**2)*(t1*t2*x2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1*x2/t2: 12% (1/8) - Elapsed: 0.8s, Est. remaining: 5.3s
Progress for pole x1*x2/t2: 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.3s
Progress for pole x1*x2/t2: 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1*x2/t2: 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1*x2/t2: 62% (5/8) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1*x2/t2: 75% (6/8) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1*x2/t2: 87% (7/8) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1*x2/t2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1*x2/t2 is: -t1**7*t2**5*x1**6*x2**3*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**2)*(-t2 + x2)**2*(-t2 + x1*x2**2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*t2**5*x1**3*x2**6*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)**2*(-t2 + x2)*(-t2 + x2**2)*(-t2 + x1*x2**2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) 
Progress for pole x1*x2/(t1*t2): 12% (1/8) - Elapsed: 0.8s, Est. remaining: 5.7s
Progress for pole x1*x2/(t1*t2): 25% (2/8) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x1*x2/(t1*t2): 37% (3/8) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x1*x2/(t1*t2): 50% (4/8) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1*x2/(t1*t2): 62% (5/8) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1*x2/(t1*t2): 75% (6/8) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1*x2/(t1*t2): 87% (7/8) - Elapsed: 0.9s, Est. remaining: 0.1s
Progress for pole x1*x2/(t1*t2): 100% (8/8) - Elapsed: 0.9s, Est. remaining: 0.0s
(completed in 0.9s) Residue for candidate pole x1*x2/(t1*t2) is: t1**7*t2**5*x1**6*x2**3*(t2 - 1)/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x1**2)*(-t1*t2 + x2)**2*(-t1*t2 + x1*x2**2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)) + t1**7*t2**5*x1**3*x2**6*(t2 - 1)/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)**2*(-t1*t2 + x2)*(-t1*t2 + x2**2)*(-t1*t2 + x1*x2**2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x2 - 1)) 
Progress for pole x1**2: 12% (1/8) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x1**2: 25% (2/8) - Elapsed: 0.6s, Est. remaining: 1.9s
Progress for pole x1**2: 37% (3/8) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 100% (8/8) - Elapsed: 0.7s, Est. remaining: 0.0s
(completed in 0.7s) Residue for candidate pole x1**2 is: -t1**7*t2**11*x1**12*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1**2 - x2)*(t2*x1**3 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1**2 - x2)*(t1*t2*x1**3 - 1)*(t1*t2*x2 - 1)*(t2*x1*x2 - 1)*(t2*x1**2*x2 - 1)*(t1*t2*x1*x2 - 1)*(t1*t2*x1**2*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 4.6s
Progress for pole x2**2: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x2**2: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x2**2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 100% (8/8) - Elapsed: 0.7s, Est. remaining: 0.0s
(completed in 0.7s) Residue for candidate pole x2**2 is: t1**7*t2**11*x2**12*(t1 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(t2*x2 - 1)*(-t2*x2**2 + x1)*(t2*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(t1*t2*x2 - 1)*(-t1*t2*x2**2 + x1)*(t1*t2*x2**3 - 1)*(t2*x1*x2 - 1)*(t2*x1*x2**2 - 1)*(t1*t2*x1*x2 - 1)*(t1*t2*x1*x2**2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1**2/t2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 4.8s
Progress for pole x1**2/t2: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x1**2/t2: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1**2/t2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/t2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/t2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t2: 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/t2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2/t2 is: t1**7*t2**5*x1**12*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x1**3)*(-t2 + x2)*(-t2 + x1*x2)*(-t2 + x1**2*x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(t2*x1 - 1)*(-t2*x2 + x1)*(-t2*x2 + x1**2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**2/t2: 12% (1/8) - Elapsed: 0.7s, Est. remaining: 4.9s
Progress for pole x2**2/t2: 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x2**2/t2: 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x2**2/t2: 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**2/t2: 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/t2: 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t2: 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/t2: 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**2/t2 is: -t1**7*t2**5*x2**12*(t1*t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t2 + x1)*(-t2 + x2)*(-t2 + x2**3)*(-t2 + x1*x2)*(-t2 + x1*x2**2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(t2*x1 - 1)*(t2*x1 - x2)*(t2*x1 - x2**2)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1**2/(t1*t2): 12% (1/8) - Elapsed: 0.7s, Est. remaining: 4.9s
Progress for pole x1**2/(t1*t2): 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x1**2/(t1*t2): 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1**2/(t1*t2): 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/(t1*t2): 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/(t1*t2): 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*t2): 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*t2): 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2/(t1*t2) is: -t1**7*t2**5*x1**12*(t2 - 1)/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1**2 - x2)*(x2 - 1)**5*(-t1*t2 + x1)*(-t1*t2 + x1**3)*(-t1*t2 + x2)*(-t1*t2 + x1*x2)*(-t1*t2 + x1**2*x2)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1**2*x2 - 1)*(t1*t2*x1 - 1)*(-t1*t2*x2 + x1)*(-t1*t2*x2 + x1**2)*(t1*t2*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**2/(t1*t2): 12% (1/8) - Elapsed: 0.7s, Est. remaining: 5.0s
Progress for pole x2**2/(t1*t2): 25% (2/8) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x2**2/(t1*t2): 37% (3/8) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x2**2/(t1*t2): 50% (4/8) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**2/(t1*t2): 62% (5/8) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/(t1*t2): 75% (6/8) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/(t1*t2): 87% (7/8) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*t2): 100% (8/8) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**2/(t1*t2) is: t1**7*t2**5*x2**12*(t2 - 1)/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t2 + x1)*(-t2 + x2)*(x1 - 1)**5*(x1 - x2)**2*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(-t1*t2 + x1)*(-t1*t2 + x2)*(-t1*t2 + x2**3)*(-t1*t2 + x1*x2)*(-t1*t2 + x1*x2**2)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(t2*x1 - 1)*(t2*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(t1*t2*x1 - 1)*(t1*t2*x1 - x2)*(t1*t2*x1 - x2**2)*(t1*t2*x2 - 1)*(x2**2 + x2 + 1)) 
Time taken for integration over variable t3: 14.817914009094238 seconds

------------------------------------------------------
Integrating over variable: t2
Number of terms in f_current: 54
Large expression with 54 terms detected for denominator calculation
Using batch processing with batch_size_lcm=2
Denominator iteration 1: Processing 54 terms in 27 batches
Denominator iteration 1 completed in 0.353 seconds
Reduced to 17 terms
Denominator iteration 2: Processing 17 terms in 9 batches
Denominator iteration 2 completed in 0.328 seconds
Reduced to 9 terms
Denominator iteration 3: Processing 9 terms in 5 batches
Denominator iteration 3 completed in 0.325 seconds
Reduced to 5 terms
Denominator iteration 4: Processing 5 terms in 3 batches
Denominator iteration 4 completed in 0.343 seconds
Reduced to 3 terms
Denominator iteration 5: Processing 3 terms in 2 batches
Denominator iteration 5 completed in 0.328 seconds
Reduced to 2 terms
Computing final denominator...
Total time for denominator calculation: 1.739 seconds
Time to factor denominator: 0.072 seconds
Factors of the denominator:
t1 - 1, t2 - 1, x1 + 1, x2 + 1, x1 - 1, x2 - 1, x1 - x2**2, t1*t2 - 1, x1*x2**2 - 1, -t1 + x1, -t2 + x1, x1 - x2, -t1 + x2, -t2 + x2, t1*x1 - 1, t1*x2 - 1, t2*x1 - 1, t2*x2 - 1, x1*x2 - 1, -t1*x2 + x1, -t2*x2 + x1, -t1*x2**2 + x1, -t2*x2**2 + x1, -t1 + x1*x2**2, -t2 + x1*x2**2, t1*x1 - x2, t2*x1 - x2, t1*x1 - x2**2, t2*x1 - x2**2, t1*x1*x2**2 - 1, t2*x1*x2**2 - 1, -t1*t2 + x1, -t1*t2 + x2, -t1 + x1*x2, -t2 + x1*x2, t1*t2*x1 - 1, t1*t2*x2 - 1, t1*x1*x2 - 1, t2*x1*x2 - 1, -t1*t2*x2 + x1, -t1*t2*x2**2 + x1, -t1*t2 + x1*x2**2, t1*t2*x1 - x2, t1*t2*x1 - x2**2, t1*t2*x1*x2**2 - 1, -t1*t2 + x1*x2, t1*t2*x1*x2 - 1, x1**2 + x1 + 1, x2**2 + x2 + 1, -t1 + x1**2, -t2 + x1**2, x1**2 - x2, -t1 + x2**2, -t2 + x2**2, t1*x1**2 - 1, t1*x2**2 - 1, t2*x1**2 - 1, t2*x2**2 - 1, x1**2*x2 - 1, -t1*t2 + x1**2, -t1*x2 + x1**2, -t2*x2 + x1**2, -t1*t2 + x2**2, -t1 + x1**2*x2, -t2 + x1**2*x2, t1*x1**2 - x2, t2*x1**2 - x2, t1*t2*x1**2 - 1, t1*t2*x2**2 - 1, t1*x1**2*x2 - 1, t2*x1**2*x2 - 1, -t1*t2*x2 + x1**2, -t1*t2 + x1**2*x2, t1*t2*x1**2 - x2, t1*t2*x1**2*x2 - 1, -t1 + x1**3, -t2 + x1**3, -t1 + x2**3, -t2 + x2**3, t1*x1**3 - 1, t1*x2**3 - 1, t2*x1**3 - 1, t2*x2**3 - 1, -t1*t2 + x1**3, -t1*t2 + x2**3, t1*t2*x1**3 - 1, t1*t2*x2**3 - 1


Candidate poles for t2 with their original factors:
Pole: 1, Factor: t2 - 1, Order: 1
Pole: 1/t1, Factor: t1*t2 - 1, Order: 1
Pole: x1, Factor: -t2 + x1, Order: 2
Pole: x2, Factor: -t2 + x2, Order: 2
Pole: 1/x1, Factor: t2*x1 - 1, Order: 2
Pole: 1/x2, Factor: t2*x2 - 1, Order: 2
Pole: x1/x2, Factor: -t2*x2 + x1, Order: 1
Pole: x1/x2**2, Factor: -t2*x2**2 + x1, Order: 1
Pole: x1*x2**2, Factor: -t2 + x1*x2**2, Order: 1
Pole: x2/x1, Factor: t2*x1 - x2, Order: 1
Pole: x2**2/x1, Factor: t2*x1 - x2**2, Order: 1
Pole: 1/(x1*x2**2), Factor: t2*x1*x2**2 - 1, Order: 1
Pole: x1/t1, Factor: -t1*t2 + x1, Order: 2
Pole: x2/t1, Factor: -t1*t2 + x2, Order: 2
Pole: x1*x2, Factor: -t2 + x1*x2, Order: 2
Pole: 1/(t1*x1), Factor: t1*t2*x1 - 1, Order: 2
Pole: 1/(t1*x2), Factor: t1*t2*x2 - 1, Order: 2
Pole: 1/(x1*x2), Factor: t2*x1*x2 - 1, Order: 2
Pole: x1/(t1*x2), Factor: -t1*t2*x2 + x1, Order: 1
Pole: x1/(t1*x2**2), Factor: -t1*t2*x2**2 + x1, Order: 1
Pole: x1*x2**2/t1, Factor: -t1*t2 + x1*x2**2, Order: 1
Pole: x2/(t1*x1), Factor: t1*t2*x1 - x2, Order: 1
Pole: x2**2/(t1*x1), Factor: t1*t2*x1 - x2**2, Order: 1
Pole: 1/(t1*x1*x2**2), Factor: t1*t2*x1*x2**2 - 1, Order: 1
Pole: x1*x2/t1, Factor: -t1*t2 + x1*x2, Order: 2
Pole: 1/(t1*x1*x2), Factor: t1*t2*x1*x2 - 1, Order: 2
Pole: x1**2, Factor: -t2 + x1**2, Order: 1
Pole: x2**2, Factor: -t2 + x2**2, Order: 1
Pole: x1**(-2), Factor: t2*x1**2 - 1, Order: 1
Pole: x2**(-2), Factor: t2*x2**2 - 1, Order: 1
Pole: x1**2/t1, Factor: -t1*t2 + x1**2, Order: 1
Pole: x1**2/x2, Factor: -t2*x2 + x1**2, Order: 1
Pole: x2**2/t1, Factor: -t1*t2 + x2**2, Order: 1
Pole: x1**2*x2, Factor: -t2 + x1**2*x2, Order: 1
Pole: x2/x1**2, Factor: t2*x1**2 - x2, Order: 1
Pole: 1/(t1*x1**2), Factor: t1*t2*x1**2 - 1, Order: 1
Pole: 1/(t1*x2**2), Factor: t1*t2*x2**2 - 1, Order: 1
Pole: 1/(x1**2*x2), Factor: t2*x1**2*x2 - 1, Order: 1
Pole: x1**2/(t1*x2), Factor: -t1*t2*x2 + x1**2, Order: 1
Pole: x1**2*x2/t1, Factor: -t1*t2 + x1**2*x2, Order: 1
Pole: x2/(t1*x1**2), Factor: t1*t2*x1**2 - x2, Order: 1
Pole: 1/(t1*x1**2*x2), Factor: t1*t2*x1**2*x2 - 1, Order: 1
Pole: x1**3, Factor: -t2 + x1**3, Order: 1
Pole: x2**3, Factor: -t2 + x2**3, Order: 1
Pole: x1**(-3), Factor: t2*x1**3 - 1, Order: 1
Pole: x2**(-3), Factor: t2*x2**3 - 1, Order: 1
Pole: x1**3/t1, Factor: -t1*t2 + x1**3, Order: 1
Pole: x2**3/t1, Factor: -t1*t2 + x2**3, Order: 1
Pole: 1/(t1*x1**3), Factor: t1*t2*x1**3 - 1, Order: 1
Pole: 1/(t1*x2**3), Factor: t1*t2*x2**3 - 1, Order: 1


Testing whether the poles are inside unit circle
Candidate pole: 1
Original factor: t2 - 1
Remaining vars: [t1]
Testing candidate pole: 1 -> 1.0
Candidate pole: 1/t1
Original factor: t1*t2 - 1
Remaining vars: [t1]
Testing candidate pole: 1 -> 1.0
Candidate pole: x1
Original factor: -t2 + x1
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2
Original factor: -t2 + x2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/x1
Original factor: t2*x1 - 1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/x2
Original factor: t2*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/x2
Original factor: -t2*x2 + x1
Remaining vars: [t1]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x1/x2**2
Original factor: -t2*x2**2 + x1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1*x2**2
Original factor: -t2 + x1*x2**2
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2/x1
Original factor: t2*x1 - x2
Remaining vars: [t1]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x2**2/x1
Original factor: t2*x1 - x2**2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/(x1*x2**2)
Original factor: t2*x1*x2**2 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1/t1
Original factor: -t1*t2 + x1
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2/t1
Original factor: -t1*t2 + x2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1*x2
Original factor: -t2 + x1*x2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: 1/(t1*x1)
Original factor: t1*t2*x1 - 1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t1*x2)
Original factor: t1*t2*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(x1*x2)
Original factor: t2*x1*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1/(t1*x2)
Original factor: -t1*t2*x2 + x1
Remaining vars: [t1]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x1/(t1*x2**2)
Original factor: -t1*t2*x2**2 + x1
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1*x2**2/t1
Original factor: -t1*t2 + x1*x2**2
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2/(t1*x1)
Original factor: t1*t2*x1 - x2
Remaining vars: [t1]
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x2**2/(t1*x1)
Original factor: t1*t2*x1 - x2**2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/(t1*x1*x2**2)
Original factor: t1*t2*x1*x2**2 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1*x2/t1
Original factor: -t1*t2 + x1*x2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: 1/(t1*x1*x2)
Original factor: t1*t2*x1*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2
Original factor: -t2 + x1**2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2**2
Original factor: -t2 + x2**2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**(-2)
Original factor: t2*x1**2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x2**(-2)
Original factor: t2*x2**2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2/t1
Original factor: -t1*t2 + x1**2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**2/x2
Original factor: -t2*x2 + x1**2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2**2/t1
Original factor: -t1*t2 + x2**2
Remaining vars: [t1]
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**2*x2
Original factor: -t2 + x1**2*x2
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2/x1**2
Original factor: t2*x1**2 - x2
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t1*x1**2)
Original factor: t1*t2*x1**2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(t1*x2**2)
Original factor: t1*t2*x2**2 - 1
Remaining vars: [t1]
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(x1**2*x2)
Original factor: t2*x1**2*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1**2/(t1*x2)
Original factor: -t1*t2*x2 + x1**2
Remaining vars: [t1]
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1**2*x2/t1
Original factor: -t1*t2 + x1**2*x2
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2/(t1*x1**2)
Original factor: t1*t2*x1**2 - x2
Remaining vars: [t1]
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/(t1*x1**2*x2)
Original factor: t1*t2*x1**2*x2 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1**3
Original factor: -t2 + x1**3
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2**3
Original factor: -t2 + x2**3
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x1**(-3)
Original factor: t2*x1**3 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943
Candidate pole: x2**(-3)
Original factor: t2*x2**3 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943
Candidate pole: x1**3/t1
Original factor: -t1*t2 + x1**3
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2**3/t1
Original factor: -t1*t2 + x2**3
Remaining vars: [t1]
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: 1/(t1*x1**3)
Original factor: t1*t2*x1**3 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943
Candidate pole: 1/(t1*x2**3)
Original factor: t1*t2*x2**3 - 1
Remaining vars: [t1]
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943


Poles inside | t2 | = 1 with their factors and highest orders:
Pole: x1, Factor: -t2 + x1, Highest Order: 1
Pole: x2, Factor: -t2 + x2, Highest Order: 1
Pole: x1*x2**2, Factor: -t2 + x1*x2**2, Highest Order: 2
Pole: x2**2/x1, Factor: t2*x1 - x2**2, Highest Order: 2
Pole: x1/t1, Factor: -t1*t2 + x1, Highest Order: 2
Pole: x2/t1, Factor: -t1*t2 + x2, Highest Order: 2
Pole: x1*x2, Factor: -t2 + x1*x2, Highest Order: 1
Pole: x1*x2**2/t1, Factor: -t1*t2 + x1*x2**2, Highest Order: 1
Pole: x2**2/(t1*x1), Factor: t1*t2*x1 - x2**2, Highest Order: 1
Pole: x1*x2/t1, Factor: -t1*t2 + x1*x2, Highest Order: 1
Pole: x1**2, Factor: -t2 + x1**2, Highest Order: 1
Pole: x2**2, Factor: -t2 + x2**2, Highest Order: 1
Pole: x1**2/t1, Factor: -t1*t2 + x1**2, Highest Order: 2
Pole: x1**2/x2, Factor: -t2*x2 + x1**2, Highest Order: 2
Pole: x2**2/t1, Factor: -t1*t2 + x2**2, Highest Order: 2
Pole: x1**2*x2, Factor: -t2 + x1**2*x2, Highest Order: 2
Pole: x1**2/(t1*x2), Factor: -t1*t2*x2 + x1**2, Highest Order: 2
Pole: x1**2*x2/t1, Factor: -t1*t2 + x1**2*x2, Highest Order: 2
Pole: x1**3, Factor: -t2 + x1**3, Highest Order: 1
Pole: x2**3, Factor: -t2 + x2**3, Highest Order: 1
Pole: x1**3/t1, Factor: -t1*t2 + x1**3, Highest Order: 1
Pole: x2**3/t1, Factor: -t1*t2 + x2**3, Highest Order: 1


Pole x1: Separated 44 first-order terms and 10 higher-order terms in 0.76s
First-order terms progress for pole x1: 2% (1/44) - Elapsed: 0.6s, Est. remaining: 26.4s
First-order terms progress for pole x1: 4% (2/44) - Elapsed: 0.6s, Est. remaining: 13.0s
First-order terms progress for pole x1: 6% (3/44) - Elapsed: 0.6s, Est. remaining: 8.5s
First-order terms progress for pole x1: 9% (4/44) - Elapsed: 0.6s, Est. remaining: 6.3s
First-order terms progress for pole x1: 11% (5/44) - Elapsed: 0.6s, Est. remaining: 4.9s
First-order terms progress for pole x1: 13% (6/44) - Elapsed: 0.6s, Est. remaining: 4.0s
First-order terms progress for pole x1: 15% (7/44) - Elapsed: 0.6s, Est. remaining: 3.4s
First-order terms progress for pole x1: 18% (8/44) - Elapsed: 0.6s, Est. remaining: 2.9s
First-order terms progress for pole x1: 20% (9/44) - Elapsed: 0.6s, Est. remaining: 2.5s
First-order terms progress for pole x1: 22% (10/44) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x1: 25% (11/44) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1: 27% (12/44) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x1: 29% (13/44) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x1: 31% (14/44) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x1: 34% (15/44) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1: 36% (16/44) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1: 38% (17/44) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1: 40% (18/44) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1: 43% (19/44) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1: 45% (20/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1: 47% (21/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1: 50% (22/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1: 52% (23/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1: 54% (24/44) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x1: 56% (25/44) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x1: 59% (26/44) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1: 61% (27/44) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1: 63% (28/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1: 65% (29/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1: 68% (30/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1: 70% (31/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1: 72% (32/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1: 75% (33/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1: 77% (34/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1: 79% (35/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1: 81% (36/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1: 84% (37/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1: 86% (38/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1: 88% (39/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1: 90% (40/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1: 93% (41/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1: 95% (42/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1: 97% (43/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1: 100% (44/44) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 44 first-order terms in 0.90s
Higher-order terms progress for pole x1: 10% (1/10) - Elapsed: 0.4s, Est. remaining: 3.4s
Higher-order terms progress for pole x1: 20% (2/10) - Elapsed: 0.4s, Est. remaining: 1.5s
Higher-order terms progress for pole x1: 30% (3/10) - Elapsed: 0.4s, Est. remaining: 0.9s
Higher-order terms progress for pole x1: 40% (4/10) - Elapsed: 0.4s, Est. remaining: 0.6s
Higher-order terms progress for pole x1: 50% (5/10) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1: 60% (6/10) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1: 70% (7/10) - Elapsed: 0.8s, Est. remaining: 0.3s
Higher-order terms progress for pole x1: 80% (8/10) - Elapsed: 0.8s, Est. remaining: 0.2s
Higher-order terms progress for pole x1: 90% (9/10) - Elapsed: 0.8s, Est. remaining: 0.1s
Higher-order terms progress for pole x1: 100% (10/10) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 10 higher-order terms in 0.87s
sum() takes 0.0s
(completed in 2.5s) Combined residue for candidate pole x1 is: -t1**9*x1**12*x2**3/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**9*x1**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**9*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**9*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**9*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**9*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**8*x1**11/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**10*x2**4/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**7*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) + t1**8*x1**6*x2**8/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) - t1**8*x1**6*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) - t1**8*x1**6*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**6*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**8/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) + t1**8*x1**5*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**5*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**8*x1**4*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) + t1**7*x1**23/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**22/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**16*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**16*x2**3/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**12*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) + t1**7*x1**12*x2**3/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + t1**7*x1**12*x2**3/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**11*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) - t1**7*x1**11*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + t1**7*x1**11/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**10*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**7*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**7*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**13/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**6*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**6*x2**8/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**7*x1**6*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*x1**5*x2**8/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**5*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - 5*t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**5*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**7*x1**5*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**7*x1**4*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + 4*t1**7*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**4*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*x1**4*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**7*x1**2*x2**13/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**2*x2**13/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**2*x2**12/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**2*x2**12/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1))
Pole x2: Separated 44 first-order terms and 10 higher-order terms in 0.80s
First-order terms progress for pole x2: 2% (1/44) - Elapsed: 0.6s, Est. remaining: 26.3s
First-order terms progress for pole x2: 4% (2/44) - Elapsed: 0.6s, Est. remaining: 12.9s
First-order terms progress for pole x2: 6% (3/44) - Elapsed: 0.6s, Est. remaining: 8.4s
First-order terms progress for pole x2: 9% (4/44) - Elapsed: 0.6s, Est. remaining: 6.2s
First-order terms progress for pole x2: 11% (5/44) - Elapsed: 0.6s, Est. remaining: 4.8s
First-order terms progress for pole x2: 13% (6/44) - Elapsed: 0.6s, Est. remaining: 3.9s
First-order terms progress for pole x2: 15% (7/44) - Elapsed: 0.6s, Est. remaining: 3.3s
First-order terms progress for pole x2: 18% (8/44) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x2: 20% (9/44) - Elapsed: 0.6s, Est. remaining: 2.4s
First-order terms progress for pole x2: 22% (10/44) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x2: 25% (11/44) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x2: 27% (12/44) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x2: 29% (13/44) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x2: 31% (14/44) - Elapsed: 0.6s, Est. remaining: 1.4s
First-order terms progress for pole x2: 34% (15/44) - Elapsed: 0.6s, Est. remaining: 1.2s
First-order terms progress for pole x2: 36% (16/44) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x2: 38% (17/44) - Elapsed: 0.6s, Est. remaining: 1.0s
First-order terms progress for pole x2: 40% (18/44) - Elapsed: 0.6s, Est. remaining: 0.9s
First-order terms progress for pole x2: 43% (19/44) - Elapsed: 0.6s, Est. remaining: 0.9s
First-order terms progress for pole x2: 45% (20/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x2: 47% (21/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x2: 50% (22/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x2: 52% (23/44) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x2: 54% (24/44) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x2: 56% (25/44) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x2: 59% (26/44) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x2: 61% (27/44) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x2: 63% (28/44) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x2: 65% (29/44) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x2: 68% (30/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2: 70% (31/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2: 72% (32/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2: 75% (33/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2: 77% (34/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2: 79% (35/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2: 81% (36/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2: 84% (37/44) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x2: 86% (38/44) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x2: 88% (39/44) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x2: 90% (40/44) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x2: 93% (41/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2: 95% (42/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x2: 97% (43/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x2: 100% (44/44) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 44 first-order terms in 0.85s
Higher-order terms progress for pole x2: 10% (1/10) - Elapsed: 0.4s, Est. remaining: 3.4s
Higher-order terms progress for pole x2: 20% (2/10) - Elapsed: 0.4s, Est. remaining: 1.5s
Higher-order terms progress for pole x2: 30% (3/10) - Elapsed: 0.4s, Est. remaining: 0.9s
Higher-order terms progress for pole x2: 40% (4/10) - Elapsed: 0.4s, Est. remaining: 0.6s
Higher-order terms progress for pole x2: 50% (5/10) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x2: 60% (6/10) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x2: 70% (7/10) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x2: 80% (8/10) - Elapsed: 0.8s, Est. remaining: 0.2s
Higher-order terms progress for pole x2: 90% (9/10) - Elapsed: 0.9s, Est. remaining: 0.1s
Higher-order terms progress for pole x2: 100% (10/10) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 10 higher-order terms in 0.89s
sum() takes 0.0s
(completed in 2.5s) Combined residue for candidate pole x2 is: -t1**9*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**9*x1**6*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) + t1**9*x1**4*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**9*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**9*x1**3*x2**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**9*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**8*x1**8*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) + t1**8*x1**8*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) - t1**8*x1**7*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) + t1**8*x1**7*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) + t1**8*x1**7*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**7*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**7*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**7*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) + t1**8*x1**4*x2**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**8*x1**3*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**3*x2**5/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**8*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**13*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**13*x2**2/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**13*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**12*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**12*x2**2/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**12*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**8*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**8*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**7*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**7*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**7*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**7*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) + t1**7*x1**6*x2**11/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) - t1**7*x1**6*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + 5*t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - 4*t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*x1**4*x2**16/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**4*x2**11/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**4*x2**10/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**4*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**7*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) + t1**7*x1**3*x2**16/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**3*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**3*x2**12/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**3*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**7*x1**3*x2**5/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**7*x2**23/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) + t1**7*x2**22/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) - t1**7*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**7*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1))
Progress for pole x1*x2**2: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 30.7s
Progress for pole x1*x2**2: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.1s
Progress for pole x1*x2**2: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.9s
Progress for pole x1*x2**2: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.3s
Progress for pole x1*x2**2: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.7s
Progress for pole x1*x2**2: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.7s
Progress for pole x1*x2**2: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x1*x2**2: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.4s
Progress for pole x1*x2**2: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.0s
Progress for pole x1*x2**2: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.6s
Progress for pole x1*x2**2: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x1*x2**2: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.1s
Progress for pole x1*x2**2: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.9s
Progress for pole x1*x2**2: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x1*x2**2: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1*x2**2: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1*x2**2: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1*x2**2: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1*x2**2: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1*x2**2: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1*x2**2: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1*x2**2: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1*x2**2: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1*x2**2: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1*x2**2: 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1*x2**2: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1*x2**2: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1*x2**2: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1*x2**2: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1*x2**2: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2: 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1*x2**2: 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1*x2**2: 98% (53/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1*x2**2: 100% (54/54) - Elapsed: 0.7s, Est. remaining: 0.0s
(completed in 0.7s) Residue for candidate pole x1*x2**2 is: -t1**7*x1**6*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**6*x2**9/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**5*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) + t1**7*x1**4*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) - t1**7*x1**2*x2**15/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**2*x2**14/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x2**2/x1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 29.2s
Progress for pole x2**2/x1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 14.4s
Progress for pole x2**2/x1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.5s
Progress for pole x2**2/x1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.0s
Progress for pole x2**2/x1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x2**2/x1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x2**2/x1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x2**2/x1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.2s
Progress for pole x2**2/x1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.8s
Progress for pole x2**2/x1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x2**2/x1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x2**2/x1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**2/x1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**2/x1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x2**2/x1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**2/x1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**2/x1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x2**2/x1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x2**2/x1: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x2**2/x1: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x2**2/x1: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**2/x1: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**2/x1: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2/x1: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2/x1: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 53% (29/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**2/x1 is: 0 
Pole x1/t1: Separated 44 first-order terms and 10 higher-order terms in 0.73s
First-order terms progress for pole x1/t1: 2% (1/44) - Elapsed: 0.6s, Est. remaining: 26.8s
First-order terms progress for pole x1/t1: 4% (2/44) - Elapsed: 0.6s, Est. remaining: 13.1s
First-order terms progress for pole x1/t1: 6% (3/44) - Elapsed: 0.6s, Est. remaining: 8.8s
First-order terms progress for pole x1/t1: 9% (4/44) - Elapsed: 0.6s, Est. remaining: 6.4s
First-order terms progress for pole x1/t1: 11% (5/44) - Elapsed: 0.6s, Est. remaining: 5.0s
First-order terms progress for pole x1/t1: 13% (6/44) - Elapsed: 0.6s, Est. remaining: 4.1s
First-order terms progress for pole x1/t1: 15% (7/44) - Elapsed: 0.6s, Est. remaining: 3.4s
First-order terms progress for pole x1/t1: 18% (8/44) - Elapsed: 0.6s, Est. remaining: 2.9s
First-order terms progress for pole x1/t1: 20% (9/44) - Elapsed: 0.7s, Est. remaining: 2.5s
First-order terms progress for pole x1/t1: 22% (10/44) - Elapsed: 0.7s, Est. remaining: 2.2s
First-order terms progress for pole x1/t1: 25% (11/44) - Elapsed: 0.7s, Est. remaining: 2.0s
First-order terms progress for pole x1/t1: 27% (12/44) - Elapsed: 0.7s, Est. remaining: 1.8s
First-order terms progress for pole x1/t1: 29% (13/44) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x1/t1: 31% (14/44) - Elapsed: 0.7s, Est. remaining: 1.5s
First-order terms progress for pole x1/t1: 34% (15/44) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x1/t1: 36% (16/44) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1/t1: 38% (17/44) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1/t1: 40% (18/44) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1/t1: 43% (19/44) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1/t1: 45% (20/44) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1/t1: 47% (21/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1/t1: 50% (22/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1/t1: 52% (23/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1/t1: 54% (24/44) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x1/t1: 56% (25/44) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x1/t1: 59% (26/44) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1/t1: 61% (27/44) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1/t1: 63% (28/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1/t1: 65% (29/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1/t1: 68% (30/44) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1/t1: 70% (31/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1/t1: 72% (32/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1/t1: 75% (33/44) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1/t1: 77% (34/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1/t1: 79% (35/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1/t1: 81% (36/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1/t1: 84% (37/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1/t1: 86% (38/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1/t1: 88% (39/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1/t1: 90% (40/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1/t1: 93% (41/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1/t1: 95% (42/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1/t1: 97% (43/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1/t1: 100% (44/44) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 44 first-order terms in 0.89s
Higher-order terms progress for pole x1/t1: 10% (1/10) - Elapsed: 0.4s, Est. remaining: 3.6s
Higher-order terms progress for pole x1/t1: 20% (2/10) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1/t1: 30% (3/10) - Elapsed: 0.4s, Est. remaining: 1.0s
Higher-order terms progress for pole x1/t1: 40% (4/10) - Elapsed: 0.4s, Est. remaining: 0.6s
Higher-order terms progress for pole x1/t1: 50% (5/10) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1/t1: 60% (6/10) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1/t1: 70% (7/10) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x1/t1: 80% (8/10) - Elapsed: 0.9s, Est. remaining: 0.2s
Higher-order terms progress for pole x1/t1: 90% (9/10) - Elapsed: 0.9s, Est. remaining: 0.1s
Higher-order terms progress for pole x1/t1: 100% (10/10) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 10 higher-order terms in 0.91s
sum() takes 0.0s
(completed in 2.5s) Combined residue for candidate pole x1/t1 is: -t1**10*x1**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**10*x1**11/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**10*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**10*x1**6*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**10*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**10*x1**5*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**10*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**10*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) + t1**10*x1**2*x2**13/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**10*x1**2*x2**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**9*x1**11/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**9*x1**10*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**9*x1**6*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**9*x1**5*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) + t1**9*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**9*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**8*x1**12*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**6*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**8*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**8*x1**4*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**8*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**4*x1**23/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**22/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**16*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**16*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**12*x2**6/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) + t1**4*x1**12*x2**3/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**12*x2**3/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**4*x1**11*x2**6/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) + t1**4*x1**11*x2**4/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**4*x1**10*x2**4/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**7*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) + t1**4*x1**7*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**7*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**13/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**6*x2**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**6*x2**8/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) + t1**4*x1**6*x2**8/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**6*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**8/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) - t1**4*x1**5*x2**8/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 5*t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**4*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**4*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 4*t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**2*x2**13/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**2*x2**12/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1))
Pole x2/t1: Separated 44 first-order terms and 10 higher-order terms in 0.78s
First-order terms progress for pole x2/t1: 2% (1/44) - Elapsed: 0.6s, Est. remaining: 27.8s
First-order terms progress for pole x2/t1: 4% (2/44) - Elapsed: 0.7s, Est. remaining: 13.8s
First-order terms progress for pole x2/t1: 6% (3/44) - Elapsed: 0.7s, Est. remaining: 9.0s
First-order terms progress for pole x2/t1: 9% (4/44) - Elapsed: 0.7s, Est. remaining: 6.6s
First-order terms progress for pole x2/t1: 11% (5/44) - Elapsed: 0.7s, Est. remaining: 5.2s
First-order terms progress for pole x2/t1: 13% (6/44) - Elapsed: 0.7s, Est. remaining: 4.2s
First-order terms progress for pole x2/t1: 15% (7/44) - Elapsed: 0.7s, Est. remaining: 3.5s
First-order terms progress for pole x2/t1: 18% (8/44) - Elapsed: 0.7s, Est. remaining: 3.0s
First-order terms progress for pole x2/t1: 20% (9/44) - Elapsed: 0.7s, Est. remaining: 2.6s
First-order terms progress for pole x2/t1: 22% (10/44) - Elapsed: 0.7s, Est. remaining: 2.3s
First-order terms progress for pole x2/t1: 25% (11/44) - Elapsed: 0.7s, Est. remaining: 2.0s
First-order terms progress for pole x2/t1: 27% (12/44) - Elapsed: 0.7s, Est. remaining: 1.8s
First-order terms progress for pole x2/t1: 29% (13/44) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x2/t1: 31% (14/44) - Elapsed: 0.7s, Est. remaining: 1.5s
First-order terms progress for pole x2/t1: 34% (15/44) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x2/t1: 36% (16/44) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x2/t1: 38% (17/44) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x2/t1: 40% (18/44) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x2/t1: 43% (19/44) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x2/t1: 45% (20/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x2/t1: 47% (21/44) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x2/t1: 50% (22/44) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x2/t1: 52% (23/44) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x2/t1: 54% (24/44) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x2/t1: 56% (25/44) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x2/t1: 59% (26/44) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x2/t1: 61% (27/44) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x2/t1: 63% (28/44) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x2/t1: 65% (29/44) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x2/t1: 68% (30/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2/t1: 70% (31/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2/t1: 72% (32/44) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x2/t1: 75% (33/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2/t1: 77% (34/44) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x2/t1: 79% (35/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x2/t1: 81% (36/44) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x2/t1: 84% (37/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2/t1: 86% (38/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2/t1: 88% (39/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2/t1: 90% (40/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2/t1: 93% (41/44) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x2/t1: 95% (42/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x2/t1: 97% (43/44) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x2/t1: 100% (44/44) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 44 first-order terms in 0.86s
Higher-order terms progress for pole x2/t1: 10% (1/10) - Elapsed: 0.4s, Est. remaining: 3.7s
Higher-order terms progress for pole x2/t1: 20% (2/10) - Elapsed: 0.4s, Est. remaining: 1.7s
Higher-order terms progress for pole x2/t1: 30% (3/10) - Elapsed: 0.4s, Est. remaining: 1.0s
Higher-order terms progress for pole x2/t1: 40% (4/10) - Elapsed: 0.4s, Est. remaining: 0.7s
Higher-order terms progress for pole x2/t1: 50% (5/10) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x2/t1: 60% (6/10) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x2/t1: 70% (7/10) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2/t1: 80% (8/10) - Elapsed: 0.9s, Est. remaining: 0.2s
Higher-order terms progress for pole x2/t1: 90% (9/10) - Elapsed: 0.9s, Est. remaining: 0.1s
Higher-order terms progress for pole x2/t1: 100% (10/10) - Elapsed: 1.0s, Est. remaining: 0.0s
Processed 10 higher-order terms in 1.01s
sum() takes 0.0s
(completed in 2.7s) Combined residue for candidate pole x2/t1 is: t1**10*x1**13*x2**2/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**10*x1**12*x2**2/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**10*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**10*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**10*x1**4*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**10*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) + t1**10*x1**3*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**10*x1**3*x2**5/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)**2) - t1**10*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**10*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**9*x1**6*x2**4/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**9*x1**6*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) + t1**9*x1**4*x2**10/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) - t1**9*x1**3*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**9*x1**3*x2**5/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**9*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**8*x1**6*x2**5/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**8*x1**6*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) + t1**8*x1**4*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**8*x1**4*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(t1*x1*x2 - 1)) - t1**8*x1**3*x2**12/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**8*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**13*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**13*x2**2/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**12*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**12*x2**2/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**8*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**8*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**8*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) + t1**4*x1**8*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**7*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) - t1**4*x1**7*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**7*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) + t1**4*x1**7*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**7*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**7*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**7*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**7*x2**5/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**7*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**7*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**6*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**6*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 5*t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 4*t1**4*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**4*x2**16/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**4*x2**11/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**4*x2**10/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**3*x2**16/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**3*x2**12/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**3*x2**12/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x2**23/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)) - t1**4*x2**22/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1))
Pole x1*x2: Separated 20 first-order terms and 34 higher-order terms in 0.84s
First-order terms progress for pole x1*x2: 5% (1/20) - Elapsed: 0.7s, Est. remaining: 13.4s
First-order terms progress for pole x1*x2: 10% (2/20) - Elapsed: 0.7s, Est. remaining: 6.4s
First-order terms progress for pole x1*x2: 15% (3/20) - Elapsed: 0.7s, Est. remaining: 4.1s
First-order terms progress for pole x1*x2: 20% (4/20) - Elapsed: 0.7s, Est. remaining: 2.9s
First-order terms progress for pole x1*x2: 25% (5/20) - Elapsed: 0.7s, Est. remaining: 2.2s
First-order terms progress for pole x1*x2: 30% (6/20) - Elapsed: 0.7s, Est. remaining: 1.7s
First-order terms progress for pole x1*x2: 35% (7/20) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x1*x2: 40% (8/20) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2: 45% (9/20) - Elapsed: 0.8s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2: 50% (10/20) - Elapsed: 0.8s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2: 55% (11/20) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 60% (12/20) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 65% (13/20) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 70% (14/20) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 75% (15/20) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 80% (16/20) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 85% (17/20) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 90% (18/20) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 95% (19/20) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 100% (20/20) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 20 first-order terms in 0.86s
Higher-order terms progress for pole x1*x2: 2% (1/34) - Elapsed: 0.4s, Est. remaining: 13.7s
Higher-order terms progress for pole x1*x2: 5% (2/34) - Elapsed: 0.4s, Est. remaining: 6.7s
Higher-order terms progress for pole x1*x2: 8% (3/34) - Elapsed: 0.4s, Est. remaining: 4.3s
Higher-order terms progress for pole x1*x2: 11% (4/34) - Elapsed: 0.4s, Est. remaining: 3.1s
Higher-order terms progress for pole x1*x2: 14% (5/34) - Elapsed: 0.4s, Est. remaining: 2.4s
Higher-order terms progress for pole x1*x2: 17% (6/34) - Elapsed: 0.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2: 20% (7/34) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2: 23% (8/34) - Elapsed: 0.4s, Est. remaining: 1.4s
Higher-order terms progress for pole x1*x2: 26% (9/34) - Elapsed: 0.4s, Est. remaining: 1.2s
Higher-order terms progress for pole x1*x2: 29% (10/34) - Elapsed: 0.4s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2: 32% (11/34) - Elapsed: 0.4s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2: 35% (12/34) - Elapsed: 0.4s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2: 38% (13/34) - Elapsed: 0.4s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2: 41% (14/34) - Elapsed: 0.4s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2: 44% (15/34) - Elapsed: 0.4s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2: 47% (16/34) - Elapsed: 0.4s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2: 50% (17/34) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2: 52% (18/34) - Elapsed: 0.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2: 55% (19/34) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 58% (20/34) - Elapsed: 0.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 61% (21/34) - Elapsed: 0.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 64% (22/34) - Elapsed: 0.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 67% (23/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2: 70% (24/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2: 73% (25/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2: 76% (26/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 79% (27/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 82% (28/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 85% (29/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 88% (30/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 91% (31/34) - Elapsed: 0.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 94% (32/34) - Elapsed: 0.5s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2: 97% (33/34) - Elapsed: 0.8s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2: 100% (34/34) - Elapsed: 0.8s, Est. remaining: 0.0s
Processed 34 higher-order terms in 0.87s
sum() takes 0.0s
(completed in 2.6s) Combined residue for candidate pole x1*x2 is: -t1**9*x1**6*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**9*x1**5*x2**4/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**9*x1**4*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**9*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**7*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) + t1**8*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2) - t1**8*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**6*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**5*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**5*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**8*x1**5*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**4*x2**5/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)**2*(t1*x1**2 - x2)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**8*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**12*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**12*x2**5/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) - t1**7*x1**12*x2**2/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**7*x1**11*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) + t1**7*x1**11*x2**2/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + t1**7*x1**10*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**7*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**7*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**6*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x2 - 1)**2*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**6*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**6*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**5*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) + t1**7*x1**5*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**5*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + 2*t1**7*x1**5*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + 5*t1**7*x1**5*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**4*x2**11/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2 - 1)*(t1*x1*x2**3 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**2*x2**2 - 1)) + t1**7*x1**4*x2**7/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - t1**7*x1**4*x2**6/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) - 5*t1**7*x1**4*x2**5/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)) + t1**7*x1**2*x2**12/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**2*x2**11/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1))
Progress for pole x1*x2**2/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 32.2s
Progress for pole x1*x2**2/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.8s
Progress for pole x1*x2**2/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.4s
Progress for pole x1*x2**2/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.7s
Progress for pole x1*x2**2/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 6.0s
Progress for pole x1*x2**2/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.9s
Progress for pole x1*x2**2/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x1*x2**2/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x1*x2**2/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x1*x2**2/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1*x2**2/t1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x1*x2**2/t1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x1*x2**2/t1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1*x2**2/t1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1*x2**2/t1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x1*x2**2/t1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1*x2**2/t1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1*x2**2/t1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1*x2**2/t1: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1*x2**2/t1: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1*x2**2/t1: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1*x2**2/t1: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1*x2**2/t1: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1*x2**2/t1: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1*x2**2/t1: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1*x2**2/t1: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1*x2**2/t1: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1*x2**2/t1: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1*x2**2/t1: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1*x2**2/t1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2/t1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2/t1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1*x2**2/t1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2/t1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2/t1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1*x2**2/t1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2/t1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2/t1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2/t1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1*x2**2/t1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2/t1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2/t1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2/t1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2/t1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1*x2**2/t1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1*x2**2/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1*x2**2/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1*x2**2/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1*x2**2/t1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1*x2**2/t1 is: t1**4*x1**6*x2**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**6*x2**9/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**5*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**4*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) + t1**4*x1**2*x2**15/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**2*x2**14/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x2**2/(t1*x1): 1% (1/54) - Elapsed: 0.6s, Est. remaining: 30.4s
Progress for pole x2**2/(t1*x1): 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.0s
Progress for pole x2**2/(t1*x1): 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.8s
Progress for pole x2**2/(t1*x1): 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.2s
Progress for pole x2**2/(t1*x1): 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.7s
Progress for pole x2**2/(t1*x1): 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.6s
Progress for pole x2**2/(t1*x1): 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x2**2/(t1*x1): 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.4s
Progress for pole x2**2/(t1*x1): 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x2**2/(t1*x1): 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.6s
Progress for pole x2**2/(t1*x1): 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x2**2/(t1*x1): 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**2/(t1*x1): 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**2/(t1*x1): 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x2**2/(t1*x1): 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**2/(t1*x1): 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**2/(t1*x1): 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x2**2/(t1*x1): 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x2**2/(t1*x1): 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x2**2/(t1*x1): 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x2**2/(t1*x1): 38% (21/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**2/(t1*x1): 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**2/(t1*x1): 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2/(t1*x1): 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2/(t1*x1): 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**2/(t1*x1): 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2/(t1*x1): 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2/(t1*x1): 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2/(t1*x1): 53% (29/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**2/(t1*x1): 55% (30/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**2/(t1*x1): 57% (31/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**2/(t1*x1): 59% (32/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**2/(t1*x1): 61% (33/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**2/(t1*x1): 62% (34/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**2/(t1*x1): 64% (35/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x2**2/(t1*x1): 66% (36/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x2**2/(t1*x1): 68% (37/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x2**2/(t1*x1): 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/(t1*x1): 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/(t1*x1): 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/(t1*x1): 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/(t1*x1): 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/(t1*x1): 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/(t1*x1): 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/(t1*x1): 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**2/(t1*x1): 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**2/(t1*x1): 98% (53/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**2/(t1*x1): 100% (54/54) - Elapsed: 0.7s, Est. remaining: 0.0s
(completed in 0.7s) Residue for candidate pole x2**2/(t1*x1) is: 0 
Pole x1*x2/t1: Separated 20 first-order terms and 34 higher-order terms in 0.86s
First-order terms progress for pole x1*x2/t1: 5% (1/20) - Elapsed: 0.7s, Est. remaining: 12.6s
First-order terms progress for pole x1*x2/t1: 10% (2/20) - Elapsed: 0.7s, Est. remaining: 6.0s
First-order terms progress for pole x1*x2/t1: 15% (3/20) - Elapsed: 0.7s, Est. remaining: 3.8s
First-order terms progress for pole x1*x2/t1: 20% (4/20) - Elapsed: 0.7s, Est. remaining: 2.7s
First-order terms progress for pole x1*x2/t1: 25% (5/20) - Elapsed: 0.7s, Est. remaining: 2.1s
First-order terms progress for pole x1*x2/t1: 30% (6/20) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x1*x2/t1: 35% (7/20) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1*x2/t1: 40% (8/20) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1*x2/t1: 45% (9/20) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2/t1: 50% (10/20) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2/t1: 55% (11/20) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2/t1: 60% (12/20) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2/t1: 65% (13/20) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2/t1: 70% (14/20) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2/t1: 75% (15/20) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2/t1: 80% (16/20) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2/t1: 85% (17/20) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2/t1: 90% (18/20) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2/t1: 95% (19/20) - Elapsed: 0.7s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2/t1: 100% (20/20) - Elapsed: 0.7s, Est. remaining: 0.0s
Processed 20 first-order terms in 0.81s
Higher-order terms progress for pole x1*x2/t1: 2% (1/34) - Elapsed: 0.4s, Est. remaining: 14.6s
Higher-order terms progress for pole x1*x2/t1: 5% (2/34) - Elapsed: 0.4s, Est. remaining: 7.1s
Higher-order terms progress for pole x1*x2/t1: 8% (3/34) - Elapsed: 0.4s, Est. remaining: 4.6s
Higher-order terms progress for pole x1*x2/t1: 11% (4/34) - Elapsed: 0.5s, Est. remaining: 3.4s
Higher-order terms progress for pole x1*x2/t1: 14% (5/34) - Elapsed: 0.5s, Est. remaining: 2.6s
Higher-order terms progress for pole x1*x2/t1: 17% (6/34) - Elapsed: 0.5s, Est. remaining: 2.1s
Higher-order terms progress for pole x1*x2/t1: 20% (7/34) - Elapsed: 0.5s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2/t1: 23% (8/34) - Elapsed: 0.5s, Est. remaining: 1.5s
Higher-order terms progress for pole x1*x2/t1: 26% (9/34) - Elapsed: 0.5s, Est. remaining: 1.3s
Higher-order terms progress for pole x1*x2/t1: 29% (10/34) - Elapsed: 0.5s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2/t1: 32% (11/34) - Elapsed: 0.5s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2/t1: 35% (12/34) - Elapsed: 0.5s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2/t1: 38% (13/34) - Elapsed: 0.5s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2/t1: 41% (14/34) - Elapsed: 0.5s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2/t1: 44% (15/34) - Elapsed: 0.5s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2/t1: 47% (16/34) - Elapsed: 0.5s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2/t1: 50% (17/34) - Elapsed: 0.5s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2/t1: 52% (18/34) - Elapsed: 0.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2/t1: 55% (19/34) - Elapsed: 0.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2/t1: 58% (20/34) - Elapsed: 0.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2/t1: 61% (21/34) - Elapsed: 0.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2/t1: 64% (22/34) - Elapsed: 0.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2/t1: 67% (23/34) - Elapsed: 0.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2/t1: 70% (24/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2/t1: 73% (25/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2/t1: 76% (26/34) - Elapsed: 0.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2/t1: 79% (27/34) - Elapsed: 0.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2/t1: 82% (28/34) - Elapsed: 0.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2/t1: 85% (29/34) - Elapsed: 0.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2/t1: 88% (30/34) - Elapsed: 0.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2/t1: 91% (31/34) - Elapsed: 0.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2/t1: 94% (32/34) - Elapsed: 0.6s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2/t1: 97% (33/34) - Elapsed: 0.9s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2/t1: 100% (34/34) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 34 higher-order terms in 0.91s
sum() takes 0.0s
(completed in 2.6s) Combined residue for candidate pole x1*x2/t1 is: t1**9*x1**6*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**9*x1**5*x2**4/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**9*x1**4*x2**5/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**9*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**8*x1**6*x2**2/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**8*x1**5*x2**4/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**8*x1**4*x2**5/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)**2*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) - t1**8*x1**2*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)) + t1**4*x1**12*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**12*x2**5/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) + t1**4*x1**12*x2**2/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + t1**4*x1**11*x2**4/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) - t1**4*x1**11*x2**2/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**4*x1**10*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**7*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**7*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**7*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**12/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**6*x2**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2) - t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) + t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**6*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**6*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**12/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) + t1**4*x1**5*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)) + t1**4*x1**5*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*t1**4*x1**5*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**5*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**5*x2**5/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 5*t1**4*x1**5*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**4*x2**11/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**3)*(-t1 + x1**2*x2)*(-t1 + x1**2*x2**2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2) + t1**4*x1**4*x2**7/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**3*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + t1**4*x1**4*x2**6/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 5*t1**4*x1**4*x2**5/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - t1**4*x1**2*x2**12/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**2*x2**11/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1))
Progress for pole x1**2: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 29.5s
Progress for pole x1**2: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 14.5s
Progress for pole x1**2: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.5s
Progress for pole x1**2: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.0s
Progress for pole x1**2: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x1**2: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x1**2: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x1**2: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x1**2: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.8s
Progress for pole x1**2: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x1**2: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x1**2: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1**2: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1**2: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x1**2: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**2: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1**2: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**2: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**2: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**2: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**2: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**2: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**2: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**2: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**2: 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x1**2: 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x1**2: 53% (29/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x1**2: 55% (30/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x1**2: 57% (31/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x1**2: 59% (32/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x1**2: 61% (33/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x1**2: 62% (34/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x1**2: 64% (35/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x1**2: 66% (36/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x1**2: 68% (37/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x1**2: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2 is: t1**9*x1**10*x2**3/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**9*x1**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)**2*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**8*x1**9*x2**4/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x1**3 - 1)*(t1*x1**3 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**22/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**20/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**15*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**14*x2**3/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**10*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**7*x1**10*x2**3/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)**2*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(t1*x1*x2**2 - 1)*(t1*x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**7*x1**10*x2**3/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**9*x2**4/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(-t1*x2 + x1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**2: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 29.6s
Progress for pole x2**2: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 14.6s
Progress for pole x2**2: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.5s
Progress for pole x2**2: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.0s
Progress for pole x2**2: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x2**2: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x2**2: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x2**2: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x2**2: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.8s
Progress for pole x2**2: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x2**2: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x2**2: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**2: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**2: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x2**2: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**2: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**2: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x2**2: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x2**2: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x2**2: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x2**2: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x2**2: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**2: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**2: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**2: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**2: 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2: 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2: 53% (29/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**2: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2: 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**2: 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**2: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**2 is: t1**9*x1**3*x2**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**9*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**8*x1**4*x2**9/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**8*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)*(-t1*x2 + x1)**2*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**4*x2**15/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**4*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**4*x2**9/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**3*x2**14/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(t1*x2**3 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**3 - 1)*(t1*x1**2*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x1**3*x2**10/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)**2*(-t1*x2 + x1)*(t1*x2 - 1)**2*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(t1*x1*x2**2 - 1)**2*(t1*x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**7*x1**3*x2**10/((-t1 + x1)*(-t1 + x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**3 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**7*x2**22/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) - t1**7*x2**20/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1**2/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 31.2s
Progress for pole x1**2/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.3s
Progress for pole x1**2/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.1s
Progress for pole x1**2/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.4s
Progress for pole x1**2/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.8s
Progress for pole x1**2/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x1**2/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.0s
Progress for pole x1**2/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x1**2/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x1**2/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1**2/t1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x1**2/t1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x1**2/t1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1**2/t1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1**2/t1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x1**2/t1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**2/t1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1**2/t1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**2/t1: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**2/t1: 37% (20/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x1**2/t1: 38% (21/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x1**2/t1: 40% (22/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x1**2/t1: 42% (23/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x1**2/t1: 44% (24/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1**2/t1: 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1**2/t1: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/t1: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/t1: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/t1: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/t1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/t1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/t1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/t1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/t1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/t1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/t1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/t1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/t1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/t1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/t1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/t1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 87% (47/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 88% (48/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/t1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2/t1 is: t1**9*x1**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**9*x1**9*x2**4/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**8*x1**10*x2**3/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(-t1*x2**2 + x1**2)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) - t1**8*x1**10/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(-t1*x2 + x1)**2*(-t1*x2 + x1**2)*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(t1*x1*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**22/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**20/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**15*x2**4/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**14*x2**3/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**10*x2**4/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - t1**4*x1**10*x2**3/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**10*x2**3/((-t1 + x1)**2*(-t1 + x1**3)*(-t1 + x2)**2*(-t1 + x1*x2**2)*(-t1 + x1**2*x2)**2*(x1 - 1)**8*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + t1**4*x1**9*x2**4/((-t1 + x1)*(-t1 + x1**3)*(-t1 + x2**2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2)*(t1 - 1)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x1**2/x2: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 32.3s
Progress for pole x1**2/x2: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.9s
Progress for pole x1**2/x2: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.4s
Progress for pole x1**2/x2: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.7s
Progress for pole x1**2/x2: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 6.1s
Progress for pole x1**2/x2: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 5.0s
Progress for pole x1**2/x2: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.2s
Progress for pole x1**2/x2: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x1**2/x2: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x1**2/x2: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1**2/x2: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x1**2/x2: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x1**2/x2: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1**2/x2: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1**2/x2: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x1**2/x2: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**2/x2: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1**2/x2: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**2/x2: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**2/x2: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**2/x2: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**2/x2: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**2/x2: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**2/x2: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2/x2: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2/x2: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2/x2 is: 0 
Progress for pole x2**2/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 31.6s
Progress for pole x2**2/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.6s
Progress for pole x2**2/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.2s
Progress for pole x2**2/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.5s
Progress for pole x2**2/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 6.0s
Progress for pole x2**2/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.9s
Progress for pole x2**2/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x2**2/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x2**2/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x2**2/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x2**2/t1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x2**2/t1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x2**2/t1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**2/t1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**2/t1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x2**2/t1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**2/t1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**2/t1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x2**2/t1: 35% (19/54) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x2**2/t1: 37% (20/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x2**2/t1: 38% (21/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x2**2/t1: 40% (22/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x2**2/t1: 42% (23/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x2**2/t1: 44% (24/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x2**2/t1: 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x2**2/t1: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**2/t1: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**2/t1: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x2**2/t1: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x2**2/t1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/t1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/t1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**2/t1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/t1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/t1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/t1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**2/t1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/t1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/t1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**2/t1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**2/t1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2**2/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**2/t1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**2/t1 is: -t1**9*x1**4*x2**9/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**9*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) + t1**8*x1**3*x2**10/((-t1 + x1)*(-t1 + x2)**2*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**2 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) - t1**8*x2**10/((-t1 + x1)**2*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**6*(x2 + 1)**2*(t1*x1 - 1)**2*(t1*x1 - x2)**2*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(t1*x1*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**4*x2**15/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**4*x2**10/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**4*x2**9/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1)) + t1**4*x1**3*x2**14/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**3)*(-t1 + x1**2*x2**2)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**3*x2**10/((-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**3)*(-t1 + x1*x2)**2*(-t1 + x1*x2**2)*(t1 - 1)*(x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x2**2 + x2 + 1)) - t1**4*x1**3*x2**10/((-t1 + x1)**2*(-t1 + x2)**2*(-t1 + x2**3)*(-t1 + x1*x2**2)**2*(-t1 + x1**2*x2)*(x1 - 1)**7*(x1 + 1)*(x1 - x2)**2*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x2 - 1)*(x1*x2 - 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - t1**4*x2**22/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)) + t1**4*x2**20/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1**2*x2: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 31.7s
Progress for pole x1**2*x2: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.6s
Progress for pole x1**2*x2: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.2s
Progress for pole x1**2*x2: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.5s
Progress for pole x1**2*x2: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.9s
Progress for pole x1**2*x2: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x1**2*x2: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x1**2*x2: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x1**2*x2: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.0s
Progress for pole x1**2*x2: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1**2*x2: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x1**2*x2: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.1s
Progress for pole x1**2*x2: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.9s
Progress for pole x1**2*x2: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x1**2*x2: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x1**2*x2: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**2*x2: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**2*x2: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**2*x2: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**2*x2: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**2*x2: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**2*x2: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**2*x2: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2*x2: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**2*x2: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**2*x2: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**2*x2: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2*x2: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2*x2: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2*x2: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2*x2: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2*x2: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2*x2: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2*x2: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2*x2: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2*x2: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2*x2: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2*x2: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2*x2: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**2*x2: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2*x2: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2*x2: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2*x2: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2*x2: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**2*x2: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**2*x2: 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1**2*x2: 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1**2*x2: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2*x2: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**2*x2 is: -t1**7*x1**15*x2**2/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**14*x2**2/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)**2*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**7*x1**10*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**10*x2**5/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) + t1**7*x1**10*x2**4/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)**2*(t1*x2 - 1)**2*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)) - t1**7*x1**9*x2**6/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)**2*(t1*x1**2 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(t1*x2**2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1**2*x2**2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x1**2/(t1*x2): 1% (1/54) - Elapsed: 0.6s, Est. remaining: 32.7s
Progress for pole x1**2/(t1*x2): 3% (2/54) - Elapsed: 0.6s, Est. remaining: 16.1s
Progress for pole x1**2/(t1*x2): 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.8s
Progress for pole x1**2/(t1*x2): 7% (4/54) - Elapsed: 0.6s, Est. remaining: 8.0s
Progress for pole x1**2/(t1*x2): 9% (5/54) - Elapsed: 0.6s, Est. remaining: 6.3s
Progress for pole x1**2/(t1*x2): 11% (6/54) - Elapsed: 0.6s, Est. remaining: 5.1s
Progress for pole x1**2/(t1*x2): 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.3s
Progress for pole x1**2/(t1*x2): 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.7s
Progress for pole x1**2/(t1*x2): 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.2s
Progress for pole x1**2/(t1*x2): 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x1**2/(t1*x2): 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x1**2/(t1*x2): 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x1**2/(t1*x2): 24% (13/54) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x1**2/(t1*x2): 25% (14/54) - Elapsed: 0.7s, Est. remaining: 1.9s
Progress for pole x1**2/(t1*x2): 27% (15/54) - Elapsed: 0.7s, Est. remaining: 1.7s
Progress for pole x1**2/(t1*x2): 29% (16/54) - Elapsed: 0.7s, Est. remaining: 1.6s
Progress for pole x1**2/(t1*x2): 31% (17/54) - Elapsed: 0.7s, Est. remaining: 1.5s
Progress for pole x1**2/(t1*x2): 33% (18/54) - Elapsed: 0.7s, Est. remaining: 1.3s
Progress for pole x1**2/(t1*x2): 35% (19/54) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1**2/(t1*x2): 37% (20/54) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1**2/(t1*x2): 38% (21/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x1**2/(t1*x2): 40% (22/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x1**2/(t1*x2): 42% (23/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x1**2/(t1*x2): 44% (24/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x1**2/(t1*x2): 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1**2/(t1*x2): 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1**2/(t1*x2): 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/(t1*x2): 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**2/(t1*x2): 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/(t1*x2): 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**2/(t1*x2): 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/(t1*x2): 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/(t1*x2): 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**2/(t1*x2): 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**2/(t1*x2): 64% (35/54) - Elapsed: 0.8s, Est. remaining: 0.4s
Progress for pole x1**2/(t1*x2): 66% (36/54) - Elapsed: 0.8s, Est. remaining: 0.4s
Progress for pole x1**2/(t1*x2): 68% (37/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2/(t1*x2): 70% (38/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2/(t1*x2): 72% (39/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2/(t1*x2): 74% (40/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2/(t1*x2): 75% (41/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*x2): 77% (42/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*x2): 79% (43/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*x2): 81% (44/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*x2): 83% (45/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2/(t1*x2): 85% (46/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*x2): 87% (47/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*x2): 88% (48/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*x2): 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*x2): 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2/(t1*x2): 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/(t1*x2): 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/(t1*x2): 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2/(t1*x2): 100% (54/54) - Elapsed: 0.9s, Est. remaining: 0.0s
(completed in 0.9s) Residue for candidate pole x1**2/(t1*x2) is: 0 
Progress for pole x1**2*x2/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 33.4s
Progress for pole x1**2*x2/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 16.5s
Progress for pole x1**2*x2/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.8s
Progress for pole x1**2*x2/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 8.0s
Progress for pole x1**2*x2/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 6.3s
Progress for pole x1**2*x2/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 5.1s
Progress for pole x1**2*x2/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.3s
Progress for pole x1**2*x2/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.7s
Progress for pole x1**2*x2/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.2s
Progress for pole x1**2*x2/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.8s
Progress for pole x1**2*x2/t1: 20% (11/54) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x1**2*x2/t1: 22% (12/54) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**2*x2/t1: 24% (13/54) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1**2*x2/t1: 25% (14/54) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x1**2*x2/t1: 27% (15/54) - Elapsed: 0.7s, Est. remaining: 1.8s
Progress for pole x1**2*x2/t1: 29% (16/54) - Elapsed: 0.7s, Est. remaining: 1.7s
Progress for pole x1**2*x2/t1: 31% (17/54) - Elapsed: 0.7s, Est. remaining: 1.5s
Progress for pole x1**2*x2/t1: 33% (18/54) - Elapsed: 0.7s, Est. remaining: 1.4s
Progress for pole x1**2*x2/t1: 35% (19/54) - Elapsed: 0.7s, Est. remaining: 1.3s
Progress for pole x1**2*x2/t1: 37% (20/54) - Elapsed: 0.7s, Est. remaining: 1.3s
Progress for pole x1**2*x2/t1: 38% (21/54) - Elapsed: 0.7s, Est. remaining: 1.2s
Progress for pole x1**2*x2/t1: 40% (22/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x1**2*x2/t1: 42% (23/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x1**2*x2/t1: 44% (24/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x1**2*x2/t1: 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x1**2*x2/t1: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x1**2*x2/t1: 50% (27/54) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1**2*x2/t1: 51% (28/54) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x1**2*x2/t1: 53% (29/54) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x1**2*x2/t1: 55% (30/54) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x1**2*x2/t1: 57% (31/54) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x1**2*x2/t1: 59% (32/54) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1**2*x2/t1: 61% (33/54) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1**2*x2/t1: 62% (34/54) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x1**2*x2/t1: 64% (35/54) - Elapsed: 0.8s, Est. remaining: 0.4s
Progress for pole x1**2*x2/t1: 66% (36/54) - Elapsed: 0.8s, Est. remaining: 0.4s
Progress for pole x1**2*x2/t1: 68% (37/54) - Elapsed: 0.8s, Est. remaining: 0.4s
Progress for pole x1**2*x2/t1: 70% (38/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2*x2/t1: 72% (39/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2*x2/t1: 74% (40/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2*x2/t1: 75% (41/54) - Elapsed: 0.8s, Est. remaining: 0.3s
Progress for pole x1**2*x2/t1: 77% (42/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2*x2/t1: 79% (43/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2*x2/t1: 81% (44/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2*x2/t1: 83% (45/54) - Elapsed: 0.8s, Est. remaining: 0.2s
Progress for pole x1**2*x2/t1: 85% (46/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2*x2/t1: 87% (47/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2*x2/t1: 88% (48/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2*x2/t1: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2*x2/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**2*x2/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2*x2/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2*x2/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**2*x2/t1: 100% (54/54) - Elapsed: 0.9s, Est. remaining: 0.0s
(completed in 0.9s) Residue for candidate pole x1**2*x2/t1 is: t1**4*x1**15*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**14*x2**2/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**3)*(-t1 + x2)*(-t1 + x1*x2)**2*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**4*x1**10*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**10*x2**5/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) - t1**4*x1**10*x2**4/((-t1 + x1)*(-t1 + x1**2)**2*(-t1 + x2)**2*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x2 - 1)**7*(x2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)) + t1**4*x1**9*x2**6/((-t1 + x1)**2*(-t1 + x1**2)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1**2*x2**2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**3*(x1**2 - x2)*(x2 - 1)**6*(x2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x2 - 1)*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x1**3: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 29.7s
Progress for pole x1**3: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 14.6s
Progress for pole x1**3: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.6s
Progress for pole x1**3: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.1s
Progress for pole x1**3: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.6s
Progress for pole x1**3: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.6s
Progress for pole x1**3: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x1**3: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x1**3: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x1**3: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x1**3: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x1**3: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1**3: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1**3: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.7s
Progress for pole x1**3: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**3: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1**3: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**3: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**3: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**3: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**3: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**3: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**3: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**3: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**3: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**3: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**3: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x1**3: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**3: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**3: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3: 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1**3: 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1**3: 98% (53/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x1**3: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**3 is: t1**7*x1**20/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) - t1**7*x1**19/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1**2 - 1)*(t1*x1**2 - x2)*(t1*x1**3 - x2)*(t1*x1**4 - 1)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(t1*x1*x2 - 1)*(t1*x1**2*x2 - 1)*(t1*x1**3*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**3: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 29.6s
Progress for pole x2**3: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 14.5s
Progress for pole x2**3: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 9.6s
Progress for pole x2**3: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.1s
Progress for pole x2**3: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.6s
Progress for pole x2**3: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x2**3: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x2**3: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x2**3: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x2**3: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x2**3: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x2**3: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**3: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**3: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x2**3: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**3: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**3: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x2**3: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x2**3: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x2**3: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x2**3: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x2**3: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**3: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x2**3: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**3: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x2**3: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**3: 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**3: 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x2**3: 53% (29/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**3: 55% (30/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**3: 57% (31/54) - Elapsed: 0.6s, Est. remaining: 0.5s
Progress for pole x2**3: 59% (32/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**3: 61% (33/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**3: 62% (34/54) - Elapsed: 0.6s, Est. remaining: 0.4s
Progress for pole x2**3: 64% (35/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x2**3: 66% (36/54) - Elapsed: 0.6s, Est. remaining: 0.3s
Progress for pole x2**3: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 90% (49/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 92% (50/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3: 94% (51/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**3: 96% (52/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**3: 98% (53/54) - Elapsed: 0.7s, Est. remaining: 0.0s
Progress for pole x2**3: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**3 is: -t1**7*x2**20/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) + t1**7*x2**19/((-t1 + x1)*(-t1 + x2)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(-t1*x2 + x1)*(t1*x2 - 1)*(-t1*x2**2 + x1)*(t1*x2**2 - 1)*(-t1*x2**3 + x1)*(t1*x2**4 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(t1*x1*x2 - 1)*(t1*x1*x2**2 - 1)*(t1*x1*x2**3 - 1)*(x2**2 + x2 + 1)) 
Progress for pole x1**3/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 31.6s
Progress for pole x1**3/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.6s
Progress for pole x1**3/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.2s
Progress for pole x1**3/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.6s
Progress for pole x1**3/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.9s
Progress for pole x1**3/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x1**3/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x1**3/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x1**3/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x1**3/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1**3/t1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x1**3/t1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x1**3/t1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x1**3/t1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x1**3/t1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x1**3/t1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x1**3/t1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x1**3/t1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x1**3/t1: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x1**3/t1: 37% (20/54) - Elapsed: 0.6s, Est. remaining: 1.1s
Progress for pole x1**3/t1: 38% (21/54) - Elapsed: 0.6s, Est. remaining: 1.0s
Progress for pole x1**3/t1: 40% (22/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**3/t1: 42% (23/54) - Elapsed: 0.6s, Est. remaining: 0.9s
Progress for pole x1**3/t1: 44% (24/54) - Elapsed: 0.6s, Est. remaining: 0.8s
Progress for pole x1**3/t1: 46% (25/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**3/t1: 48% (26/54) - Elapsed: 0.6s, Est. remaining: 0.7s
Progress for pole x1**3/t1: 50% (27/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x1**3/t1: 51% (28/54) - Elapsed: 0.6s, Est. remaining: 0.6s
Progress for pole x1**3/t1: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x1**3/t1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3/t1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3/t1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x1**3/t1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3/t1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3/t1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3/t1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x1**3/t1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3/t1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3/t1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3/t1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x1**3/t1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3/t1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3/t1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3/t1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x1**3/t1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 88% (48/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x1**3/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**3/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**3/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x1**3/t1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x1**3/t1 is: -t1**4*x1**20/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + t1**4*x1**19/((-t1 + x1)*(-t1 + x1**2)*(-t1 + x1**4)*(-t1 + x2)*(-t1 + x1*x2)*(-t1 + x1**2*x2)*(-t1 + x1**3*x2)*(x1 - 1)**8*(x1 + 1)**3*(x1 - x2)**3*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**5*(t1*x1 - 1)*(-t1*x2 + x1)*(-t1*x2 + x1**2)*(-t1*x2 + x1**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**3/t1: 1% (1/54) - Elapsed: 0.6s, Est. remaining: 31.6s
Progress for pole x2**3/t1: 3% (2/54) - Elapsed: 0.6s, Est. remaining: 15.6s
Progress for pole x2**3/t1: 5% (3/54) - Elapsed: 0.6s, Est. remaining: 10.2s
Progress for pole x2**3/t1: 7% (4/54) - Elapsed: 0.6s, Est. remaining: 7.6s
Progress for pole x2**3/t1: 9% (5/54) - Elapsed: 0.6s, Est. remaining: 5.9s
Progress for pole x2**3/t1: 11% (6/54) - Elapsed: 0.6s, Est. remaining: 4.9s
Progress for pole x2**3/t1: 12% (7/54) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x2**3/t1: 14% (8/54) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x2**3/t1: 16% (9/54) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x2**3/t1: 18% (10/54) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x2**3/t1: 20% (11/54) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x2**3/t1: 22% (12/54) - Elapsed: 0.6s, Est. remaining: 2.1s
Progress for pole x2**3/t1: 24% (13/54) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**3/t1: 25% (14/54) - Elapsed: 0.6s, Est. remaining: 1.8s
Progress for pole x2**3/t1: 27% (15/54) - Elapsed: 0.6s, Est. remaining: 1.6s
Progress for pole x2**3/t1: 29% (16/54) - Elapsed: 0.6s, Est. remaining: 1.5s
Progress for pole x2**3/t1: 31% (17/54) - Elapsed: 0.6s, Est. remaining: 1.4s
Progress for pole x2**3/t1: 33% (18/54) - Elapsed: 0.6s, Est. remaining: 1.3s
Progress for pole x2**3/t1: 35% (19/54) - Elapsed: 0.6s, Est. remaining: 1.2s
Progress for pole x2**3/t1: 37% (20/54) - Elapsed: 0.7s, Est. remaining: 1.1s
Progress for pole x2**3/t1: 38% (21/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x2**3/t1: 40% (22/54) - Elapsed: 0.7s, Est. remaining: 1.0s
Progress for pole x2**3/t1: 42% (23/54) - Elapsed: 0.7s, Est. remaining: 0.9s
Progress for pole x2**3/t1: 44% (24/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x2**3/t1: 46% (25/54) - Elapsed: 0.7s, Est. remaining: 0.8s
Progress for pole x2**3/t1: 48% (26/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**3/t1: 50% (27/54) - Elapsed: 0.7s, Est. remaining: 0.7s
Progress for pole x2**3/t1: 51% (28/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x2**3/t1: 53% (29/54) - Elapsed: 0.7s, Est. remaining: 0.6s
Progress for pole x2**3/t1: 55% (30/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**3/t1: 57% (31/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**3/t1: 59% (32/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**3/t1: 61% (33/54) - Elapsed: 0.7s, Est. remaining: 0.5s
Progress for pole x2**3/t1: 62% (34/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**3/t1: 64% (35/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**3/t1: 66% (36/54) - Elapsed: 0.7s, Est. remaining: 0.4s
Progress for pole x2**3/t1: 68% (37/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3/t1: 70% (38/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3/t1: 72% (39/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3/t1: 74% (40/54) - Elapsed: 0.7s, Est. remaining: 0.3s
Progress for pole x2**3/t1: 75% (41/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3/t1: 77% (42/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3/t1: 79% (43/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3/t1: 81% (44/54) - Elapsed: 0.7s, Est. remaining: 0.2s
Progress for pole x2**3/t1: 83% (45/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 85% (46/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 87% (47/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 88% (48/54) - Elapsed: 0.7s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 90% (49/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 92% (50/54) - Elapsed: 0.8s, Est. remaining: 0.1s
Progress for pole x2**3/t1: 94% (51/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**3/t1: 96% (52/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**3/t1: 98% (53/54) - Elapsed: 0.8s, Est. remaining: 0.0s
Progress for pole x2**3/t1: 100% (54/54) - Elapsed: 0.8s, Est. remaining: 0.0s
(completed in 0.8s) Residue for candidate pole x2**3/t1 is: t1**4*x2**20/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)) - t1**4*x2**19/((-t1 + x1)*(-t1 + x2)*(-t1 + x2**2)*(-t1 + x2**4)*(-t1 + x1*x2)*(-t1 + x1*x2**2)*(-t1 + x1*x2**3)*(x1 - 1)**5*(x1 - x2)**3*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**8*(x2 + 1)**3*(x2**2 + 1)*(t1*x1 - 1)*(t1*x1 - x2)*(t1*x1 - x2**2)*(t1*x1 - x2**3)*(t1*x2 - 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)) 
Time taken for integration over variable t2: 32.97545385360718 seconds

------------------------------------------------------
Integrating over variable: t1
Number of terms in f_current: 390
Large expression with 390 terms detected for denominator calculation
Using batch processing with batch_size_lcm=2
Denominator iteration 1: Processing 390 terms in 195 batches
Denominator iteration 1 completed in 0.794 seconds
Reduced to 114 terms
Denominator iteration 2: Processing 114 terms in 57 batches
Denominator iteration 2 completed in 0.420 seconds
Reduced to 56 terms
Denominator iteration 3: Processing 56 terms in 28 batches
Denominator iteration 3 completed in 0.389 seconds
Reduced to 28 terms
Denominator iteration 4: Processing 28 terms in 14 batches
Denominator iteration 4 completed in 0.356 seconds
Reduced to 14 terms
Denominator iteration 5: Processing 14 terms in 7 batches
Denominator iteration 5 completed in 0.346 seconds
Reduced to 7 terms
Denominator iteration 6: Processing 7 terms in 4 batches
Denominator iteration 6 completed in 0.341 seconds
Reduced to 4 terms
Denominator iteration 7: Processing 4 terms in 2 batches
Denominator iteration 7 completed in 0.335 seconds
Reduced to 2 terms
Computing final denominator...
Total time for denominator calculation: 3.017 seconds
Time to factor denominator: 0.047 seconds
Factors of the denominator:
t1 - 1, x1 + 1, x2 + 1, x1 - 1, x2 - 1, x1 - x2**3, x1 + x2, x1*x2 + 1, x1*x2**3 - 1, -t1 + x1, -t1 + x2, x1 - x2**2, t1*x1 - 1, t1*x2 - 1, x1*x2**2 - 1, x1 - x2, x1*x2 - 1, -t1*x2**2 + x1, -t1*x2**3 + x1, -t1 + x1*x2**3, t1*x1 - x2**2, t1*x1 - x2**3, t1*x1*x2**3 - 1, -t1*x2 + x1, -t1 + x1*x2, -t1 + x1*x2**2, t1*x1 - x2, t1*x1*x2 - 1, t1*x1*x2**2 - 1, x1**2 + 1, x2**2 + 1, x1**2 + x1 + 1, x2**2 + x2 + 1, -t1 + x1**2, x1**2 - x2, -t1 + x2**2, t1*x1**2 - 1, t1*x2**2 - 1, x1**2*x2 - 1, -t1*x2 + x1**2, -t1*x2**2 + x1**2, -t1 + x1**2*x2**2, t1*x1**2 - x2, t1*x1**2 - x2**2, t1*x1**2*x2**2 - 1, -t1 + x1**2*x2, t1*x1**2*x2 - 1, -t1 + x1**3, x1**3 - x2, -t1 + x2**3, t1*x1**3 - 1, t1*x2**3 - 1, x1**3*x2 - 1, -t1*x2 + x1**3, -t1 + x1**3*x2, t1*x1**3 - x2, t1*x1**3*x2 - 1, -t1 + x1**4, -t1 + x2**4, t1*x1**4 - 1, t1*x2**4 - 1


Candidate poles for t1 with their original factors:
Pole: 1, Factor: t1 - 1, Order: 2
Pole: x1, Factor: -t1 + x1, Order: 2
Pole: x2, Factor: -t1 + x2, Order: 2
Pole: 1/x1, Factor: t1*x1 - 1, Order: 2
Pole: 1/x2, Factor: t1*x2 - 1, Order: 2
Pole: x1/x2**2, Factor: -t1*x2**2 + x1, Order: 1
Pole: x1/x2**3, Factor: -t1*x2**3 + x1, Order: 1
Pole: x1*x2**3, Factor: -t1 + x1*x2**3, Order: 1
Pole: x2**2/x1, Factor: t1*x1 - x2**2, Order: 1
Pole: x2**3/x1, Factor: t1*x1 - x2**3, Order: 1
Pole: 1/(x1*x2**3), Factor: t1*x1*x2**3 - 1, Order: 1
Pole: x1/x2, Factor: -t1*x2 + x1, Order: 2
Pole: x1*x2, Factor: -t1 + x1*x2, Order: 2
Pole: x1*x2**2, Factor: -t1 + x1*x2**2, Order: 2
Pole: x2/x1, Factor: t1*x1 - x2, Order: 2
Pole: 1/(x1*x2), Factor: t1*x1*x2 - 1, Order: 2
Pole: 1/(x1*x2**2), Factor: t1*x1*x2**2 - 1, Order: 2
Pole: x1**2, Factor: -t1 + x1**2, Order: 2
Pole: x2**2, Factor: -t1 + x2**2, Order: 2
Pole: x1**(-2), Factor: t1*x1**2 - 1, Order: 2
Pole: x2**(-2), Factor: t1*x2**2 - 1, Order: 2
Pole: x1**2/x2, Factor: -t1*x2 + x1**2, Order: 1
Pole: x1**2/x2**2, Factor: -t1*x2**2 + x1**2, Order: 1
Pole: x1**2*x2**2, Factor: -t1 + x1**2*x2**2, Order: 1
Pole: x2/x1**2, Factor: t1*x1**2 - x2, Order: 1
Pole: x2**2/x1**2, Factor: t1*x1**2 - x2**2, Order: 1
Pole: 1/(x1**2*x2**2), Factor: t1*x1**2*x2**2 - 1, Order: 1
Pole: x1**2*x2, Factor: -t1 + x1**2*x2, Order: 2
Pole: 1/(x1**2*x2), Factor: t1*x1**2*x2 - 1, Order: 2
Pole: x1**3, Factor: -t1 + x1**3, Order: 1
Pole: x2**3, Factor: -t1 + x2**3, Order: 1
Pole: x1**(-3), Factor: t1*x1**3 - 1, Order: 1
Pole: x2**(-3), Factor: t1*x2**3 - 1, Order: 1
Pole: x1**3/x2, Factor: -t1*x2 + x1**3, Order: 1
Pole: x1**3*x2, Factor: -t1 + x1**3*x2, Order: 1
Pole: x2/x1**3, Factor: t1*x1**3 - x2, Order: 1
Pole: 1/(x1**3*x2), Factor: t1*x1**3*x2 - 1, Order: 1
Pole: x1**4, Factor: -t1 + x1**4, Order: 1
Pole: x2**4, Factor: -t1 + x2**4, Order: 1
Pole: x1**(-4), Factor: t1*x1**4 - 1, Order: 1
Pole: x2**(-4), Factor: t1*x2**4 - 1, Order: 1


Testing whether the poles are inside unit circle
Candidate pole: 1
Original factor: t1 - 1
Remaining vars: []
Testing candidate pole: 1 -> 1.0
Candidate pole: x1
Original factor: -t1 + x1
Remaining vars: []
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2
Original factor: -t1 + x2
Remaining vars: []
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: 1/x1
Original factor: t1*x1 - 1
Remaining vars: []
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: 1/x2
Original factor: t1*x2 - 1
Remaining vars: []
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/x2**2
Original factor: -t1*x2**2 + x1
Remaining vars: []
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x1/x2**3
Original factor: -t1*x2**3 + x1
Remaining vars: []
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1*x2**3
Original factor: -t1 + x1*x2**3
Remaining vars: []
Testing candidate pole: 0.179607287601000 -> 0.17960728760100003
Candidate pole: x2**2/x1
Original factor: t1*x1 - x2**2
Remaining vars: []
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x2**3/x1
Original factor: t1*x1 - x2**3
Remaining vars: []
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: 1/(x1*x2**3)
Original factor: t1*x1*x2**3 - 1
Remaining vars: []
Testing candidate pole: 5.56770281070952 -> 5.567702810709515
Candidate pole: x1/x2
Original factor: -t1*x2 + x1
Remaining vars: []
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x1*x2
Original factor: -t1 + x1*x2
Remaining vars: []
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1*x2**2
Original factor: -t1 + x1*x2**2
Remaining vars: []
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2/x1
Original factor: t1*x1 - x2
Remaining vars: []
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: 1/(x1*x2)
Original factor: t1*x1*x2 - 1
Remaining vars: []
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(x1*x2**2)
Original factor: t1*x1*x2**2 - 1
Remaining vars: []
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1**2
Original factor: -t1 + x1**2
Remaining vars: []
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x2**2
Original factor: -t1 + x2**2
Remaining vars: []
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**(-2)
Original factor: t1*x1**2 - 1
Remaining vars: []
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x2**(-2)
Original factor: t1*x2**2 - 1
Remaining vars: []
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: x1**2/x2
Original factor: -t1*x2 + x1**2
Remaining vars: []
Testing candidate pole: 0.651000000000000 -> 0.651
Candidate pole: x1**2/x2**2
Original factor: -t1*x2**2 + x1**2
Remaining vars: []
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: x1**2*x2**2
Original factor: -t1 + x1**2*x2**2
Remaining vars: []
Testing candidate pole: 0.179607287601000 -> 0.17960728760100003
Candidate pole: x2/x1**2
Original factor: t1*x1**2 - x2
Remaining vars: []
Testing candidate pole: 1.53609831029186 -> 1.5360983102918586
Candidate pole: x2**2/x1**2
Original factor: t1*x1**2 - x2**2
Remaining vars: []
Testing candidate pole: 1.00000000000000 -> 1.0
Candidate pole: 1/(x1**2*x2**2)
Original factor: t1*x1**2*x2**2 - 1
Remaining vars: []
Testing candidate pole: 5.56770281070951 -> 5.567702810709514
Candidate pole: x1**2*x2
Original factor: -t1 + x1**2*x2
Remaining vars: []
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: 1/(x1**2*x2)
Original factor: t1*x1**2*x2 - 1
Remaining vars: []
Testing candidate pole: 3.62457452977189 -> 3.624574529771894
Candidate pole: x1**3
Original factor: -t1 + x1**3
Remaining vars: []
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x2**3
Original factor: -t1 + x2**3
Remaining vars: []
Testing candidate pole: 0.275894451000000 -> 0.27589445100000004
Candidate pole: x1**(-3)
Original factor: t1*x1**3 - 1
Remaining vars: []
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943
Candidate pole: x2**(-3)
Original factor: t1*x2**3 - 1
Remaining vars: []
Testing candidate pole: 3.62457452977189 -> 3.6245745297718943
Candidate pole: x1**3/x2
Original factor: -t1*x2 + x1**3
Remaining vars: []
Testing candidate pole: 0.423801000000000 -> 0.42380100000000004
Candidate pole: x1**3*x2
Original factor: -t1 + x1**3*x2
Remaining vars: []
Testing candidate pole: 0.179607287601000 -> 0.17960728760100003
Candidate pole: x2/x1**3
Original factor: t1*x1**3 - x2
Remaining vars: []
Testing candidate pole: 2.35959801888150 -> 2.359598018881503
Candidate pole: 1/(x1**3*x2)
Original factor: t1*x1**3*x2 - 1
Remaining vars: []
Testing candidate pole: 5.56770281070952 -> 5.567702810709515
Candidate pole: x1**4
Original factor: -t1 + x1**4
Remaining vars: []
Testing candidate pole: 0.179607287601000 -> 0.17960728760100003
Candidate pole: x2**4
Original factor: -t1 + x2**4
Remaining vars: []
Testing candidate pole: 0.179607287601000 -> 0.17960728760100003
Candidate pole: x1**(-4)
Original factor: t1*x1**4 - 1
Remaining vars: []
Testing candidate pole: 5.56770281070951 -> 5.567702810709514
Candidate pole: x2**(-4)
Original factor: t1*x2**4 - 1
Remaining vars: []
Testing candidate pole: 5.56770281070951 -> 5.567702810709514


Poles inside | t1 | = 1 with their factors and highest orders:
Pole: x1, Factor: -t1 + x1, Highest Order: 2
Pole: x2, Factor: -t1 + x2, Highest Order: 2
Pole: x1*x2**3, Factor: -t1 + x1*x2**3, Highest Order: 2
Pole: x2**2/x1, Factor: t1*x1 - x2**2, Highest Order: 2
Pole: x2**3/x1, Factor: t1*x1 - x2**3, Highest Order: 2
Pole: x1*x2, Factor: -t1 + x1*x2, Highest Order: 1
Pole: x1*x2**2, Factor: -t1 + x1*x2**2, Highest Order: 1
Pole: x1**2, Factor: -t1 + x1**2, Highest Order: 1
Pole: x2**2, Factor: -t1 + x2**2, Highest Order: 1
Pole: x1**2/x2, Factor: -t1*x2 + x1**2, Highest Order: 1
Pole: x1**2*x2**2, Factor: -t1 + x1**2*x2**2, Highest Order: 1
Pole: x1**2*x2, Factor: -t1 + x1**2*x2, Highest Order: 2
Pole: x1**3, Factor: -t1 + x1**3, Highest Order: 2
Pole: x2**3, Factor: -t1 + x2**3, Highest Order: 2
Pole: x1**3/x2, Factor: -t1*x2 + x1**3, Highest Order: 2
Pole: x1**3*x2, Factor: -t1 + x1**3*x2, Highest Order: 2
Pole: x1**4, Factor: -t1 + x1**4, Highest Order: 2
Pole: x2**4, Factor: -t1 + x2**4, Highest Order: 2


Pole x1: Separated 296 first-order terms and 94 higher-order terms in 1.20s
First-order terms progress for pole x1: 0% (1/296) - Elapsed: 0.5s, Est. remaining: 149.4s
First-order terms progress for pole x1: 1% (3/296) - Elapsed: 0.5s, Est. remaining: 52.3s
First-order terms progress for pole x1: 2% (6/296) - Elapsed: 0.5s, Est. remaining: 25.9s
First-order terms progress for pole x1: 3% (9/296) - Elapsed: 0.5s, Est. remaining: 17.1s
First-order terms progress for pole x1: 4% (12/296) - Elapsed: 0.5s, Est. remaining: 12.7s
First-order terms progress for pole x1: 5% (15/296) - Elapsed: 0.5s, Est. remaining: 10.0s
First-order terms progress for pole x1: 6% (18/296) - Elapsed: 0.5s, Est. remaining: 8.3s
First-order terms progress for pole x1: 7% (21/296) - Elapsed: 0.5s, Est. remaining: 7.0s
First-order terms progress for pole x1: 8% (24/296) - Elapsed: 0.6s, Est. remaining: 6.3s
First-order terms progress for pole x1: 9% (27/296) - Elapsed: 0.6s, Est. remaining: 6.0s
First-order terms progress for pole x1: 10% (30/296) - Elapsed: 0.6s, Est. remaining: 5.3s
First-order terms progress for pole x1: 11% (33/296) - Elapsed: 0.6s, Est. remaining: 4.8s
First-order terms progress for pole x1: 12% (36/296) - Elapsed: 0.6s, Est. remaining: 4.4s
First-order terms progress for pole x1: 13% (39/296) - Elapsed: 0.6s, Est. remaining: 4.2s
First-order terms progress for pole x1: 14% (42/296) - Elapsed: 0.7s, Est. remaining: 3.9s
First-order terms progress for pole x1: 15% (45/296) - Elapsed: 0.7s, Est. remaining: 3.6s
First-order terms progress for pole x1: 16% (48/296) - Elapsed: 0.7s, Est. remaining: 3.4s
First-order terms progress for pole x1: 17% (51/296) - Elapsed: 0.7s, Est. remaining: 3.1s
First-order terms progress for pole x1: 18% (54/296) - Elapsed: 0.7s, Est. remaining: 3.0s
First-order terms progress for pole x1: 19% (57/296) - Elapsed: 0.7s, Est. remaining: 2.8s
First-order terms progress for pole x1: 20% (60/296) - Elapsed: 0.7s, Est. remaining: 2.6s
First-order terms progress for pole x1: 21% (63/296) - Elapsed: 0.7s, Est. remaining: 2.5s
First-order terms progress for pole x1: 22% (66/296) - Elapsed: 0.7s, Est. remaining: 2.4s
First-order terms progress for pole x1: 23% (69/296) - Elapsed: 0.7s, Est. remaining: 2.3s
First-order terms progress for pole x1: 24% (72/296) - Elapsed: 0.7s, Est. remaining: 2.2s
First-order terms progress for pole x1: 25% (74/296) - Elapsed: 0.7s, Est. remaining: 2.2s
First-order terms progress for pole x1: 26% (77/296) - Elapsed: 0.7s, Est. remaining: 2.1s
First-order terms progress for pole x1: 27% (80/296) - Elapsed: 0.7s, Est. remaining: 2.0s
First-order terms progress for pole x1: 28% (83/296) - Elapsed: 0.7s, Est. remaining: 1.9s
First-order terms progress for pole x1: 29% (86/296) - Elapsed: 0.7s, Est. remaining: 1.8s
First-order terms progress for pole x1: 30% (89/296) - Elapsed: 0.8s, Est. remaining: 1.8s
First-order terms progress for pole x1: 31% (92/296) - Elapsed: 0.8s, Est. remaining: 1.7s
First-order terms progress for pole x1: 32% (95/296) - Elapsed: 0.8s, Est. remaining: 1.7s
First-order terms progress for pole x1: 33% (98/296) - Elapsed: 0.8s, Est. remaining: 1.6s
First-order terms progress for pole x1: 34% (101/296) - Elapsed: 0.8s, Est. remaining: 1.5s
First-order terms progress for pole x1: 35% (104/296) - Elapsed: 0.8s, Est. remaining: 1.5s
First-order terms progress for pole x1: 36% (107/296) - Elapsed: 0.8s, Est. remaining: 1.4s
First-order terms progress for pole x1: 37% (110/296) - Elapsed: 0.8s, Est. remaining: 1.4s
First-order terms progress for pole x1: 38% (113/296) - Elapsed: 0.8s, Est. remaining: 1.3s
First-order terms progress for pole x1: 39% (116/296) - Elapsed: 0.8s, Est. remaining: 1.3s
First-order terms progress for pole x1: 40% (119/296) - Elapsed: 0.8s, Est. remaining: 1.2s
First-order terms progress for pole x1: 41% (122/296) - Elapsed: 0.8s, Est. remaining: 1.2s
First-order terms progress for pole x1: 42% (125/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x1: 43% (128/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x1: 44% (131/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x1: 45% (134/296) - Elapsed: 0.9s, Est. remaining: 1.0s
First-order terms progress for pole x1: 46% (137/296) - Elapsed: 0.9s, Est. remaining: 1.0s
First-order terms progress for pole x1: 47% (140/296) - Elapsed: 0.9s, Est. remaining: 1.0s
First-order terms progress for pole x1: 48% (143/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x1: 49% (146/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x1: 50% (148/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x1: 51% (151/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x1: 52% (154/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x1: 53% (157/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x1: 54% (160/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x1: 55% (163/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x1: 56% (166/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x1: 57% (169/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x1: 58% (172/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x1: 59% (175/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x1: 60% (178/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x1: 61% (181/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x1: 62% (184/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x1: 63% (187/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x1: 64% (190/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x1: 65% (193/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x1: 66% (196/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x1: 67% (199/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 68% (202/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 69% (205/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 70% (208/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 71% (211/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 72% (214/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x1: 73% (217/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 74% (220/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 75% (222/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 76% (225/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 77% (228/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 78% (231/296) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1: 79% (234/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x1: 80% (237/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 81% (240/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 82% (243/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 83% (246/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 84% (249/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 85% (252/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 86% (255/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x1: 87% (258/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 88% (261/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 89% (264/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 90% (267/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 91% (270/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 92% (273/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 93% (276/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 94% (279/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1: 95% (282/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1: 96% (285/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1: 97% (288/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1: 98% (291/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1: 99% (294/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1: 100% (296/296) - Elapsed: 1.0s, Est. remaining: 0.0s
Processed 296 first-order terms in 1.20s
Higher-order terms progress for pole x1: 1% (1/94) - Elapsed: 0.3s, Est. remaining: 32.2s
Higher-order terms progress for pole x1: 2% (2/94) - Elapsed: 0.3s, Est. remaining: 16.0s
Higher-order terms progress for pole x1: 3% (3/94) - Elapsed: 0.3s, Est. remaining: 10.6s
Higher-order terms progress for pole x1: 4% (4/94) - Elapsed: 3.0s, Est. remaining: 68.1s
Higher-order terms progress for pole x1: 5% (5/94) - Elapsed: 3.1s, Est. remaining: 54.6s
Higher-order terms progress for pole x1: 6% (6/94) - Elapsed: 3.1s, Est. remaining: 45.3s
Higher-order terms progress for pole x1: 7% (7/94) - Elapsed: 3.1s, Est. remaining: 38.5s
Higher-order terms progress for pole x1: 8% (8/94) - Elapsed: 3.2s, Est. remaining: 34.0s
Higher-order terms progress for pole x1: 9% (9/94) - Elapsed: 3.2s, Est. remaining: 30.6s
Higher-order terms progress for pole x1: 10% (10/94) - Elapsed: 3.2s, Est. remaining: 27.2s
Higher-order terms progress for pole x1: 11% (11/94) - Elapsed: 3.3s, Est. remaining: 24.6s
Higher-order terms progress for pole x1: 12% (12/94) - Elapsed: 3.4s, Est. remaining: 23.2s
Higher-order terms progress for pole x1: 13% (13/94) - Elapsed: 3.4s, Est. remaining: 21.2s
Higher-order terms progress for pole x1: 14% (14/94) - Elapsed: 3.4s, Est. remaining: 19.5s
Higher-order terms progress for pole x1: 15% (15/94) - Elapsed: 3.4s, Est. remaining: 18.1s
Higher-order terms progress for pole x1: 17% (16/94) - Elapsed: 3.7s, Est. remaining: 18.0s
Higher-order terms progress for pole x1: 18% (17/94) - Elapsed: 4.2s, Est. remaining: 18.9s
Higher-order terms progress for pole x1: 19% (18/94) - Elapsed: 4.2s, Est. remaining: 17.6s
Higher-order terms progress for pole x1: 20% (19/94) - Elapsed: 4.2s, Est. remaining: 16.5s
Higher-order terms progress for pole x1: 21% (20/94) - Elapsed: 4.2s, Est. remaining: 15.5s
Higher-order terms progress for pole x1: 22% (21/94) - Elapsed: 4.2s, Est. remaining: 14.6s
Higher-order terms progress for pole x1: 23% (22/94) - Elapsed: 4.2s, Est. remaining: 13.8s
Higher-order terms progress for pole x1: 24% (23/94) - Elapsed: 4.2s, Est. remaining: 13.0s
Higher-order terms progress for pole x1: 25% (24/94) - Elapsed: 4.2s, Est. remaining: 12.3s
Higher-order terms progress for pole x1: 26% (25/94) - Elapsed: 4.2s, Est. remaining: 11.7s
Higher-order terms progress for pole x1: 27% (26/94) - Elapsed: 4.2s, Est. remaining: 11.1s
Higher-order terms progress for pole x1: 28% (27/94) - Elapsed: 4.2s, Est. remaining: 10.5s
Higher-order terms progress for pole x1: 29% (28/94) - Elapsed: 4.2s, Est. remaining: 10.0s
Higher-order terms progress for pole x1: 30% (29/94) - Elapsed: 4.2s, Est. remaining: 9.5s
Higher-order terms progress for pole x1: 31% (30/94) - Elapsed: 4.2s, Est. remaining: 9.1s
Higher-order terms progress for pole x1: 32% (31/94) - Elapsed: 4.2s, Est. remaining: 8.6s
Higher-order terms progress for pole x1: 34% (32/94) - Elapsed: 4.2s, Est. remaining: 8.2s
Higher-order terms progress for pole x1: 35% (33/94) - Elapsed: 4.3s, Est. remaining: 7.9s
Higher-order terms progress for pole x1: 36% (34/94) - Elapsed: 4.3s, Est. remaining: 7.5s
Higher-order terms progress for pole x1: 37% (35/94) - Elapsed: 4.3s, Est. remaining: 7.2s
Higher-order terms progress for pole x1: 38% (36/94) - Elapsed: 4.3s, Est. remaining: 6.9s
Higher-order terms progress for pole x1: 39% (37/94) - Elapsed: 4.3s, Est. remaining: 6.6s
Higher-order terms progress for pole x1: 40% (38/94) - Elapsed: 4.3s, Est. remaining: 6.3s
Higher-order terms progress for pole x1: 41% (39/94) - Elapsed: 4.3s, Est. remaining: 6.0s
Higher-order terms progress for pole x1: 42% (40/94) - Elapsed: 4.3s, Est. remaining: 5.8s
Higher-order terms progress for pole x1: 43% (41/94) - Elapsed: 4.3s, Est. remaining: 5.5s
Higher-order terms progress for pole x1: 44% (42/94) - Elapsed: 4.3s, Est. remaining: 5.3s
Higher-order terms progress for pole x1: 45% (43/94) - Elapsed: 4.3s, Est. remaining: 5.1s
Higher-order terms progress for pole x1: 46% (44/94) - Elapsed: 4.3s, Est. remaining: 4.9s
Higher-order terms progress for pole x1: 47% (45/94) - Elapsed: 4.3s, Est. remaining: 4.7s
Higher-order terms progress for pole x1: 48% (46/94) - Elapsed: 4.3s, Est. remaining: 4.5s
Higher-order terms progress for pole x1: 50% (47/94) - Elapsed: 4.3s, Est. remaining: 4.3s
Higher-order terms progress for pole x1: 51% (48/94) - Elapsed: 4.3s, Est. remaining: 4.1s
Higher-order terms progress for pole x1: 52% (49/94) - Elapsed: 4.3s, Est. remaining: 3.9s
Higher-order terms progress for pole x1: 53% (50/94) - Elapsed: 4.3s, Est. remaining: 3.8s
Higher-order terms progress for pole x1: 54% (51/94) - Elapsed: 4.3s, Est. remaining: 3.6s
Higher-order terms progress for pole x1: 55% (52/94) - Elapsed: 4.3s, Est. remaining: 3.5s
Higher-order terms progress for pole x1: 56% (53/94) - Elapsed: 4.3s, Est. remaining: 3.3s
Higher-order terms progress for pole x1: 57% (54/94) - Elapsed: 4.3s, Est. remaining: 3.2s
Higher-order terms progress for pole x1: 58% (55/94) - Elapsed: 4.3s, Est. remaining: 3.1s
Higher-order terms progress for pole x1: 59% (56/94) - Elapsed: 4.3s, Est. remaining: 2.9s
Higher-order terms progress for pole x1: 60% (57/94) - Elapsed: 4.4s, Est. remaining: 2.8s
Higher-order terms progress for pole x1: 61% (58/94) - Elapsed: 4.4s, Est. remaining: 2.7s
Higher-order terms progress for pole x1: 62% (59/94) - Elapsed: 4.4s, Est. remaining: 2.6s
Higher-order terms progress for pole x1: 63% (60/94) - Elapsed: 4.4s, Est. remaining: 2.5s
Higher-order terms progress for pole x1: 64% (61/94) - Elapsed: 4.4s, Est. remaining: 2.4s
Higher-order terms progress for pole x1: 65% (62/94) - Elapsed: 4.4s, Est. remaining: 2.3s
Higher-order terms progress for pole x1: 67% (63/94) - Elapsed: 4.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x1: 68% (64/94) - Elapsed: 4.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x1: 69% (65/94) - Elapsed: 4.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1: 70% (66/94) - Elapsed: 4.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x1: 71% (67/94) - Elapsed: 4.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x1: 72% (68/94) - Elapsed: 4.4s, Est. remaining: 1.7s
Higher-order terms progress for pole x1: 73% (69/94) - Elapsed: 4.7s, Est. remaining: 1.7s
Higher-order terms progress for pole x1: 74% (70/94) - Elapsed: 4.7s, Est. remaining: 1.6s
Higher-order terms progress for pole x1: 75% (71/94) - Elapsed: 4.7s, Est. remaining: 1.5s
Higher-order terms progress for pole x1: 76% (72/94) - Elapsed: 4.7s, Est. remaining: 1.4s
Higher-order terms progress for pole x1: 77% (73/94) - Elapsed: 4.7s, Est. remaining: 1.4s
Higher-order terms progress for pole x1: 78% (74/94) - Elapsed: 4.7s, Est. remaining: 1.3s
Higher-order terms progress for pole x1: 79% (75/94) - Elapsed: 4.7s, Est. remaining: 1.2s
Higher-order terms progress for pole x1: 80% (76/94) - Elapsed: 4.7s, Est. remaining: 1.1s
Higher-order terms progress for pole x1: 81% (77/94) - Elapsed: 4.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1: 82% (78/94) - Elapsed: 4.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1: 84% (79/94) - Elapsed: 5.0s, Est. remaining: 1.0s
Higher-order terms progress for pole x1: 85% (80/94) - Elapsed: 5.1s, Est. remaining: 0.9s
Higher-order terms progress for pole x1: 86% (81/94) - Elapsed: 5.1s, Est. remaining: 0.8s
Higher-order terms progress for pole x1: 87% (82/94) - Elapsed: 5.1s, Est. remaining: 0.8s
Higher-order terms progress for pole x1: 88% (83/94) - Elapsed: 5.1s, Est. remaining: 0.7s
Higher-order terms progress for pole x1: 89% (84/94) - Elapsed: 5.1s, Est. remaining: 0.6s
Higher-order terms progress for pole x1: 90% (85/94) - Elapsed: 5.2s, Est. remaining: 0.6s
Higher-order terms progress for pole x1: 91% (86/94) - Elapsed: 5.2s, Est. remaining: 0.5s
Higher-order terms progress for pole x1: 92% (87/94) - Elapsed: 5.3s, Est. remaining: 0.4s
Higher-order terms progress for pole x1: 93% (88/94) - Elapsed: 5.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x1: 94% (89/94) - Elapsed: 5.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1: 95% (90/94) - Elapsed: 5.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1: 96% (91/94) - Elapsed: 5.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1: 97% (92/94) - Elapsed: 5.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1: 98% (93/94) - Elapsed: 5.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1: 100% (94/94) - Elapsed: 5.6s, Est. remaining: 0.0s
Processed 94 higher-order terms in 5.69s
sum() takes 0.6s
(completed in 8.7s) Combined residue for candidate pole x1 is: x1**30/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - 2*x1**29/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + 2*x1**27/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**26/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**23*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**23*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**22*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**22*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**22*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**21*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**21*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**21*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**20*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**19*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**19*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**19*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**18*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**18*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**18*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**18*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**17*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**16*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**15*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**5/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**14*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**13*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**13*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**13*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**13*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**13*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 3*x1**13*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**12*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - 2*x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**12*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 5*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 4*x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**11*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**11*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 3*x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 11*x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 3*x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**6/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**11*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**11*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 5*x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - 2*x1**10*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - 15*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**10*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**10*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 5*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**16/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**9/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**9*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**9*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 3*x1**9*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**9*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**16/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**8*x2**14/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**12/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**8*x2**10/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**8*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 9*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 3*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**8*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**14/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**13/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 4*x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 3*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 3*x1**7*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**6*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**6*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 6*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 6*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**23/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**4*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**16/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 5*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 5*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**3*x2**16/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**14/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 4*x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 4*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 4*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**3*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**3*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**3*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**2*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**14/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 3*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1*x2**23/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2)
Pole x2: Separated 296 first-order terms and 94 higher-order terms in 2.08s
First-order terms progress for pole x2: 0% (1/296) - Elapsed: 0.5s, Est. remaining: 158.4s
First-order terms progress for pole x2: 1% (3/296) - Elapsed: 0.6s, Est. remaining: 59.9s
First-order terms progress for pole x2: 2% (6/296) - Elapsed: 0.6s, Est. remaining: 29.7s
First-order terms progress for pole x2: 3% (9/296) - Elapsed: 0.6s, Est. remaining: 19.6s
First-order terms progress for pole x2: 4% (12/296) - Elapsed: 0.6s, Est. remaining: 14.5s
First-order terms progress for pole x2: 5% (15/296) - Elapsed: 0.6s, Est. remaining: 11.5s
First-order terms progress for pole x2: 6% (18/296) - Elapsed: 0.6s, Est. remaining: 9.5s
First-order terms progress for pole x2: 7% (21/296) - Elapsed: 0.6s, Est. remaining: 8.0s
First-order terms progress for pole x2: 8% (24/296) - Elapsed: 0.6s, Est. remaining: 7.0s
First-order terms progress for pole x2: 9% (27/296) - Elapsed: 0.6s, Est. remaining: 6.1s
First-order terms progress for pole x2: 10% (30/296) - Elapsed: 0.6s, Est. remaining: 5.4s
First-order terms progress for pole x2: 11% (33/296) - Elapsed: 0.6s, Est. remaining: 4.9s
First-order terms progress for pole x2: 12% (36/296) - Elapsed: 0.6s, Est. remaining: 4.4s
First-order terms progress for pole x2: 13% (39/296) - Elapsed: 0.6s, Est. remaining: 4.0s
First-order terms progress for pole x2: 14% (42/296) - Elapsed: 0.6s, Est. remaining: 3.7s
First-order terms progress for pole x2: 15% (45/296) - Elapsed: 0.6s, Est. remaining: 3.5s
First-order terms progress for pole x2: 16% (48/296) - Elapsed: 0.6s, Est. remaining: 3.3s
First-order terms progress for pole x2: 17% (51/296) - Elapsed: 0.6s, Est. remaining: 3.1s
First-order terms progress for pole x2: 18% (54/296) - Elapsed: 0.6s, Est. remaining: 2.9s
First-order terms progress for pole x2: 19% (57/296) - Elapsed: 0.6s, Est. remaining: 2.7s
First-order terms progress for pole x2: 20% (60/296) - Elapsed: 0.7s, Est. remaining: 2.6s
First-order terms progress for pole x2: 21% (63/296) - Elapsed: 0.7s, Est. remaining: 2.4s
First-order terms progress for pole x2: 22% (66/296) - Elapsed: 0.7s, Est. remaining: 2.3s
First-order terms progress for pole x2: 23% (69/296) - Elapsed: 0.7s, Est. remaining: 2.2s
First-order terms progress for pole x2: 24% (72/296) - Elapsed: 0.7s, Est. remaining: 2.1s
First-order terms progress for pole x2: 25% (74/296) - Elapsed: 0.7s, Est. remaining: 2.1s
First-order terms progress for pole x2: 26% (77/296) - Elapsed: 0.7s, Est. remaining: 2.0s
First-order terms progress for pole x2: 27% (80/296) - Elapsed: 0.7s, Est. remaining: 1.9s
First-order terms progress for pole x2: 28% (83/296) - Elapsed: 0.7s, Est. remaining: 1.8s
First-order terms progress for pole x2: 29% (86/296) - Elapsed: 0.7s, Est. remaining: 1.7s
First-order terms progress for pole x2: 30% (89/296) - Elapsed: 0.7s, Est. remaining: 1.7s
First-order terms progress for pole x2: 31% (92/296) - Elapsed: 0.7s, Est. remaining: 1.7s
First-order terms progress for pole x2: 32% (95/296) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x2: 33% (98/296) - Elapsed: 0.8s, Est. remaining: 1.6s
First-order terms progress for pole x2: 34% (101/296) - Elapsed: 0.8s, Est. remaining: 1.5s
First-order terms progress for pole x2: 35% (104/296) - Elapsed: 0.8s, Est. remaining: 1.5s
First-order terms progress for pole x2: 36% (107/296) - Elapsed: 0.8s, Est. remaining: 1.4s
First-order terms progress for pole x2: 37% (110/296) - Elapsed: 0.8s, Est. remaining: 1.4s
First-order terms progress for pole x2: 38% (113/296) - Elapsed: 0.8s, Est. remaining: 1.3s
First-order terms progress for pole x2: 39% (116/296) - Elapsed: 0.8s, Est. remaining: 1.3s
First-order terms progress for pole x2: 40% (119/296) - Elapsed: 0.8s, Est. remaining: 1.2s
First-order terms progress for pole x2: 41% (122/296) - Elapsed: 0.8s, Est. remaining: 1.2s
First-order terms progress for pole x2: 42% (125/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x2: 43% (128/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x2: 44% (131/296) - Elapsed: 0.8s, Est. remaining: 1.1s
First-order terms progress for pole x2: 45% (134/296) - Elapsed: 0.8s, Est. remaining: 1.0s
First-order terms progress for pole x2: 46% (137/296) - Elapsed: 0.9s, Est. remaining: 1.0s
First-order terms progress for pole x2: 47% (140/296) - Elapsed: 0.9s, Est. remaining: 1.0s
First-order terms progress for pole x2: 48% (143/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x2: 49% (146/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x2: 50% (148/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x2: 51% (151/296) - Elapsed: 0.9s, Est. remaining: 0.9s
First-order terms progress for pole x2: 52% (154/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x2: 53% (157/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x2: 54% (160/296) - Elapsed: 0.9s, Est. remaining: 0.8s
First-order terms progress for pole x2: 55% (163/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x2: 56% (166/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x2: 57% (169/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x2: 58% (172/296) - Elapsed: 0.9s, Est. remaining: 0.7s
First-order terms progress for pole x2: 59% (175/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x2: 60% (178/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x2: 61% (181/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x2: 62% (184/296) - Elapsed: 0.9s, Est. remaining: 0.6s
First-order terms progress for pole x2: 63% (187/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x2: 64% (190/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x2: 65% (193/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x2: 66% (196/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x2: 67% (199/296) - Elapsed: 0.9s, Est. remaining: 0.5s
First-order terms progress for pole x2: 68% (202/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x2: 69% (205/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x2: 70% (208/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x2: 71% (211/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x2: 72% (214/296) - Elapsed: 0.9s, Est. remaining: 0.4s
First-order terms progress for pole x2: 73% (217/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 74% (220/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 75% (222/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 76% (225/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 77% (228/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 78% (231/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 79% (234/296) - Elapsed: 1.0s, Est. remaining: 0.3s
First-order terms progress for pole x2: 80% (237/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 81% (240/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 82% (243/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 83% (246/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 84% (249/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 85% (252/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 86% (255/296) - Elapsed: 1.0s, Est. remaining: 0.2s
First-order terms progress for pole x2: 87% (258/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 88% (261/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 89% (264/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 90% (267/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 91% (270/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 92% (273/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 93% (276/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 94% (279/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 95% (282/296) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x2: 96% (285/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x2: 97% (288/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x2: 98% (291/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x2: 99% (294/296) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x2: 100% (296/296) - Elapsed: 1.1s, Est. remaining: 0.0s
Processed 296 first-order terms in 1.24s
Higher-order terms progress for pole x2: 1% (1/94) - Elapsed: 2.8s, Est. remaining: 258.8s
Higher-order terms progress for pole x2: 2% (2/94) - Elapsed: 2.9s, Est. remaining: 134.9s
Higher-order terms progress for pole x2: 3% (3/94) - Elapsed: 2.9s, Est. remaining: 89.3s
Higher-order terms progress for pole x2: 4% (4/94) - Elapsed: 2.9s, Est. remaining: 66.3s
Higher-order terms progress for pole x2: 5% (5/94) - Elapsed: 3.0s, Est. remaining: 52.8s
Higher-order terms progress for pole x2: 6% (6/94) - Elapsed: 3.0s, Est. remaining: 43.8s
Higher-order terms progress for pole x2: 7% (7/94) - Elapsed: 3.0s, Est. remaining: 37.2s
Higher-order terms progress for pole x2: 8% (8/94) - Elapsed: 3.0s, Est. remaining: 32.2s
Higher-order terms progress for pole x2: 9% (9/94) - Elapsed: 3.0s, Est. remaining: 28.4s
Higher-order terms progress for pole x2: 10% (10/94) - Elapsed: 3.0s, Est. remaining: 25.3s
Higher-order terms progress for pole x2: 11% (11/94) - Elapsed: 3.0s, Est. remaining: 22.8s
Higher-order terms progress for pole x2: 12% (12/94) - Elapsed: 3.0s, Est. remaining: 20.8s
Higher-order terms progress for pole x2: 13% (13/94) - Elapsed: 3.0s, Est. remaining: 19.0s
Higher-order terms progress for pole x2: 14% (14/94) - Elapsed: 3.2s, Est. remaining: 18.0s
Higher-order terms progress for pole x2: 15% (15/94) - Elapsed: 3.2s, Est. remaining: 16.6s
Higher-order terms progress for pole x2: 17% (16/94) - Elapsed: 3.4s, Est. remaining: 16.4s
Higher-order terms progress for pole x2: 18% (17/94) - Elapsed: 3.6s, Est. remaining: 16.1s
Higher-order terms progress for pole x2: 19% (18/94) - Elapsed: 3.6s, Est. remaining: 15.1s
Higher-order terms progress for pole x2: 20% (19/94) - Elapsed: 3.7s, Est. remaining: 14.7s
Higher-order terms progress for pole x2: 21% (20/94) - Elapsed: 3.7s, Est. remaining: 13.8s
Higher-order terms progress for pole x2: 22% (21/94) - Elapsed: 3.7s, Est. remaining: 13.0s
Higher-order terms progress for pole x2: 23% (22/94) - Elapsed: 3.8s, Est. remaining: 12.4s
Higher-order terms progress for pole x2: 24% (23/94) - Elapsed: 3.8s, Est. remaining: 11.7s
Higher-order terms progress for pole x2: 25% (24/94) - Elapsed: 3.8s, Est. remaining: 11.0s
Higher-order terms progress for pole x2: 26% (25/94) - Elapsed: 3.8s, Est. remaining: 10.5s
Higher-order terms progress for pole x2: 27% (26/94) - Elapsed: 3.8s, Est. remaining: 10.0s
Higher-order terms progress for pole x2: 28% (27/94) - Elapsed: 3.9s, Est. remaining: 9.6s
Higher-order terms progress for pole x2: 29% (28/94) - Elapsed: 4.0s, Est. remaining: 9.4s
Higher-order terms progress for pole x2: 30% (29/94) - Elapsed: 4.0s, Est. remaining: 9.0s
Higher-order terms progress for pole x2: 31% (30/94) - Elapsed: 4.0s, Est. remaining: 8.6s
Higher-order terms progress for pole x2: 32% (31/94) - Elapsed: 4.0s, Est. remaining: 8.2s
Higher-order terms progress for pole x2: 34% (32/94) - Elapsed: 4.0s, Est. remaining: 7.8s
Higher-order terms progress for pole x2: 35% (33/94) - Elapsed: 4.0s, Est. remaining: 7.5s
Higher-order terms progress for pole x2: 36% (34/94) - Elapsed: 4.0s, Est. remaining: 7.1s
Higher-order terms progress for pole x2: 37% (35/94) - Elapsed: 4.1s, Est. remaining: 6.8s
Higher-order terms progress for pole x2: 38% (36/94) - Elapsed: 4.1s, Est. remaining: 6.6s
Higher-order terms progress for pole x2: 39% (37/94) - Elapsed: 4.1s, Est. remaining: 6.3s
Higher-order terms progress for pole x2: 40% (38/94) - Elapsed: 4.1s, Est. remaining: 6.1s
Higher-order terms progress for pole x2: 41% (39/94) - Elapsed: 4.1s, Est. remaining: 5.8s
Higher-order terms progress for pole x2: 42% (40/94) - Elapsed: 4.1s, Est. remaining: 5.6s
Higher-order terms progress for pole x2: 43% (41/94) - Elapsed: 4.1s, Est. remaining: 5.4s
Higher-order terms progress for pole x2: 44% (42/94) - Elapsed: 4.2s, Est. remaining: 5.2s
Higher-order terms progress for pole x2: 45% (43/94) - Elapsed: 4.2s, Est. remaining: 4.9s
Higher-order terms progress for pole x2: 46% (44/94) - Elapsed: 4.2s, Est. remaining: 4.8s
Higher-order terms progress for pole x2: 47% (45/94) - Elapsed: 4.2s, Est. remaining: 4.6s
Higher-order terms progress for pole x2: 48% (46/94) - Elapsed: 4.2s, Est. remaining: 4.4s
Higher-order terms progress for pole x2: 50% (47/94) - Elapsed: 4.2s, Est. remaining: 4.2s
Higher-order terms progress for pole x2: 51% (48/94) - Elapsed: 4.3s, Est. remaining: 4.1s
Higher-order terms progress for pole x2: 52% (49/94) - Elapsed: 4.3s, Est. remaining: 4.0s
Higher-order terms progress for pole x2: 53% (50/94) - Elapsed: 4.3s, Est. remaining: 3.8s
Higher-order terms progress for pole x2: 54% (51/94) - Elapsed: 4.4s, Est. remaining: 3.7s
Higher-order terms progress for pole x2: 55% (52/94) - Elapsed: 4.4s, Est. remaining: 3.5s
Higher-order terms progress for pole x2: 56% (53/94) - Elapsed: 4.4s, Est. remaining: 3.4s
Higher-order terms progress for pole x2: 57% (54/94) - Elapsed: 4.4s, Est. remaining: 3.2s
Higher-order terms progress for pole x2: 58% (55/94) - Elapsed: 4.4s, Est. remaining: 3.1s
Higher-order terms progress for pole x2: 59% (56/94) - Elapsed: 4.4s, Est. remaining: 3.0s
Higher-order terms progress for pole x2: 60% (57/94) - Elapsed: 4.4s, Est. remaining: 2.8s
Higher-order terms progress for pole x2: 61% (58/94) - Elapsed: 4.4s, Est. remaining: 2.7s
Higher-order terms progress for pole x2: 62% (59/94) - Elapsed: 4.4s, Est. remaining: 2.6s
Higher-order terms progress for pole x2: 63% (60/94) - Elapsed: 4.4s, Est. remaining: 2.5s
Higher-order terms progress for pole x2: 64% (61/94) - Elapsed: 4.4s, Est. remaining: 2.4s
Higher-order terms progress for pole x2: 65% (62/94) - Elapsed: 4.4s, Est. remaining: 2.3s
Higher-order terms progress for pole x2: 67% (63/94) - Elapsed: 4.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x2: 68% (64/94) - Elapsed: 4.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x2: 69% (65/94) - Elapsed: 4.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x2: 70% (66/94) - Elapsed: 4.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x2: 71% (67/94) - Elapsed: 4.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x2: 72% (68/94) - Elapsed: 4.4s, Est. remaining: 1.7s
Higher-order terms progress for pole x2: 73% (69/94) - Elapsed: 4.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x2: 74% (70/94) - Elapsed: 4.4s, Est. remaining: 1.5s
Higher-order terms progress for pole x2: 75% (71/94) - Elapsed: 5.1s, Est. remaining: 1.6s
Higher-order terms progress for pole x2: 76% (72/94) - Elapsed: 5.1s, Est. remaining: 1.6s
Higher-order terms progress for pole x2: 77% (73/94) - Elapsed: 5.1s, Est. remaining: 1.5s
Higher-order terms progress for pole x2: 78% (74/94) - Elapsed: 5.1s, Est. remaining: 1.4s
Higher-order terms progress for pole x2: 79% (75/94) - Elapsed: 5.3s, Est. remaining: 1.4s
Higher-order terms progress for pole x2: 80% (76/94) - Elapsed: 5.5s, Est. remaining: 1.3s
Higher-order terms progress for pole x2: 81% (77/94) - Elapsed: 5.5s, Est. remaining: 1.2s
Higher-order terms progress for pole x2: 82% (78/94) - Elapsed: 5.5s, Est. remaining: 1.1s
Higher-order terms progress for pole x2: 84% (79/94) - Elapsed: 5.5s, Est. remaining: 1.0s
Higher-order terms progress for pole x2: 85% (80/94) - Elapsed: 5.5s, Est. remaining: 1.0s
Higher-order terms progress for pole x2: 86% (81/94) - Elapsed: 5.5s, Est. remaining: 0.9s
Higher-order terms progress for pole x2: 87% (82/94) - Elapsed: 5.5s, Est. remaining: 0.8s
Higher-order terms progress for pole x2: 88% (83/94) - Elapsed: 5.5s, Est. remaining: 0.7s
Higher-order terms progress for pole x2: 89% (84/94) - Elapsed: 5.5s, Est. remaining: 0.7s
Higher-order terms progress for pole x2: 90% (85/94) - Elapsed: 5.5s, Est. remaining: 0.6s
Higher-order terms progress for pole x2: 91% (86/94) - Elapsed: 5.5s, Est. remaining: 0.5s
Higher-order terms progress for pole x2: 92% (87/94) - Elapsed: 5.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x2: 93% (88/94) - Elapsed: 5.5s, Est. remaining: 0.4s
Higher-order terms progress for pole x2: 94% (89/94) - Elapsed: 5.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x2: 95% (90/94) - Elapsed: 5.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x2: 96% (91/94) - Elapsed: 5.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x2: 97% (92/94) - Elapsed: 5.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x2: 98% (93/94) - Elapsed: 5.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x2: 100% (94/94) - Elapsed: 5.6s, Est. remaining: 0.0s
Processed 94 higher-order terms in 5.68s
sum() takes 0.6s
(completed in 9.6s) Combined residue for candidate pole x2 is: -x1**23*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**23*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**22*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**22*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**20*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**20*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**19*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**16*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**3/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**15*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**15*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**15*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**2/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**14*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**14*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**14*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**14*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**14*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**14*x2**3/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**2/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**13*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**12*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**12*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**12*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 6*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 5*x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**12*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**11*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**11*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 6*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 5*x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 3*x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 4*x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 3*x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**10*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**10*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**10*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 5*x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 5*x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 4*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**8*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**8*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 3*x1**8*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**8*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**8*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**8*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**8*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**8*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**8*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**8*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 3*x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**7*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*x1**6*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 3*x1**6*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**6*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**6*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**6*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**6*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + 3*x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 11*x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 15*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 9*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 4*x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**6*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**6*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**6*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**5*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 5*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 5*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**5*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - 2*x1**5*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**5*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**5*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**23/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 4*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 5*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**4*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 3*x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**4*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**4*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**4*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + 2*x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**4*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) + x1**4*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)) - x1**3*x2**23/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**21/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**3*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**3*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**3*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 3*x1**3*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**21/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**21/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 3*x1**2*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**2*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**6*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**2*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x2**30/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - 2*x2**29/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + 2*x2**27/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**26/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1))
Progress for pole x1*x2**3: 0% (1/390) - Elapsed: 1.7s, Est. remaining: 664.3s
Progress for pole x1*x2**3: 1% (4/390) - Elapsed: 1.9s, Est. remaining: 178.6s
Progress for pole x1*x2**3: 2% (8/390) - Elapsed: 1.9s, Est. remaining: 90.8s
Progress for pole x1*x2**3: 3% (12/390) - Elapsed: 2.0s, Est. remaining: 61.8s
Progress for pole x1*x2**3: 4% (16/390) - Elapsed: 2.0s, Est. remaining: 46.1s
Progress for pole x1*x2**3: 5% (20/390) - Elapsed: 2.0s, Est. remaining: 36.6s
Progress for pole x1*x2**3: 6% (24/390) - Elapsed: 2.0s, Est. remaining: 30.2s
Progress for pole x1*x2**3: 7% (28/390) - Elapsed: 2.0s, Est. remaining: 25.7s
Progress for pole x1*x2**3: 8% (32/390) - Elapsed: 2.0s, Est. remaining: 22.3s
Progress for pole x1*x2**3: 9% (36/390) - Elapsed: 2.0s, Est. remaining: 19.7s
Progress for pole x1*x2**3: 10% (39/390) - Elapsed: 2.0s, Est. remaining: 18.0s
Progress for pole x1*x2**3: 11% (43/390) - Elapsed: 2.0s, Est. remaining: 16.4s
Progress for pole x1*x2**3: 12% (47/390) - Elapsed: 2.1s, Est. remaining: 15.0s
Progress for pole x1*x2**3: 13% (51/390) - Elapsed: 2.1s, Est. remaining: 13.7s
Progress for pole x1*x2**3: 14% (55/390) - Elapsed: 2.1s, Est. remaining: 12.5s
Progress for pole x1*x2**3: 15% (59/390) - Elapsed: 2.1s, Est. remaining: 11.5s
Progress for pole x1*x2**3: 16% (63/390) - Elapsed: 2.1s, Est. remaining: 10.7s
Progress for pole x1*x2**3: 17% (67/390) - Elapsed: 2.1s, Est. remaining: 9.9s
Progress for pole x1*x2**3: 18% (71/390) - Elapsed: 2.1s, Est. remaining: 9.3s
Progress for pole x1*x2**3: 19% (75/390) - Elapsed: 2.1s, Est. remaining: 8.7s
Progress for pole x1*x2**3: 20% (78/390) - Elapsed: 2.1s, Est. remaining: 8.3s
Progress for pole x1*x2**3: 21% (82/390) - Elapsed: 2.1s, Est. remaining: 7.8s
Progress for pole x1*x2**3: 22% (86/390) - Elapsed: 2.1s, Est. remaining: 7.3s
Progress for pole x1*x2**3: 23% (90/390) - Elapsed: 2.1s, Est. remaining: 6.9s
Progress for pole x1*x2**3: 24% (94/390) - Elapsed: 2.1s, Est. remaining: 6.5s
Progress for pole x1*x2**3: 25% (98/390) - Elapsed: 2.1s, Est. remaining: 6.2s
Progress for pole x1*x2**3: 26% (102/390) - Elapsed: 2.1s, Est. remaining: 5.9s
Progress for pole x1*x2**3: 27% (106/390) - Elapsed: 2.1s, Est. remaining: 5.6s
Progress for pole x1*x2**3: 28% (110/390) - Elapsed: 2.1s, Est. remaining: 5.3s
Progress for pole x1*x2**3: 29% (114/390) - Elapsed: 2.1s, Est. remaining: 5.0s
Progress for pole x1*x2**3: 30% (117/390) - Elapsed: 2.1s, Est. remaining: 4.8s
Progress for pole x1*x2**3: 31% (121/390) - Elapsed: 2.1s, Est. remaining: 4.6s
Progress for pole x1*x2**3: 32% (125/390) - Elapsed: 2.1s, Est. remaining: 4.4s
Progress for pole x1*x2**3: 33% (129/390) - Elapsed: 2.1s, Est. remaining: 4.2s
Progress for pole x1*x2**3: 34% (133/390) - Elapsed: 2.1s, Est. remaining: 4.0s
Progress for pole x1*x2**3: 35% (137/390) - Elapsed: 2.1s, Est. remaining: 3.8s
Progress for pole x1*x2**3: 36% (141/390) - Elapsed: 2.1s, Est. remaining: 3.7s
Progress for pole x1*x2**3: 37% (145/390) - Elapsed: 2.1s, Est. remaining: 3.5s
Progress for pole x1*x2**3: 38% (149/390) - Elapsed: 2.1s, Est. remaining: 3.4s
Progress for pole x1*x2**3: 39% (153/390) - Elapsed: 2.1s, Est. remaining: 3.2s
Progress for pole x1*x2**3: 40% (156/390) - Elapsed: 2.1s, Est. remaining: 3.1s
Progress for pole x1*x2**3: 41% (160/390) - Elapsed: 2.1s, Est. remaining: 3.0s
Progress for pole x1*x2**3: 42% (164/390) - Elapsed: 2.1s, Est. remaining: 2.9s
Progress for pole x1*x2**3: 43% (168/390) - Elapsed: 2.1s, Est. remaining: 2.8s
Progress for pole x1*x2**3: 44% (172/390) - Elapsed: 2.1s, Est. remaining: 2.7s
Progress for pole x1*x2**3: 45% (176/390) - Elapsed: 2.1s, Est. remaining: 2.5s
Progress for pole x1*x2**3: 46% (180/390) - Elapsed: 2.1s, Est. remaining: 2.4s
Progress for pole x1*x2**3: 47% (184/390) - Elapsed: 2.1s, Est. remaining: 2.3s
Progress for pole x1*x2**3: 48% (188/390) - Elapsed: 2.1s, Est. remaining: 2.3s
Progress for pole x1*x2**3: 49% (192/390) - Elapsed: 2.1s, Est. remaining: 2.2s
Progress for pole x1*x2**3: 50% (195/390) - Elapsed: 2.1s, Est. remaining: 2.1s
Progress for pole x1*x2**3: 51% (199/390) - Elapsed: 2.1s, Est. remaining: 2.0s
Progress for pole x1*x2**3: 52% (203/390) - Elapsed: 2.1s, Est. remaining: 1.9s
Progress for pole x1*x2**3: 53% (207/390) - Elapsed: 2.1s, Est. remaining: 1.9s
Progress for pole x1*x2**3: 54% (211/390) - Elapsed: 2.1s, Est. remaining: 1.8s
Progress for pole x1*x2**3: 55% (215/390) - Elapsed: 2.1s, Est. remaining: 1.7s
Progress for pole x1*x2**3: 56% (219/390) - Elapsed: 2.1s, Est. remaining: 1.6s
Progress for pole x1*x2**3: 57% (223/390) - Elapsed: 2.1s, Est. remaining: 1.6s
Progress for pole x1*x2**3: 58% (227/390) - Elapsed: 2.1s, Est. remaining: 1.5s
Progress for pole x1*x2**3: 59% (231/390) - Elapsed: 2.1s, Est. remaining: 1.5s
Progress for pole x1*x2**3: 60% (234/390) - Elapsed: 2.1s, Est. remaining: 1.4s
Progress for pole x1*x2**3: 61% (238/390) - Elapsed: 2.1s, Est. remaining: 1.3s
Progress for pole x1*x2**3: 62% (242/390) - Elapsed: 2.1s, Est. remaining: 1.3s
Progress for pole x1*x2**3: 63% (246/390) - Elapsed: 2.1s, Est. remaining: 1.2s
Progress for pole x1*x2**3: 64% (250/390) - Elapsed: 2.1s, Est. remaining: 1.2s
Progress for pole x1*x2**3: 65% (254/390) - Elapsed: 2.1s, Est. remaining: 1.1s
Progress for pole x1*x2**3: 66% (258/390) - Elapsed: 2.2s, Est. remaining: 1.1s
Progress for pole x1*x2**3: 67% (262/390) - Elapsed: 2.2s, Est. remaining: 1.1s
Progress for pole x1*x2**3: 68% (266/390) - Elapsed: 2.2s, Est. remaining: 1.0s
Progress for pole x1*x2**3: 69% (270/390) - Elapsed: 2.2s, Est. remaining: 1.0s
Progress for pole x1*x2**3: 70% (273/390) - Elapsed: 2.2s, Est. remaining: 1.0s
Progress for pole x1*x2**3: 71% (277/390) - Elapsed: 2.2s, Est. remaining: 0.9s
Progress for pole x1*x2**3: 72% (281/390) - Elapsed: 2.2s, Est. remaining: 0.9s
Progress for pole x1*x2**3: 73% (285/390) - Elapsed: 2.3s, Est. remaining: 0.8s
Progress for pole x1*x2**3: 74% (289/390) - Elapsed: 2.3s, Est. remaining: 0.8s
Progress for pole x1*x2**3: 75% (293/390) - Elapsed: 2.3s, Est. remaining: 0.8s
Progress for pole x1*x2**3: 76% (297/390) - Elapsed: 2.3s, Est. remaining: 0.7s
Progress for pole x1*x2**3: 77% (301/390) - Elapsed: 2.3s, Est. remaining: 0.7s
Progress for pole x1*x2**3: 78% (305/390) - Elapsed: 2.3s, Est. remaining: 0.6s
Progress for pole x1*x2**3: 79% (309/390) - Elapsed: 2.3s, Est. remaining: 0.6s
Progress for pole x1*x2**3: 80% (312/390) - Elapsed: 2.3s, Est. remaining: 0.6s
Progress for pole x1*x2**3: 81% (316/390) - Elapsed: 2.3s, Est. remaining: 0.5s
Progress for pole x1*x2**3: 82% (320/390) - Elapsed: 2.3s, Est. remaining: 0.5s
Progress for pole x1*x2**3: 83% (324/390) - Elapsed: 2.3s, Est. remaining: 0.5s
Progress for pole x1*x2**3: 84% (328/390) - Elapsed: 2.3s, Est. remaining: 0.4s
Progress for pole x1*x2**3: 85% (332/390) - Elapsed: 2.3s, Est. remaining: 0.4s
Progress for pole x1*x2**3: 86% (336/390) - Elapsed: 2.3s, Est. remaining: 0.4s
Progress for pole x1*x2**3: 87% (340/390) - Elapsed: 2.3s, Est. remaining: 0.3s
Progress for pole x1*x2**3: 88% (344/390) - Elapsed: 2.3s, Est. remaining: 0.3s
Progress for pole x1*x2**3: 89% (348/390) - Elapsed: 2.3s, Est. remaining: 0.3s
Progress for pole x1*x2**3: 90% (351/390) - Elapsed: 2.3s, Est. remaining: 0.3s
Progress for pole x1*x2**3: 91% (355/390) - Elapsed: 2.3s, Est. remaining: 0.2s
Progress for pole x1*x2**3: 92% (359/390) - Elapsed: 2.3s, Est. remaining: 0.2s
Progress for pole x1*x2**3: 93% (363/390) - Elapsed: 2.3s, Est. remaining: 0.2s
Progress for pole x1*x2**3: 94% (367/390) - Elapsed: 2.3s, Est. remaining: 0.1s
Progress for pole x1*x2**3: 95% (371/390) - Elapsed: 2.3s, Est. remaining: 0.1s
Progress for pole x1*x2**3: 96% (375/390) - Elapsed: 2.3s, Est. remaining: 0.1s
Progress for pole x1*x2**3: 97% (379/390) - Elapsed: 2.4s, Est. remaining: 0.1s
Progress for pole x1*x2**3: 98% (383/390) - Elapsed: 2.4s, Est. remaining: 0.0s
Progress for pole x1*x2**3: 99% (387/390) - Elapsed: 2.4s, Est. remaining: 0.0s
Progress for pole x1*x2**3: 100% (390/390) - Elapsed: 2.4s, Est. remaining: 0.0s
(completed in 2.4s) Residue for candidate pole x1*x2**3 is: -x1**5*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**4*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**14/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**4*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**12/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**3*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**12/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) 
Progress for pole x2**2/x1: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 190.9s
Progress for pole x2**2/x1: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 48.6s
Progress for pole x2**2/x1: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 24.1s
Progress for pole x2**2/x1: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 15.9s
Progress for pole x2**2/x1: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 11.9s
Progress for pole x2**2/x1: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.7s
Progress for pole x2**2/x1: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.1s
Progress for pole x2**2/x1: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 7.0s
Progress for pole x2**2/x1: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.2s
Progress for pole x2**2/x1: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x2**2/x1: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.1s
Progress for pole x2**2/x1: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.7s
Progress for pole x2**2/x1: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.4s
Progress for pole x2**2/x1: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x2**2/x1: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x2**2/x1: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x2**2/x1: 16% (63/390) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x2**2/x1: 17% (67/390) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x2**2/x1: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x2**2/x1: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.8s
Progress for pole x2**2/x1: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x2**2/x1: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x2**2/x1: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x2**2/x1: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x2**2/x1: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x2**2/x1: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x2**2/x1: 26% (102/390) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x2**2/x1: 27% (106/390) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x2**2/x1: 28% (110/390) - Elapsed: 0.7s, Est. remaining: 1.9s
Progress for pole x2**2/x1: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x2**2/x1: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x2**2/x1: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x2**2/x1: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**2/x1: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**2/x1: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x2**2/x1: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x2**2/x1: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x2**2/x1: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**2/x1: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**2/x1: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**2/x1: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**2/x1: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**2/x1: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**2/x1: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**2/x1: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**2/x1: 45% (176/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**2/x1: 46% (180/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**2/x1: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x2**2/x1: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**2/x1: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**2/x1: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**2/x1: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**2/x1: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**2/x1: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**2/x1: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**2/x1: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**2/x1: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 67% (262/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**2/x1: 68% (266/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 69% (270/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 70% (273/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 71% (277/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 72% (281/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**2/x1: 73% (285/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 74% (289/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 75% (293/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 77% (301/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**2/x1: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**2/x1: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**2/x1: 96% (375/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 98% (383/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 99% (387/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**2/x1: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x2**2/x1 is: 0 
Progress for pole x2**3/x1: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 192.5s
Progress for pole x2**3/x1: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 51.6s
Progress for pole x2**3/x1: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 25.5s
Progress for pole x2**3/x1: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 16.8s
Progress for pole x2**3/x1: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.5s
Progress for pole x2**3/x1: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.9s
Progress for pole x2**3/x1: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.2s
Progress for pole x2**3/x1: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 6.9s
Progress for pole x2**3/x1: 8% (32/390) - Elapsed: 0.5s, Est. remaining: 6.1s
Progress for pole x2**3/x1: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x2**3/x1: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.2s
Progress for pole x2**3/x1: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x2**3/x1: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.4s
Progress for pole x2**3/x1: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x2**3/x1: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x2**3/x1: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x2**3/x1: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.4s
Progress for pole x2**3/x1: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x2**3/x1: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.1s
Progress for pole x2**3/x1: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x2**3/x1: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x2**3/x1: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x2**3/x1: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x2**3/x1: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x2**3/x1: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x2**3/x1: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x2**3/x1: 26% (102/390) - Elapsed: 0.8s, Est. remaining: 2.1s
Progress for pole x2**3/x1: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x2**3/x1: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x2**3/x1: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x2**3/x1: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x2**3/x1: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x2**3/x1: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**3/x1: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**3/x1: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x2**3/x1: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x2**3/x1: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x2**3/x1: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**3/x1: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**3/x1: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**3/x1: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**3/x1: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**3/x1: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**3/x1: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**3/x1: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**3/x1: 45% (176/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**3/x1: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x2**3/x1: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x2**3/x1: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**3/x1: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**3/x1: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**3/x1: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**3/x1: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**3/x1: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**3/x1: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**3/x1: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**3/x1: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**3/x1: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**3/x1: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**3/x1: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**3/x1: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**3/x1: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**3/x1: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**3/x1: 63% (246/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x2**3/x1: 64% (250/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x2**3/x1: 65% (254/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x2**3/x1: 66% (258/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x2**3/x1: 67% (262/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x2**3/x1: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x2**3/x1: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x2**3/x1: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x2**3/x1: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x2**3/x1: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x2**3/x1: 73% (285/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x2**3/x1: 74% (289/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 75% (293/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 77% (301/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**3/x1: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**3/x1: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3/x1: 96% (375/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**3/x1: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**3/x1: 98% (383/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**3/x1: 99% (387/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x2**3/x1: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x2**3/x1 is: 0 
Pole x1*x2: Separated 189 first-order terms and 201 higher-order terms in 1.47s
First-order terms progress for pole x1*x2: 0% (1/189) - Elapsed: 0.6s, Est. remaining: 106.7s
First-order terms progress for pole x1*x2: 1% (2/189) - Elapsed: 0.6s, Est. remaining: 53.7s
First-order terms progress for pole x1*x2: 2% (4/189) - Elapsed: 0.6s, Est. remaining: 26.7s
First-order terms progress for pole x1*x2: 3% (6/189) - Elapsed: 0.6s, Est. remaining: 18.1s
First-order terms progress for pole x1*x2: 4% (8/189) - Elapsed: 0.6s, Est. remaining: 13.4s
First-order terms progress for pole x1*x2: 5% (10/189) - Elapsed: 0.6s, Est. remaining: 10.7s
First-order terms progress for pole x1*x2: 6% (12/189) - Elapsed: 0.6s, Est. remaining: 8.8s
First-order terms progress for pole x1*x2: 7% (14/189) - Elapsed: 0.6s, Est. remaining: 7.5s
First-order terms progress for pole x1*x2: 8% (16/189) - Elapsed: 0.6s, Est. remaining: 6.5s
First-order terms progress for pole x1*x2: 9% (18/189) - Elapsed: 0.6s, Est. remaining: 5.7s
First-order terms progress for pole x1*x2: 10% (19/189) - Elapsed: 0.6s, Est. remaining: 5.4s
First-order terms progress for pole x1*x2: 11% (21/189) - Elapsed: 0.6s, Est. remaining: 4.8s
First-order terms progress for pole x1*x2: 12% (23/189) - Elapsed: 0.6s, Est. remaining: 4.4s
First-order terms progress for pole x1*x2: 13% (25/189) - Elapsed: 0.6s, Est. remaining: 4.0s
First-order terms progress for pole x1*x2: 14% (27/189) - Elapsed: 0.6s, Est. remaining: 3.7s
First-order terms progress for pole x1*x2: 15% (29/189) - Elapsed: 0.6s, Est. remaining: 3.4s
First-order terms progress for pole x1*x2: 16% (31/189) - Elapsed: 0.6s, Est. remaining: 3.1s
First-order terms progress for pole x1*x2: 17% (33/189) - Elapsed: 0.6s, Est. remaining: 2.9s
First-order terms progress for pole x1*x2: 18% (35/189) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x1*x2: 19% (36/189) - Elapsed: 0.6s, Est. remaining: 2.7s
First-order terms progress for pole x1*x2: 20% (38/189) - Elapsed: 0.6s, Est. remaining: 2.5s
First-order terms progress for pole x1*x2: 21% (40/189) - Elapsed: 0.6s, Est. remaining: 2.3s
First-order terms progress for pole x1*x2: 22% (42/189) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x1*x2: 23% (44/189) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x1*x2: 24% (46/189) - Elapsed: 0.6s, Est. remaining: 2.0s
First-order terms progress for pole x1*x2: 25% (48/189) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1*x2: 26% (50/189) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x1*x2: 27% (52/189) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x1*x2: 28% (53/189) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x1*x2: 29% (55/189) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x1*x2: 30% (57/189) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x1*x2: 31% (59/189) - Elapsed: 0.6s, Est. remaining: 1.4s
First-order terms progress for pole x1*x2: 32% (61/189) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x1*x2: 33% (63/189) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1*x2: 34% (65/189) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1*x2: 35% (67/189) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1*x2: 36% (69/189) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1*x2: 37% (70/189) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1*x2: 38% (72/189) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2: 39% (74/189) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2: 40% (76/189) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1*x2: 41% (78/189) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1*x2: 42% (80/189) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2: 43% (82/189) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2: 44% (84/189) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2: 45% (86/189) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2: 46% (87/189) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2: 47% (89/189) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2: 48% (91/189) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2: 49% (93/189) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2: 50% (95/189) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2: 51% (97/189) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2: 52% (99/189) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2: 53% (101/189) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 54% (103/189) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 55% (104/189) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 56% (106/189) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 57% (108/189) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2: 58% (110/189) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 59% (112/189) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 60% (114/189) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 61% (116/189) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 62% (118/189) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2: 63% (120/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 64% (121/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 65% (123/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 66% (125/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 67% (127/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 68% (129/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 69% (131/189) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2: 70% (133/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 71% (135/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 72% (137/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 73% (138/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 74% (140/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 75% (142/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 76% (144/189) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2: 77% (146/189) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 78% (148/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 79% (150/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 80% (152/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 81% (154/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 82% (155/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 83% (157/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 84% (159/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 85% (161/189) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2: 86% (163/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 87% (165/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 88% (167/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 89% (169/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 90% (171/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 91% (172/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 92% (174/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 93% (176/189) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 94% (178/189) - Elapsed: 1.0s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2: 95% (180/189) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 96% (182/189) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 97% (184/189) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 98% (186/189) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 99% (188/189) - Elapsed: 1.0s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2: 100% (189/189) - Elapsed: 1.0s, Est. remaining: 0.0s
Processed 189 first-order terms in 1.20s
Higher-order terms progress for pole x1*x2: 0% (1/201) - Elapsed: 0.3s, Est. remaining: 65.0s
Higher-order terms progress for pole x1*x2: 1% (3/201) - Elapsed: 0.3s, Est. remaining: 21.7s
Higher-order terms progress for pole x1*x2: 2% (5/201) - Elapsed: 0.3s, Est. remaining: 12.9s
Higher-order terms progress for pole x1*x2: 3% (7/201) - Elapsed: 0.3s, Est. remaining: 9.2s
Higher-order terms progress for pole x1*x2: 4% (9/201) - Elapsed: 0.3s, Est. remaining: 7.1s
Higher-order terms progress for pole x1*x2: 5% (11/201) - Elapsed: 0.3s, Est. remaining: 5.8s
Higher-order terms progress for pole x1*x2: 6% (13/201) - Elapsed: 0.3s, Est. remaining: 4.9s
Higher-order terms progress for pole x1*x2: 7% (15/201) - Elapsed: 0.3s, Est. remaining: 4.2s
Higher-order terms progress for pole x1*x2: 8% (17/201) - Elapsed: 0.3s, Est. remaining: 3.7s
Higher-order terms progress for pole x1*x2: 9% (19/201) - Elapsed: 0.3s, Est. remaining: 3.3s
Higher-order terms progress for pole x1*x2: 10% (21/201) - Elapsed: 0.3s, Est. remaining: 2.9s
Higher-order terms progress for pole x1*x2: 11% (23/201) - Elapsed: 0.3s, Est. remaining: 2.7s
Higher-order terms progress for pole x1*x2: 12% (25/201) - Elapsed: 0.4s, Est. remaining: 2.5s
Higher-order terms progress for pole x1*x2: 13% (27/201) - Elapsed: 0.4s, Est. remaining: 2.3s
Higher-order terms progress for pole x1*x2: 14% (29/201) - Elapsed: 0.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x1*x2: 15% (31/201) - Elapsed: 0.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2: 16% (33/201) - Elapsed: 0.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2: 17% (35/201) - Elapsed: 0.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2: 18% (37/201) - Elapsed: 0.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2: 19% (39/201) - Elapsed: 0.5s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2: 20% (41/201) - Elapsed: 0.5s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2: 21% (43/201) - Elapsed: 0.5s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2: 22% (45/201) - Elapsed: 0.5s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2: 23% (47/201) - Elapsed: 0.7s, Est. remaining: 2.3s
Higher-order terms progress for pole x1*x2: 24% (49/201) - Elapsed: 0.9s, Est. remaining: 2.8s
Higher-order terms progress for pole x1*x2: 25% (51/201) - Elapsed: 1.0s, Est. remaining: 2.9s
Higher-order terms progress for pole x1*x2: 26% (53/201) - Elapsed: 1.1s, Est. remaining: 3.0s
Higher-order terms progress for pole x1*x2: 27% (55/201) - Elapsed: 1.1s, Est. remaining: 2.9s
Higher-order terms progress for pole x1*x2: 28% (57/201) - Elapsed: 1.1s, Est. remaining: 2.8s
Higher-order terms progress for pole x1*x2: 29% (59/201) - Elapsed: 1.2s, Est. remaining: 2.8s
Higher-order terms progress for pole x1*x2: 30% (61/201) - Elapsed: 1.2s, Est. remaining: 2.7s
Higher-order terms progress for pole x1*x2: 31% (63/201) - Elapsed: 1.3s, Est. remaining: 2.9s
Higher-order terms progress for pole x1*x2: 32% (65/201) - Elapsed: 1.5s, Est. remaining: 3.2s
Higher-order terms progress for pole x1*x2: 33% (67/201) - Elapsed: 1.6s, Est. remaining: 3.2s
Higher-order terms progress for pole x1*x2: 34% (69/201) - Elapsed: 1.7s, Est. remaining: 3.3s
Higher-order terms progress for pole x1*x2: 35% (71/201) - Elapsed: 1.9s, Est. remaining: 3.4s
Higher-order terms progress for pole x1*x2: 36% (73/201) - Elapsed: 1.9s, Est. remaining: 3.3s
Higher-order terms progress for pole x1*x2: 37% (75/201) - Elapsed: 1.9s, Est. remaining: 3.2s
Higher-order terms progress for pole x1*x2: 38% (77/201) - Elapsed: 1.9s, Est. remaining: 3.1s
Higher-order terms progress for pole x1*x2: 39% (79/201) - Elapsed: 2.0s, Est. remaining: 3.1s
Higher-order terms progress for pole x1*x2: 40% (81/201) - Elapsed: 2.1s, Est. remaining: 3.1s
Higher-order terms progress for pole x1*x2: 41% (83/201) - Elapsed: 2.2s, Est. remaining: 3.1s
Higher-order terms progress for pole x1*x2: 42% (85/201) - Elapsed: 2.2s, Est. remaining: 3.0s
Higher-order terms progress for pole x1*x2: 43% (87/201) - Elapsed: 2.2s, Est. remaining: 2.9s
Higher-order terms progress for pole x1*x2: 44% (89/201) - Elapsed: 2.2s, Est. remaining: 2.8s
Higher-order terms progress for pole x1*x2: 45% (91/201) - Elapsed: 2.2s, Est. remaining: 2.7s
Higher-order terms progress for pole x1*x2: 46% (93/201) - Elapsed: 2.3s, Est. remaining: 2.7s
Higher-order terms progress for pole x1*x2: 47% (95/201) - Elapsed: 2.3s, Est. remaining: 2.6s
Higher-order terms progress for pole x1*x2: 48% (97/201) - Elapsed: 2.4s, Est. remaining: 2.6s
Higher-order terms progress for pole x1*x2: 49% (99/201) - Elapsed: 2.5s, Est. remaining: 2.6s
Higher-order terms progress for pole x1*x2: 50% (101/201) - Elapsed: 2.5s, Est. remaining: 2.5s
Higher-order terms progress for pole x1*x2: 51% (103/201) - Elapsed: 2.5s, Est. remaining: 2.4s
Higher-order terms progress for pole x1*x2: 52% (105/201) - Elapsed: 2.7s, Est. remaining: 2.4s
Higher-order terms progress for pole x1*x2: 53% (107/201) - Elapsed: 2.7s, Est. remaining: 2.4s
Higher-order terms progress for pole x1*x2: 54% (109/201) - Elapsed: 2.7s, Est. remaining: 2.3s
Higher-order terms progress for pole x1*x2: 55% (111/201) - Elapsed: 2.7s, Est. remaining: 2.2s
Higher-order terms progress for pole x1*x2: 56% (113/201) - Elapsed: 2.7s, Est. remaining: 2.1s
Higher-order terms progress for pole x1*x2: 57% (115/201) - Elapsed: 2.8s, Est. remaining: 2.1s
Higher-order terms progress for pole x1*x2: 58% (117/201) - Elapsed: 2.8s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2: 59% (119/201) - Elapsed: 2.8s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2: 60% (121/201) - Elapsed: 2.8s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2: 61% (123/201) - Elapsed: 2.9s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2: 62% (125/201) - Elapsed: 2.9s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2: 63% (127/201) - Elapsed: 3.0s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2: 64% (129/201) - Elapsed: 3.0s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2: 65% (131/201) - Elapsed: 3.2s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2: 66% (133/201) - Elapsed: 3.3s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2: 67% (135/201) - Elapsed: 3.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2: 68% (137/201) - Elapsed: 3.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2: 69% (139/201) - Elapsed: 3.5s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2: 70% (141/201) - Elapsed: 3.5s, Est. remaining: 1.5s
Higher-order terms progress for pole x1*x2: 71% (143/201) - Elapsed: 3.6s, Est. remaining: 1.5s
Higher-order terms progress for pole x1*x2: 72% (145/201) - Elapsed: 3.6s, Est. remaining: 1.4s
Higher-order terms progress for pole x1*x2: 73% (147/201) - Elapsed: 3.7s, Est. remaining: 1.4s
Higher-order terms progress for pole x1*x2: 74% (149/201) - Elapsed: 3.7s, Est. remaining: 1.3s
Higher-order terms progress for pole x1*x2: 75% (151/201) - Elapsed: 3.7s, Est. remaining: 1.2s
Higher-order terms progress for pole x1*x2: 76% (153/201) - Elapsed: 3.8s, Est. remaining: 1.2s
Higher-order terms progress for pole x1*x2: 77% (155/201) - Elapsed: 3.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2: 78% (157/201) - Elapsed: 3.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2: 79% (159/201) - Elapsed: 3.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2: 80% (161/201) - Elapsed: 3.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2: 81% (163/201) - Elapsed: 3.8s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2: 82% (165/201) - Elapsed: 3.9s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2: 83% (167/201) - Elapsed: 4.0s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2: 84% (169/201) - Elapsed: 4.0s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2: 85% (171/201) - Elapsed: 4.1s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2: 86% (173/201) - Elapsed: 4.1s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2: 87% (175/201) - Elapsed: 4.2s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2: 88% (177/201) - Elapsed: 4.2s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2: 89% (179/201) - Elapsed: 4.2s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2: 90% (181/201) - Elapsed: 4.2s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2: 91% (183/201) - Elapsed: 4.2s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2: 92% (185/201) - Elapsed: 4.3s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2: 93% (187/201) - Elapsed: 4.3s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 94% (189/201) - Elapsed: 4.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2: 95% (191/201) - Elapsed: 4.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2: 96% (193/201) - Elapsed: 4.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2: 97% (195/201) - Elapsed: 4.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 98% (197/201) - Elapsed: 4.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2: 99% (199/201) - Elapsed: 4.6s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2: 100% (201/201) - Elapsed: 4.6s, Est. remaining: 0.0s
Processed 201 higher-order terms in 4.69s
sum() takes 0.3s
(completed in 7.7s) Combined residue for candidate pole x1*x2 is: x1**22*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**21*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**20*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**19*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**18*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**18*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**16*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**15*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**15*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**15*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**15*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**15*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**14*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**12*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 5*x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 4*x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**11*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**11*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 3*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**11*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 14*x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 3*x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**10*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**10*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 9*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 12*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**10*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**2/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**9*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**9/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**9*x2**7/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**9*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**15/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**11/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**8*x2**11/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**8*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**8*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**8*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**8*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 8*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 7*x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**11/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**11/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 7*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**7*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**6*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**6*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 2*x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**12/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 2*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 9*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 8*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + 2*x1**5*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**5*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**5*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**5*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**21/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**4*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 14*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 7*x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**4*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**3*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**14/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 4*x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 12*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 7*x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**3*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**3*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) - x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**3*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**3*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2) + x1**2*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**2*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 3*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 3*x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1*x2**19/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1*x2**16/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1))
Pole x1*x2**2: Separated 127 first-order terms and 263 higher-order terms in 1.43s
First-order terms progress for pole x1*x2**2: 0% (1/127) - Elapsed: 0.6s, Est. remaining: 71.0s
First-order terms progress for pole x1*x2**2: 1% (2/127) - Elapsed: 0.6s, Est. remaining: 35.4s
First-order terms progress for pole x1*x2**2: 2% (3/127) - Elapsed: 0.6s, Est. remaining: 23.4s
First-order terms progress for pole x1*x2**2: 3% (4/127) - Elapsed: 0.6s, Est. remaining: 17.5s
First-order terms progress for pole x1*x2**2: 4% (6/127) - Elapsed: 0.6s, Est. remaining: 11.5s
First-order terms progress for pole x1*x2**2: 5% (7/127) - Elapsed: 0.6s, Est. remaining: 9.8s
First-order terms progress for pole x1*x2**2: 6% (8/127) - Elapsed: 0.6s, Est. remaining: 8.5s
First-order terms progress for pole x1*x2**2: 7% (9/127) - Elapsed: 0.6s, Est. remaining: 7.5s
First-order terms progress for pole x1*x2**2: 8% (11/127) - Elapsed: 0.6s, Est. remaining: 6.0s
First-order terms progress for pole x1*x2**2: 9% (12/127) - Elapsed: 0.6s, Est. remaining: 5.5s
First-order terms progress for pole x1*x2**2: 10% (13/127) - Elapsed: 0.6s, Est. remaining: 5.1s
First-order terms progress for pole x1*x2**2: 11% (14/127) - Elapsed: 0.6s, Est. remaining: 4.7s
First-order terms progress for pole x1*x2**2: 12% (16/127) - Elapsed: 0.6s, Est. remaining: 4.1s
First-order terms progress for pole x1*x2**2: 13% (17/127) - Elapsed: 0.6s, Est. remaining: 3.8s
First-order terms progress for pole x1*x2**2: 14% (18/127) - Elapsed: 0.6s, Est. remaining: 3.6s
First-order terms progress for pole x1*x2**2: 15% (20/127) - Elapsed: 0.6s, Est. remaining: 3.2s
First-order terms progress for pole x1*x2**2: 16% (21/127) - Elapsed: 0.6s, Est. remaining: 3.0s
First-order terms progress for pole x1*x2**2: 17% (22/127) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x1*x2**2: 18% (23/127) - Elapsed: 0.6s, Est. remaining: 2.7s
First-order terms progress for pole x1*x2**2: 19% (25/127) - Elapsed: 0.6s, Est. remaining: 2.4s
First-order terms progress for pole x1*x2**2: 20% (26/127) - Elapsed: 0.6s, Est. remaining: 2.3s
First-order terms progress for pole x1*x2**2: 21% (27/127) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x1*x2**2: 22% (28/127) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x1*x2**2: 23% (30/127) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1*x2**2: 24% (31/127) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1*x2**2: 25% (32/127) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x1*x2**2: 26% (34/127) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x1*x2**2: 27% (35/127) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x1*x2**2: 28% (36/127) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x1*x2**2: 29% (37/127) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x1*x2**2: 30% (39/127) - Elapsed: 0.6s, Est. remaining: 1.4s
First-order terms progress for pole x1*x2**2: 31% (40/127) - Elapsed: 0.6s, Est. remaining: 1.3s
First-order terms progress for pole x1*x2**2: 32% (41/127) - Elapsed: 0.6s, Est. remaining: 1.3s
First-order terms progress for pole x1*x2**2: 33% (42/127) - Elapsed: 0.6s, Est. remaining: 1.2s
First-order terms progress for pole x1*x2**2: 34% (44/127) - Elapsed: 0.6s, Est. remaining: 1.2s
First-order terms progress for pole x1*x2**2: 35% (45/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2**2: 36% (46/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2**2: 37% (47/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1*x2**2: 38% (49/127) - Elapsed: 0.6s, Est. remaining: 1.0s
First-order terms progress for pole x1*x2**2: 39% (50/127) - Elapsed: 0.6s, Est. remaining: 1.0s
First-order terms progress for pole x1*x2**2: 40% (51/127) - Elapsed: 0.6s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2**2: 41% (53/127) - Elapsed: 0.6s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2**2: 42% (54/127) - Elapsed: 0.6s, Est. remaining: 0.9s
First-order terms progress for pole x1*x2**2: 43% (55/127) - Elapsed: 0.6s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2**2: 44% (56/127) - Elapsed: 0.6s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2**2: 45% (58/127) - Elapsed: 0.6s, Est. remaining: 0.8s
First-order terms progress for pole x1*x2**2: 46% (59/127) - Elapsed: 0.6s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2**2: 47% (60/127) - Elapsed: 0.6s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2**2: 48% (61/127) - Elapsed: 0.6s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2**2: 49% (63/127) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1*x2**2: 50% (64/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2**2: 51% (65/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2**2: 52% (67/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2**2: 53% (68/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2**2: 54% (69/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1*x2**2: 55% (70/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2**2: 56% (72/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2**2: 57% (73/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2**2: 58% (74/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2**2: 59% (75/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1*x2**2: 60% (77/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 61% (78/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 62% (79/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 63% (81/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 64% (82/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 65% (83/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 66% (84/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1*x2**2: 67% (86/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 68% (87/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 69% (88/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 70% (89/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 71% (91/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 72% (92/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 73% (93/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1*x2**2: 74% (94/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 75% (96/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 76% (97/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 77% (98/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 78% (100/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 79% (101/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 80% (102/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 81% (103/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 82% (105/127) - Elapsed: 0.7s, Est. remaining: 0.2s
First-order terms progress for pole x1*x2**2: 83% (106/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 84% (107/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 85% (108/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 86% (110/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 87% (111/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 88% (112/127) - Elapsed: 0.7s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 89% (114/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 90% (115/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 91% (116/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 92% (117/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 93% (119/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1*x2**2: 94% (120/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 95% (121/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 96% (122/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 97% (124/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 98% (125/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 99% (126/127) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1*x2**2: 100% (127/127) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 127 first-order terms in 1.01s
Higher-order terms progress for pole x1*x2**2: 0% (1/263) - Elapsed: 0.3s, Est. remaining: 85.2s
Higher-order terms progress for pole x1*x2**2: 1% (3/263) - Elapsed: 0.3s, Est. remaining: 28.9s
Higher-order terms progress for pole x1*x2**2: 2% (6/263) - Elapsed: 0.3s, Est. remaining: 14.3s
Higher-order terms progress for pole x1*x2**2: 3% (8/263) - Elapsed: 0.3s, Est. remaining: 10.7s
Higher-order terms progress for pole x1*x2**2: 4% (11/263) - Elapsed: 0.3s, Est. remaining: 7.8s
Higher-order terms progress for pole x1*x2**2: 5% (14/263) - Elapsed: 0.3s, Est. remaining: 6.1s
Higher-order terms progress for pole x1*x2**2: 6% (16/263) - Elapsed: 0.3s, Est. remaining: 5.3s
Higher-order terms progress for pole x1*x2**2: 7% (19/263) - Elapsed: 0.3s, Est. remaining: 4.4s
Higher-order terms progress for pole x1*x2**2: 8% (22/263) - Elapsed: 0.3s, Est. remaining: 3.8s
Higher-order terms progress for pole x1*x2**2: 9% (24/263) - Elapsed: 0.4s, Est. remaining: 3.5s
Higher-order terms progress for pole x1*x2**2: 10% (27/263) - Elapsed: 0.4s, Est. remaining: 3.2s
Higher-order terms progress for pole x1*x2**2: 11% (29/263) - Elapsed: 0.4s, Est. remaining: 3.0s
Higher-order terms progress for pole x1*x2**2: 12% (32/263) - Elapsed: 0.4s, Est. remaining: 2.7s
Higher-order terms progress for pole x1*x2**2: 13% (35/263) - Elapsed: 0.4s, Est. remaining: 2.5s
Higher-order terms progress for pole x1*x2**2: 14% (37/263) - Elapsed: 0.4s, Est. remaining: 2.4s
Higher-order terms progress for pole x1*x2**2: 15% (40/263) - Elapsed: 0.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x1*x2**2: 16% (43/263) - Elapsed: 0.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2**2: 17% (45/263) - Elapsed: 0.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2**2: 18% (48/263) - Elapsed: 0.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2**2: 19% (50/263) - Elapsed: 0.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2**2: 20% (53/263) - Elapsed: 0.4s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2**2: 21% (56/263) - Elapsed: 0.5s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2**2: 22% (58/263) - Elapsed: 0.6s, Est. remaining: 2.0s
Higher-order terms progress for pole x1*x2**2: 23% (61/263) - Elapsed: 0.6s, Est. remaining: 1.9s
Higher-order terms progress for pole x1*x2**2: 24% (64/263) - Elapsed: 0.6s, Est. remaining: 1.8s
Higher-order terms progress for pole x1*x2**2: 25% (66/263) - Elapsed: 0.6s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2**2: 26% (69/263) - Elapsed: 0.6s, Est. remaining: 1.7s
Higher-order terms progress for pole x1*x2**2: 27% (72/263) - Elapsed: 0.6s, Est. remaining: 1.6s
Higher-order terms progress for pole x1*x2**2: 28% (74/263) - Elapsed: 0.6s, Est. remaining: 1.5s
Higher-order terms progress for pole x1*x2**2: 29% (77/263) - Elapsed: 0.6s, Est. remaining: 1.5s
Higher-order terms progress for pole x1*x2**2: 30% (79/263) - Elapsed: 0.6s, Est. remaining: 1.4s
Higher-order terms progress for pole x1*x2**2: 31% (82/263) - Elapsed: 0.6s, Est. remaining: 1.4s
Higher-order terms progress for pole x1*x2**2: 32% (85/263) - Elapsed: 0.6s, Est. remaining: 1.3s
Higher-order terms progress for pole x1*x2**2: 33% (87/263) - Elapsed: 0.6s, Est. remaining: 1.3s
Higher-order terms progress for pole x1*x2**2: 34% (90/263) - Elapsed: 0.6s, Est. remaining: 1.2s
Higher-order terms progress for pole x1*x2**2: 35% (93/263) - Elapsed: 0.6s, Est. remaining: 1.2s
Higher-order terms progress for pole x1*x2**2: 36% (95/263) - Elapsed: 0.6s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2**2: 37% (98/263) - Elapsed: 0.6s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2**2: 38% (100/263) - Elapsed: 0.7s, Est. remaining: 1.1s
Higher-order terms progress for pole x1*x2**2: 39% (103/263) - Elapsed: 0.7s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 40% (106/263) - Elapsed: 0.7s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 41% (108/263) - Elapsed: 0.7s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 42% (111/263) - Elapsed: 0.7s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 43% (114/263) - Elapsed: 0.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 44% (116/263) - Elapsed: 0.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 45% (119/263) - Elapsed: 0.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1*x2**2: 46% (121/263) - Elapsed: 0.8s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2**2: 47% (124/263) - Elapsed: 0.8s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2**2: 48% (127/263) - Elapsed: 0.8s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2**2: 49% (129/263) - Elapsed: 0.8s, Est. remaining: 0.9s
Higher-order terms progress for pole x1*x2**2: 50% (132/263) - Elapsed: 0.8s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2**2: 51% (135/263) - Elapsed: 0.8s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2**2: 52% (137/263) - Elapsed: 0.8s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2**2: 53% (140/263) - Elapsed: 0.9s, Est. remaining: 0.8s
Higher-order terms progress for pole x1*x2**2: 54% (143/263) - Elapsed: 0.9s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2**2: 55% (145/263) - Elapsed: 0.9s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2**2: 56% (148/263) - Elapsed: 0.9s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2**2: 57% (150/263) - Elapsed: 0.9s, Est. remaining: 0.7s
Higher-order terms progress for pole x1*x2**2: 58% (153/263) - Elapsed: 0.9s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2**2: 59% (156/263) - Elapsed: 0.9s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2**2: 60% (158/263) - Elapsed: 0.9s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2**2: 61% (161/263) - Elapsed: 0.9s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2**2: 62% (164/263) - Elapsed: 0.9s, Est. remaining: 0.6s
Higher-order terms progress for pole x1*x2**2: 63% (166/263) - Elapsed: 0.9s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 64% (169/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 65% (171/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 66% (174/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 67% (177/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 68% (179/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 69% (182/263) - Elapsed: 1.0s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 70% (185/263) - Elapsed: 1.1s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 71% (187/263) - Elapsed: 1.2s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 72% (190/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 73% (192/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 74% (195/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1*x2**2: 75% (198/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 76% (200/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 77% (203/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 78% (206/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 79% (208/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1*x2**2: 80% (211/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 81% (214/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 82% (216/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 83% (219/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 84% (221/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 85% (224/263) - Elapsed: 1.5s, Est. remaining: 0.3s
Higher-order terms progress for pole x1*x2**2: 86% (227/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 87% (229/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 88% (232/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 89% (235/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 90% (237/263) - Elapsed: 1.6s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 91% (240/263) - Elapsed: 1.6s, Est. remaining: 0.2s
Higher-order terms progress for pole x1*x2**2: 92% (242/263) - Elapsed: 1.7s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 93% (245/263) - Elapsed: 1.9s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 94% (248/263) - Elapsed: 1.9s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 95% (250/263) - Elapsed: 2.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 96% (253/263) - Elapsed: 2.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 97% (256/263) - Elapsed: 2.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1*x2**2: 98% (258/263) - Elapsed: 2.0s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2**2: 99% (261/263) - Elapsed: 2.0s, Est. remaining: 0.0s
Higher-order terms progress for pole x1*x2**2: 100% (263/263) - Elapsed: 2.1s, Est. remaining: 0.0s
Processed 263 higher-order terms in 2.11s
sum() takes 0.1s
(completed in 4.6s) Combined residue for candidate pole x1*x2**2 is: -x1**11*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**9*x2**7/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**9*x2**6/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**8*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**8*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**8*x2**8/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**8*x2**6/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**8*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**9/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**8/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**7*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**7*x2**7/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**7*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**6/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**5*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + 2*x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) + x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 2*x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 2*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 9*x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 8*x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**6/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**15/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**14/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - 2*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + 4*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 13*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 9*x1**4*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**3*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**3*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - x1**3*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 4*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)**2) - 3*x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**3*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**3*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 12*x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**3*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 9*x1**3*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**3*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**3*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**2*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**2*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**2*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**2*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1))
Pole x1**2: Separated 161 first-order terms and 229 higher-order terms in 1.33s
First-order terms progress for pole x1**2: 0% (1/161) - Elapsed: 0.6s, Est. remaining: 88.3s
First-order terms progress for pole x1**2: 1% (2/161) - Elapsed: 0.6s, Est. remaining: 45.9s
First-order terms progress for pole x1**2: 2% (4/161) - Elapsed: 0.6s, Est. remaining: 22.6s
First-order terms progress for pole x1**2: 3% (5/161) - Elapsed: 0.6s, Est. remaining: 18.0s
First-order terms progress for pole x1**2: 4% (7/161) - Elapsed: 0.6s, Est. remaining: 12.7s
First-order terms progress for pole x1**2: 5% (9/161) - Elapsed: 0.6s, Est. remaining: 9.7s
First-order terms progress for pole x1**2: 6% (10/161) - Elapsed: 0.6s, Est. remaining: 8.7s
First-order terms progress for pole x1**2: 7% (12/161) - Elapsed: 0.6s, Est. remaining: 7.2s
First-order terms progress for pole x1**2: 8% (13/161) - Elapsed: 0.6s, Est. remaining: 6.6s
First-order terms progress for pole x1**2: 9% (15/161) - Elapsed: 0.6s, Est. remaining: 5.6s
First-order terms progress for pole x1**2: 10% (17/161) - Elapsed: 0.6s, Est. remaining: 4.9s
First-order terms progress for pole x1**2: 11% (18/161) - Elapsed: 0.6s, Est. remaining: 4.6s
First-order terms progress for pole x1**2: 12% (20/161) - Elapsed: 0.6s, Est. remaining: 4.1s
First-order terms progress for pole x1**2: 13% (21/161) - Elapsed: 0.6s, Est. remaining: 3.9s
First-order terms progress for pole x1**2: 14% (23/161) - Elapsed: 0.6s, Est. remaining: 3.5s
First-order terms progress for pole x1**2: 15% (25/161) - Elapsed: 0.6s, Est. remaining: 3.2s
First-order terms progress for pole x1**2: 16% (26/161) - Elapsed: 0.6s, Est. remaining: 3.0s
First-order terms progress for pole x1**2: 17% (28/161) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x1**2: 18% (29/161) - Elapsed: 0.6s, Est. remaining: 2.7s
First-order terms progress for pole x1**2: 19% (31/161) - Elapsed: 0.6s, Est. remaining: 2.5s
First-order terms progress for pole x1**2: 20% (33/161) - Elapsed: 0.6s, Est. remaining: 2.3s
First-order terms progress for pole x1**2: 21% (34/161) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x1**2: 22% (36/161) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x1**2: 23% (38/161) - Elapsed: 0.6s, Est. remaining: 2.0s
First-order terms progress for pole x1**2: 24% (39/161) - Elapsed: 0.6s, Est. remaining: 2.0s
First-order terms progress for pole x1**2: 25% (41/161) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x1**2: 26% (42/161) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x1**2: 27% (44/161) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x1**2: 28% (46/161) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x1**2: 29% (47/161) - Elapsed: 0.7s, Est. remaining: 1.6s
First-order terms progress for pole x1**2: 30% (49/161) - Elapsed: 0.7s, Est. remaining: 1.5s
First-order terms progress for pole x1**2: 31% (50/161) - Elapsed: 0.7s, Est. remaining: 1.5s
First-order terms progress for pole x1**2: 32% (52/161) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x1**2: 33% (54/161) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1**2: 34% (55/161) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x1**2: 35% (57/161) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1**2: 36% (58/161) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x1**2: 37% (60/161) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1**2: 38% (62/161) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x1**2: 39% (63/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1**2: 40% (65/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1**2: 41% (67/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1**2: 42% (68/161) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2: 43% (70/161) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2: 44% (71/161) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2: 45% (73/161) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2: 46% (75/161) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2: 47% (76/161) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2: 48% (78/161) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2: 49% (79/161) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2: 50% (81/161) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2: 51% (83/161) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2: 52% (84/161) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2: 53% (86/161) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2: 54% (87/161) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2: 55% (89/161) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2: 56% (91/161) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2: 57% (92/161) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2: 58% (94/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 59% (95/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 60% (97/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 61% (99/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 62% (100/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 63% (102/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x1**2: 64% (104/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 65% (105/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 66% (107/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 67% (108/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 68% (110/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 69% (112/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x1**2: 70% (113/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 71% (115/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 72% (116/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 73% (118/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 74% (120/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 75% (121/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 76% (123/161) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 77% (124/161) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x1**2: 78% (126/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 79% (128/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 80% (129/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 81% (131/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 82% (133/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 83% (134/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 84% (136/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 85% (137/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x1**2: 86% (139/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 87% (141/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 88% (142/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 89% (144/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 90% (145/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 91% (147/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 92% (149/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 93% (150/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 94% (152/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x1**2: 95% (153/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2: 96% (155/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2: 97% (157/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2: 98% (158/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2: 99% (160/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2: 100% (161/161) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 161 first-order terms in 1.12s
Higher-order terms progress for pole x1**2: 0% (1/229) - Elapsed: 0.3s, Est. remaining: 68.0s
Higher-order terms progress for pole x1**2: 1% (3/229) - Elapsed: 0.3s, Est. remaining: 22.8s
Higher-order terms progress for pole x1**2: 2% (5/229) - Elapsed: 0.3s, Est. remaining: 13.5s
Higher-order terms progress for pole x1**2: 3% (7/229) - Elapsed: 0.3s, Est. remaining: 9.6s
Higher-order terms progress for pole x1**2: 4% (10/229) - Elapsed: 0.3s, Est. remaining: 6.7s
Higher-order terms progress for pole x1**2: 5% (12/229) - Elapsed: 0.3s, Est. remaining: 5.6s
Higher-order terms progress for pole x1**2: 6% (14/229) - Elapsed: 0.3s, Est. remaining: 4.8s
Higher-order terms progress for pole x1**2: 7% (17/229) - Elapsed: 0.3s, Est. remaining: 3.9s
Higher-order terms progress for pole x1**2: 8% (19/229) - Elapsed: 0.3s, Est. remaining: 3.5s
Higher-order terms progress for pole x1**2: 9% (21/229) - Elapsed: 0.3s, Est. remaining: 3.1s
Higher-order terms progress for pole x1**2: 10% (23/229) - Elapsed: 0.3s, Est. remaining: 2.9s
Higher-order terms progress for pole x1**2: 11% (26/229) - Elapsed: 0.3s, Est. remaining: 2.6s
Higher-order terms progress for pole x1**2: 12% (28/229) - Elapsed: 0.3s, Est. remaining: 2.4s
Higher-order terms progress for pole x1**2: 13% (30/229) - Elapsed: 0.3s, Est. remaining: 2.3s
Higher-order terms progress for pole x1**2: 14% (33/229) - Elapsed: 0.3s, Est. remaining: 2.1s
Higher-order terms progress for pole x1**2: 15% (35/229) - Elapsed: 0.4s, Est. remaining: 2.0s
Higher-order terms progress for pole x1**2: 16% (37/229) - Elapsed: 0.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x1**2: 17% (39/229) - Elapsed: 0.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x1**2: 18% (42/229) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1**2: 19% (44/229) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x1**2: 20% (46/229) - Elapsed: 0.4s, Est. remaining: 1.5s
Higher-order terms progress for pole x1**2: 21% (49/229) - Elapsed: 0.4s, Est. remaining: 1.4s
Higher-order terms progress for pole x1**2: 22% (51/229) - Elapsed: 0.4s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2: 23% (53/229) - Elapsed: 0.4s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2: 24% (55/229) - Elapsed: 0.4s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2: 25% (58/229) - Elapsed: 0.4s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2: 26% (60/229) - Elapsed: 0.5s, Est. remaining: 1.4s
Higher-order terms progress for pole x1**2: 27% (62/229) - Elapsed: 0.5s, Est. remaining: 1.4s
Higher-order terms progress for pole x1**2: 28% (65/229) - Elapsed: 0.5s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2: 29% (67/229) - Elapsed: 0.5s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2: 30% (69/229) - Elapsed: 0.5s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2: 31% (71/229) - Elapsed: 0.5s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2: 32% (74/229) - Elapsed: 0.5s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2: 33% (76/229) - Elapsed: 0.5s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2: 34% (78/229) - Elapsed: 0.5s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2: 35% (81/229) - Elapsed: 0.5s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2: 36% (83/229) - Elapsed: 0.6s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2: 37% (85/229) - Elapsed: 0.6s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2: 38% (88/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2: 39% (90/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2: 40% (92/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2: 41% (94/229) - Elapsed: 0.6s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2: 42% (97/229) - Elapsed: 0.6s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2: 43% (99/229) - Elapsed: 0.6s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2: 44% (101/229) - Elapsed: 0.6s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2: 45% (104/229) - Elapsed: 0.6s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 46% (106/229) - Elapsed: 0.6s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 47% (108/229) - Elapsed: 0.6s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 48% (110/229) - Elapsed: 0.6s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 49% (113/229) - Elapsed: 0.6s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 50% (115/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 51% (117/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2: 52% (120/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 53% (122/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 54% (124/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 55% (126/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 56% (129/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 57% (131/229) - Elapsed: 0.8s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2: 58% (133/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 59% (136/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 60% (138/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 61% (140/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 62% (142/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 63% (145/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2: 64% (147/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 65% (149/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 66% (152/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 67% (154/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 68% (156/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 69% (159/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2: 70% (161/229) - Elapsed: 0.8s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 71% (163/229) - Elapsed: 0.8s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 72% (165/229) - Elapsed: 0.8s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 73% (168/229) - Elapsed: 0.8s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 74% (170/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 75% (172/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 76% (175/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 77% (177/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 78% (179/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2: 79% (181/229) - Elapsed: 0.9s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 80% (184/229) - Elapsed: 0.9s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 81% (186/229) - Elapsed: 0.9s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 82% (188/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 83% (191/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 84% (193/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 85% (195/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 86% (197/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2: 87% (200/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 88% (202/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 89% (204/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 90% (207/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 91% (209/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 92% (211/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 93% (213/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 94% (216/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 95% (218/229) - Elapsed: 1.0s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2: 96% (220/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2: 97% (223/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2: 98% (225/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2: 99% (227/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2: 100% (229/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Processed 229 higher-order terms in 1.19s
sum() takes 0.1s
(completed in 3.8s) Combined residue for candidate pole x1**2 is: -x1**29/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**28/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**27/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**25/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**24/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**23/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**22*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**22*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**20*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**20*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**20*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**19*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**18*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**18*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**17*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**17*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**17*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**15*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**15*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**6/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**12*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**12*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**11*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**10*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**10*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 5*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) - x1**10*x2**6/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 5*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + 2*x1**10*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 4*x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 4*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 3*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 5*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**8*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 3*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 5*x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 5*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 4*x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - 2*x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**6*x2**6/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + 5*x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**2 + x1 + 1))
Pole x2**2: Separated 161 first-order terms and 229 higher-order terms in 1.22s
First-order terms progress for pole x2**2: 0% (1/161) - Elapsed: 0.6s, Est. remaining: 90.3s
First-order terms progress for pole x2**2: 1% (2/161) - Elapsed: 0.6s, Est. remaining: 44.9s
First-order terms progress for pole x2**2: 2% (4/161) - Elapsed: 0.6s, Est. remaining: 22.2s
First-order terms progress for pole x2**2: 3% (5/161) - Elapsed: 0.6s, Est. remaining: 17.6s
First-order terms progress for pole x2**2: 4% (7/161) - Elapsed: 0.6s, Est. remaining: 12.4s
First-order terms progress for pole x2**2: 5% (9/161) - Elapsed: 0.6s, Est. remaining: 9.5s
First-order terms progress for pole x2**2: 6% (10/161) - Elapsed: 0.6s, Est. remaining: 8.5s
First-order terms progress for pole x2**2: 7% (12/161) - Elapsed: 0.6s, Est. remaining: 7.0s
First-order terms progress for pole x2**2: 8% (13/161) - Elapsed: 0.6s, Est. remaining: 6.6s
First-order terms progress for pole x2**2: 9% (15/161) - Elapsed: 0.6s, Est. remaining: 5.7s
First-order terms progress for pole x2**2: 10% (17/161) - Elapsed: 0.6s, Est. remaining: 5.0s
First-order terms progress for pole x2**2: 11% (18/161) - Elapsed: 0.6s, Est. remaining: 4.6s
First-order terms progress for pole x2**2: 12% (20/161) - Elapsed: 0.6s, Est. remaining: 4.1s
First-order terms progress for pole x2**2: 13% (21/161) - Elapsed: 0.6s, Est. remaining: 3.9s
First-order terms progress for pole x2**2: 14% (23/161) - Elapsed: 0.6s, Est. remaining: 3.6s
First-order terms progress for pole x2**2: 15% (25/161) - Elapsed: 0.6s, Est. remaining: 3.3s
First-order terms progress for pole x2**2: 16% (26/161) - Elapsed: 0.6s, Est. remaining: 3.1s
First-order terms progress for pole x2**2: 17% (28/161) - Elapsed: 0.6s, Est. remaining: 3.0s
First-order terms progress for pole x2**2: 18% (29/161) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x2**2: 19% (31/161) - Elapsed: 0.6s, Est. remaining: 2.6s
First-order terms progress for pole x2**2: 20% (33/161) - Elapsed: 0.6s, Est. remaining: 2.4s
First-order terms progress for pole x2**2: 21% (34/161) - Elapsed: 0.6s, Est. remaining: 2.4s
First-order terms progress for pole x2**2: 22% (36/161) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x2**2: 23% (38/161) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x2**2: 24% (39/161) - Elapsed: 0.6s, Est. remaining: 2.0s
First-order terms progress for pole x2**2: 25% (41/161) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x2**2: 26% (42/161) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x2**2: 27% (44/161) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x2**2: 28% (46/161) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x2**2: 29% (47/161) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x2**2: 30% (49/161) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x2**2: 31% (50/161) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x2**2: 32% (52/161) - Elapsed: 0.7s, Est. remaining: 1.4s
First-order terms progress for pole x2**2: 33% (54/161) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x2**2: 34% (55/161) - Elapsed: 0.7s, Est. remaining: 1.3s
First-order terms progress for pole x2**2: 35% (57/161) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x2**2: 36% (58/161) - Elapsed: 0.7s, Est. remaining: 1.2s
First-order terms progress for pole x2**2: 37% (60/161) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x2**2: 38% (62/161) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x2**2: 39% (63/161) - Elapsed: 0.7s, Est. remaining: 1.1s
First-order terms progress for pole x2**2: 40% (65/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x2**2: 41% (67/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x2**2: 42% (68/161) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x2**2: 43% (70/161) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x2**2: 44% (71/161) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x2**2: 45% (73/161) - Elapsed: 0.8s, Est. remaining: 0.9s
First-order terms progress for pole x2**2: 46% (75/161) - Elapsed: 0.8s, Est. remaining: 0.9s
First-order terms progress for pole x2**2: 47% (76/161) - Elapsed: 0.8s, Est. remaining: 0.8s
First-order terms progress for pole x2**2: 48% (78/161) - Elapsed: 0.8s, Est. remaining: 0.8s
First-order terms progress for pole x2**2: 49% (79/161) - Elapsed: 0.8s, Est. remaining: 0.8s
First-order terms progress for pole x2**2: 50% (81/161) - Elapsed: 0.8s, Est. remaining: 0.8s
First-order terms progress for pole x2**2: 51% (83/161) - Elapsed: 0.8s, Est. remaining: 0.7s
First-order terms progress for pole x2**2: 52% (84/161) - Elapsed: 0.8s, Est. remaining: 0.7s
First-order terms progress for pole x2**2: 53% (86/161) - Elapsed: 0.8s, Est. remaining: 0.7s
First-order terms progress for pole x2**2: 54% (87/161) - Elapsed: 0.8s, Est. remaining: 0.7s
First-order terms progress for pole x2**2: 55% (89/161) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x2**2: 56% (91/161) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x2**2: 57% (92/161) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x2**2: 58% (94/161) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x2**2: 59% (95/161) - Elapsed: 0.8s, Est. remaining: 0.6s
First-order terms progress for pole x2**2: 60% (97/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x2**2: 61% (99/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x2**2: 62% (100/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x2**2: 63% (102/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x2**2: 64% (104/161) - Elapsed: 0.8s, Est. remaining: 0.5s
First-order terms progress for pole x2**2: 65% (105/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 66% (107/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 67% (108/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 68% (110/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 69% (112/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 70% (113/161) - Elapsed: 0.8s, Est. remaining: 0.4s
First-order terms progress for pole x2**2: 71% (115/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 72% (116/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 73% (118/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 74% (120/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 75% (121/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 76% (123/161) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 77% (124/161) - Elapsed: 0.9s, Est. remaining: 0.3s
First-order terms progress for pole x2**2: 78% (126/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 79% (128/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 80% (129/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 81% (131/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 82% (133/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 83% (134/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 84% (136/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 85% (137/161) - Elapsed: 0.9s, Est. remaining: 0.2s
First-order terms progress for pole x2**2: 86% (139/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 87% (141/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 88% (142/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 89% (144/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 90% (145/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 91% (147/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 92% (149/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 93% (150/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 94% (152/161) - Elapsed: 0.9s, Est. remaining: 0.1s
First-order terms progress for pole x2**2: 95% (153/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x2**2: 96% (155/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x2**2: 97% (157/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x2**2: 98% (158/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x2**2: 99% (160/161) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x2**2: 100% (161/161) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 161 first-order terms in 1.11s
Higher-order terms progress for pole x2**2: 0% (1/229) - Elapsed: 0.3s, Est. remaining: 68.2s
Higher-order terms progress for pole x2**2: 1% (3/229) - Elapsed: 0.3s, Est. remaining: 22.9s
Higher-order terms progress for pole x2**2: 2% (5/229) - Elapsed: 0.3s, Est. remaining: 13.6s
Higher-order terms progress for pole x2**2: 3% (7/229) - Elapsed: 0.3s, Est. remaining: 10.3s
Higher-order terms progress for pole x2**2: 4% (10/229) - Elapsed: 0.3s, Est. remaining: 7.3s
Higher-order terms progress for pole x2**2: 5% (12/229) - Elapsed: 0.3s, Est. remaining: 6.0s
Higher-order terms progress for pole x2**2: 6% (14/229) - Elapsed: 0.3s, Est. remaining: 5.1s
Higher-order terms progress for pole x2**2: 7% (17/229) - Elapsed: 0.3s, Est. remaining: 4.2s
Higher-order terms progress for pole x2**2: 8% (19/229) - Elapsed: 0.3s, Est. remaining: 3.8s
Higher-order terms progress for pole x2**2: 9% (21/229) - Elapsed: 0.3s, Est. remaining: 3.4s
Higher-order terms progress for pole x2**2: 10% (23/229) - Elapsed: 0.3s, Est. remaining: 3.1s
Higher-order terms progress for pole x2**2: 11% (26/229) - Elapsed: 0.4s, Est. remaining: 2.8s
Higher-order terms progress for pole x2**2: 12% (28/229) - Elapsed: 0.4s, Est. remaining: 2.6s
Higher-order terms progress for pole x2**2: 13% (30/229) - Elapsed: 0.4s, Est. remaining: 2.4s
Higher-order terms progress for pole x2**2: 14% (33/229) - Elapsed: 0.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x2**2: 15% (35/229) - Elapsed: 0.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x2**2: 16% (37/229) - Elapsed: 0.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x2**2: 17% (39/229) - Elapsed: 0.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x2**2: 18% (42/229) - Elapsed: 0.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x2**2: 19% (44/229) - Elapsed: 0.4s, Est. remaining: 1.9s
Higher-order terms progress for pole x2**2: 20% (46/229) - Elapsed: 0.4s, Est. remaining: 1.8s
Higher-order terms progress for pole x2**2: 21% (49/229) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x2**2: 22% (51/229) - Elapsed: 0.4s, Est. remaining: 1.6s
Higher-order terms progress for pole x2**2: 23% (53/229) - Elapsed: 0.5s, Est. remaining: 1.5s
Higher-order terms progress for pole x2**2: 24% (55/229) - Elapsed: 0.5s, Est. remaining: 1.4s
Higher-order terms progress for pole x2**2: 25% (58/229) - Elapsed: 0.5s, Est. remaining: 1.5s
Higher-order terms progress for pole x2**2: 26% (60/229) - Elapsed: 0.5s, Est. remaining: 1.5s
Higher-order terms progress for pole x2**2: 27% (62/229) - Elapsed: 0.5s, Est. remaining: 1.4s
Higher-order terms progress for pole x2**2: 28% (65/229) - Elapsed: 0.5s, Est. remaining: 1.4s
Higher-order terms progress for pole x2**2: 29% (67/229) - Elapsed: 0.6s, Est. remaining: 1.3s
Higher-order terms progress for pole x2**2: 30% (69/229) - Elapsed: 0.6s, Est. remaining: 1.3s
Higher-order terms progress for pole x2**2: 31% (71/229) - Elapsed: 0.6s, Est. remaining: 1.2s
Higher-order terms progress for pole x2**2: 32% (74/229) - Elapsed: 0.6s, Est. remaining: 1.2s
Higher-order terms progress for pole x2**2: 33% (76/229) - Elapsed: 0.6s, Est. remaining: 1.1s
Higher-order terms progress for pole x2**2: 34% (78/229) - Elapsed: 0.6s, Est. remaining: 1.1s
Higher-order terms progress for pole x2**2: 35% (81/229) - Elapsed: 0.6s, Est. remaining: 1.1s
Higher-order terms progress for pole x2**2: 36% (83/229) - Elapsed: 0.6s, Est. remaining: 1.0s
Higher-order terms progress for pole x2**2: 37% (85/229) - Elapsed: 0.6s, Est. remaining: 1.0s
Higher-order terms progress for pole x2**2: 38% (88/229) - Elapsed: 0.6s, Est. remaining: 1.0s
Higher-order terms progress for pole x2**2: 39% (90/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x2**2: 40% (92/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x2**2: 41% (94/229) - Elapsed: 0.6s, Est. remaining: 0.9s
Higher-order terms progress for pole x2**2: 42% (97/229) - Elapsed: 0.7s, Est. remaining: 0.9s
Higher-order terms progress for pole x2**2: 43% (99/229) - Elapsed: 0.7s, Est. remaining: 0.9s
Higher-order terms progress for pole x2**2: 44% (101/229) - Elapsed: 0.7s, Est. remaining: 0.8s
Higher-order terms progress for pole x2**2: 45% (104/229) - Elapsed: 0.7s, Est. remaining: 0.8s
Higher-order terms progress for pole x2**2: 46% (106/229) - Elapsed: 0.7s, Est. remaining: 0.8s
Higher-order terms progress for pole x2**2: 47% (108/229) - Elapsed: 0.7s, Est. remaining: 0.8s
Higher-order terms progress for pole x2**2: 48% (110/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 49% (113/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 50% (115/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 51% (117/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 52% (120/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 53% (122/229) - Elapsed: 0.7s, Est. remaining: 0.7s
Higher-order terms progress for pole x2**2: 54% (124/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x2**2: 55% (126/229) - Elapsed: 0.7s, Est. remaining: 0.6s
Higher-order terms progress for pole x2**2: 56% (129/229) - Elapsed: 0.8s, Est. remaining: 0.6s
Higher-order terms progress for pole x2**2: 57% (131/229) - Elapsed: 0.8s, Est. remaining: 0.6s
Higher-order terms progress for pole x2**2: 58% (133/229) - Elapsed: 0.8s, Est. remaining: 0.6s
Higher-order terms progress for pole x2**2: 59% (136/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 60% (138/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 61% (140/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 62% (142/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 63% (145/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 64% (147/229) - Elapsed: 0.8s, Est. remaining: 0.5s
Higher-order terms progress for pole x2**2: 65% (149/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 66% (152/229) - Elapsed: 0.8s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 67% (154/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 68% (156/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 69% (159/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 70% (161/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 71% (163/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 72% (165/229) - Elapsed: 0.9s, Est. remaining: 0.4s
Higher-order terms progress for pole x2**2: 73% (168/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 74% (170/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 75% (172/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 76% (175/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 77% (177/229) - Elapsed: 0.9s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 78% (179/229) - Elapsed: 1.0s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 79% (181/229) - Elapsed: 1.0s, Est. remaining: 0.3s
Higher-order terms progress for pole x2**2: 80% (184/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 81% (186/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 82% (188/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 83% (191/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 84% (193/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 85% (195/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 86% (197/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 87% (200/229) - Elapsed: 1.0s, Est. remaining: 0.2s
Higher-order terms progress for pole x2**2: 88% (202/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 89% (204/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 90% (207/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 91% (209/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 92% (211/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 93% (213/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 94% (216/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 95% (218/229) - Elapsed: 1.1s, Est. remaining: 0.1s
Higher-order terms progress for pole x2**2: 96% (220/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x2**2: 97% (223/229) - Elapsed: 1.1s, Est. remaining: 0.0s
Higher-order terms progress for pole x2**2: 98% (225/229) - Elapsed: 1.2s, Est. remaining: 0.0s
Higher-order terms progress for pole x2**2: 99% (227/229) - Elapsed: 1.2s, Est. remaining: 0.0s
Higher-order terms progress for pole x2**2: 100% (229/229) - Elapsed: 1.2s, Est. remaining: 0.0s
Processed 229 higher-order terms in 1.27s
sum() takes 0.1s
(completed in 3.7s) Combined residue for candidate pole x2**2 is: x1**13*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**13*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**9*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x1**2 - x2**3)*(x1**3 - x2)*(x1**3 - x2**2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**4*(x1*x2**2 - 1)*(x1**2*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**8*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**8*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**8*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**8*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**8*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**8*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**8*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**7*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) + x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**7*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**7*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**7*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**7*x2**6/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**7*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**6*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**6*x2**13/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**6*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + 5*x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 4*x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 5*x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**3*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 4*x1**6*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**6*x2**6/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**5*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 2*x1**5*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 2*x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 3*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - 2*x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**5*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**7/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 5*x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**5*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**14/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) - 2*x1**4*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)**2) + 2*x1**4*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**9/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - x1**4*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 3*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + 4*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**4*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**6*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) + x1**4*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x2**2 + x2 + 1)) - 5*x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)*(x1**2 - x2)**2*(x2 - 1)**11*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**22/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**18/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**15/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**18/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**17/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x2**29/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**28/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**27/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**25/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**24/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**23/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1))
Progress for pole x1**2/x2: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 202.7s
Progress for pole x1**2/x2: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 52.7s
Progress for pole x1**2/x2: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 26.1s
Progress for pole x1**2/x2: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 17.2s
Progress for pole x1**2/x2: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.8s
Progress for pole x1**2/x2: 5% (20/390) - Elapsed: 0.6s, Est. remaining: 10.7s
Progress for pole x1**2/x2: 6% (24/390) - Elapsed: 0.6s, Est. remaining: 8.8s
Progress for pole x1**2/x2: 7% (28/390) - Elapsed: 0.6s, Est. remaining: 7.5s
Progress for pole x1**2/x2: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.5s
Progress for pole x1**2/x2: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.7s
Progress for pole x1**2/x2: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.2s
Progress for pole x1**2/x2: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.9s
Progress for pole x1**2/x2: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x1**2/x2: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.3s
Progress for pole x1**2/x2: 14% (55/390) - Elapsed: 0.7s, Est. remaining: 4.0s
Progress for pole x1**2/x2: 15% (59/390) - Elapsed: 0.7s, Est. remaining: 3.7s
Progress for pole x1**2/x2: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.5s
Progress for pole x1**2/x2: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x1**2/x2: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x1**2/x2: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x1**2/x2: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.8s
Progress for pole x1**2/x2: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x1**2/x2: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x1**2/x2: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x1**2/x2: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**2/x2: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1**2/x2: 26% (102/390) - Elapsed: 0.8s, Est. remaining: 2.1s
Progress for pole x1**2/x2: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x1**2/x2: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 2.1s
Progress for pole x1**2/x2: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x1**2/x2: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x1**2/x2: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**2/x2: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**2/x2: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x1**2/x2: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**2/x2: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**2/x2: 36% (141/390) - Elapsed: 0.9s, Est. remaining: 1.5s
Progress for pole x1**2/x2: 37% (145/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**2/x2: 38% (149/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**2/x2: 39% (153/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**2/x2: 40% (156/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**2/x2: 41% (160/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**2/x2: 42% (164/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**2/x2: 43% (168/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**2/x2: 44% (172/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**2/x2: 45% (176/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**2/x2: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**2/x2: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**2/x2: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**2/x2: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2/x2: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2/x2: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2/x2: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2/x2: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2/x2: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2/x2: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2/x2: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2/x2: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 67% (262/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**2/x2: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 73% (285/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2/x2: 74% (289/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 75% (293/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 77% (301/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2/x2: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2/x2: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 93% (363/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 94% (367/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 95% (371/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2/x2: 96% (375/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 98% (383/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 99% (387/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**2/x2: 100% (390/390) - Elapsed: 1.2s, Est. remaining: 0.0s
(completed in 1.2s) Residue for candidate pole x1**2/x2 is: 0 
Progress for pole x1**2*x2**2: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 202.0s
Progress for pole x1**2*x2**2: 1% (4/390) - Elapsed: 0.6s, Est. remaining: 54.1s
Progress for pole x1**2*x2**2: 2% (8/390) - Elapsed: 0.6s, Est. remaining: 26.8s
Progress for pole x1**2*x2**2: 3% (12/390) - Elapsed: 0.6s, Est. remaining: 17.7s
Progress for pole x1**2*x2**2: 4% (16/390) - Elapsed: 0.6s, Est. remaining: 13.1s
Progress for pole x1**2*x2**2: 5% (20/390) - Elapsed: 0.6s, Est. remaining: 10.4s
Progress for pole x1**2*x2**2: 6% (24/390) - Elapsed: 0.6s, Est. remaining: 8.6s
Progress for pole x1**2*x2**2: 7% (28/390) - Elapsed: 0.6s, Est. remaining: 7.3s
Progress for pole x1**2*x2**2: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.3s
Progress for pole x1**2*x2**2: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.7s
Progress for pole x1**2*x2**2: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.3s
Progress for pole x1**2*x2**2: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x1**2*x2**2: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x1**2*x2**2: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x1**2*x2**2: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x1**2*x2**2: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x1**2*x2**2: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.4s
Progress for pole x1**2*x2**2: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x1**2*x2**2: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x1**2*x2**2: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.8s
Progress for pole x1**2*x2**2: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x1**2*x2**2: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x1**2*x2**2: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x1**2*x2**2: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x1**2*x2**2: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**2*x2**2: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1**2*x2**2: 26% (102/390) - Elapsed: 0.8s, Est. remaining: 2.2s
Progress for pole x1**2*x2**2: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.1s
Progress for pole x1**2*x2**2: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x1**2*x2**2: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x1**2*x2**2: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x1**2*x2**2: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**2*x2**2: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**2*x2**2: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x1**2*x2**2: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**2*x2**2: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**2*x2**2: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**2*x2**2: 37% (145/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**2*x2**2: 38% (149/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**2*x2**2: 39% (153/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**2*x2**2: 40% (156/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**2*x2**2: 41% (160/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**2*x2**2: 42% (164/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**2*x2**2: 43% (168/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**2*x2**2: 44% (172/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**2*x2**2: 45% (176/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**2*x2**2: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**2*x2**2: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**2*x2**2: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**2*x2**2: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2*x2**2: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2*x2**2: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**2*x2**2: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2*x2**2: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2*x2**2: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2*x2**2: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**2*x2**2: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2*x2**2: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2*x2**2: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**2*x2**2: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2*x2**2: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2*x2**2: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2*x2**2: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2*x2**2: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**2*x2**2: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**2*x2**2: 65% (254/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**2*x2**2: 66% (258/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**2*x2**2: 67% (262/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**2*x2**2: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 73% (285/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**2*x2**2: 74% (289/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 75% (293/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 77% (301/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**2*x2**2: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**2*x2**2: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 89% (348/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 90% (351/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 91% (355/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 92% (359/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 93% (363/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 94% (367/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 95% (371/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**2*x2**2: 96% (375/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2*x2**2: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2*x2**2: 98% (383/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2*x2**2: 99% (387/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**2*x2**2: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x1**2*x2**2 is: -x1**13*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**12*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**8/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**10*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**10*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**6/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**9*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**8*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**8*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**8*x2**6/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**7*x2**12/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**7*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**6*x2**13/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - 2*x1**6*x2**12/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**6*x2**10/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**10/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**7*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x2 - 1)**10*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2**2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) 
Pole x1**2*x2: Separated 127 first-order terms and 263 higher-order terms in 1.42s
First-order terms progress for pole x1**2*x2: 0% (1/127) - Elapsed: 0.6s, Est. remaining: 71.4s
First-order terms progress for pole x1**2*x2: 1% (2/127) - Elapsed: 0.6s, Est. remaining: 35.5s
First-order terms progress for pole x1**2*x2: 2% (3/127) - Elapsed: 0.6s, Est. remaining: 23.5s
First-order terms progress for pole x1**2*x2: 3% (4/127) - Elapsed: 0.6s, Est. remaining: 17.5s
First-order terms progress for pole x1**2*x2: 4% (6/127) - Elapsed: 0.6s, Est. remaining: 11.5s
First-order terms progress for pole x1**2*x2: 5% (7/127) - Elapsed: 0.6s, Est. remaining: 9.8s
First-order terms progress for pole x1**2*x2: 6% (8/127) - Elapsed: 0.6s, Est. remaining: 8.5s
First-order terms progress for pole x1**2*x2: 7% (9/127) - Elapsed: 0.6s, Est. remaining: 7.6s
First-order terms progress for pole x1**2*x2: 8% (11/127) - Elapsed: 0.6s, Est. remaining: 6.2s
First-order terms progress for pole x1**2*x2: 9% (12/127) - Elapsed: 0.6s, Est. remaining: 5.6s
First-order terms progress for pole x1**2*x2: 10% (13/127) - Elapsed: 0.6s, Est. remaining: 5.2s
First-order terms progress for pole x1**2*x2: 11% (14/127) - Elapsed: 0.6s, Est. remaining: 4.8s
First-order terms progress for pole x1**2*x2: 12% (16/127) - Elapsed: 0.6s, Est. remaining: 4.1s
First-order terms progress for pole x1**2*x2: 13% (17/127) - Elapsed: 0.6s, Est. remaining: 3.8s
First-order terms progress for pole x1**2*x2: 14% (18/127) - Elapsed: 0.6s, Est. remaining: 3.6s
First-order terms progress for pole x1**2*x2: 15% (20/127) - Elapsed: 0.6s, Est. remaining: 3.2s
First-order terms progress for pole x1**2*x2: 16% (21/127) - Elapsed: 0.6s, Est. remaining: 3.0s
First-order terms progress for pole x1**2*x2: 17% (22/127) - Elapsed: 0.6s, Est. remaining: 2.8s
First-order terms progress for pole x1**2*x2: 18% (23/127) - Elapsed: 0.6s, Est. remaining: 2.7s
First-order terms progress for pole x1**2*x2: 19% (25/127) - Elapsed: 0.6s, Est. remaining: 2.4s
First-order terms progress for pole x1**2*x2: 20% (26/127) - Elapsed: 0.6s, Est. remaining: 2.3s
First-order terms progress for pole x1**2*x2: 21% (27/127) - Elapsed: 0.6s, Est. remaining: 2.2s
First-order terms progress for pole x1**2*x2: 22% (28/127) - Elapsed: 0.6s, Est. remaining: 2.1s
First-order terms progress for pole x1**2*x2: 23% (30/127) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1**2*x2: 24% (31/127) - Elapsed: 0.6s, Est. remaining: 1.9s
First-order terms progress for pole x1**2*x2: 25% (32/127) - Elapsed: 0.6s, Est. remaining: 1.8s
First-order terms progress for pole x1**2*x2: 26% (34/127) - Elapsed: 0.6s, Est. remaining: 1.7s
First-order terms progress for pole x1**2*x2: 27% (35/127) - Elapsed: 0.6s, Est. remaining: 1.6s
First-order terms progress for pole x1**2*x2: 28% (36/127) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x1**2*x2: 29% (37/127) - Elapsed: 0.6s, Est. remaining: 1.5s
First-order terms progress for pole x1**2*x2: 30% (39/127) - Elapsed: 0.6s, Est. remaining: 1.4s
First-order terms progress for pole x1**2*x2: 31% (40/127) - Elapsed: 0.6s, Est. remaining: 1.3s
First-order terms progress for pole x1**2*x2: 32% (41/127) - Elapsed: 0.6s, Est. remaining: 1.3s
First-order terms progress for pole x1**2*x2: 33% (42/127) - Elapsed: 0.6s, Est. remaining: 1.2s
First-order terms progress for pole x1**2*x2: 34% (44/127) - Elapsed: 0.6s, Est. remaining: 1.2s
First-order terms progress for pole x1**2*x2: 35% (45/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1**2*x2: 36% (46/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1**2*x2: 37% (47/127) - Elapsed: 0.6s, Est. remaining: 1.1s
First-order terms progress for pole x1**2*x2: 38% (49/127) - Elapsed: 0.6s, Est. remaining: 1.0s
First-order terms progress for pole x1**2*x2: 39% (50/127) - Elapsed: 0.6s, Est. remaining: 1.0s
First-order terms progress for pole x1**2*x2: 40% (51/127) - Elapsed: 0.7s, Est. remaining: 1.0s
First-order terms progress for pole x1**2*x2: 41% (53/127) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2*x2: 42% (54/127) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2*x2: 43% (55/127) - Elapsed: 0.7s, Est. remaining: 0.9s
First-order terms progress for pole x1**2*x2: 44% (56/127) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2*x2: 45% (58/127) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2*x2: 46% (59/127) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2*x2: 47% (60/127) - Elapsed: 0.7s, Est. remaining: 0.8s
First-order terms progress for pole x1**2*x2: 48% (61/127) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2*x2: 49% (63/127) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2*x2: 50% (64/127) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2*x2: 51% (65/127) - Elapsed: 0.7s, Est. remaining: 0.7s
First-order terms progress for pole x1**2*x2: 52% (67/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2*x2: 53% (68/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2*x2: 54% (69/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2*x2: 55% (70/127) - Elapsed: 0.7s, Est. remaining: 0.6s
First-order terms progress for pole x1**2*x2: 56% (72/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 57% (73/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 58% (74/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 59% (75/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 60% (77/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 61% (78/127) - Elapsed: 0.7s, Est. remaining: 0.5s
First-order terms progress for pole x1**2*x2: 62% (79/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 63% (81/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 64% (82/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 65% (83/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 66% (84/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 67% (86/127) - Elapsed: 0.7s, Est. remaining: 0.4s
First-order terms progress for pole x1**2*x2: 68% (87/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 69% (88/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 70% (89/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 71% (91/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 72% (92/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 73% (93/127) - Elapsed: 0.7s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 74% (94/127) - Elapsed: 0.8s, Est. remaining: 0.3s
First-order terms progress for pole x1**2*x2: 75% (96/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 76% (97/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 77% (98/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 78% (100/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 79% (101/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 80% (102/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 81% (103/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 82% (105/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 83% (106/127) - Elapsed: 0.8s, Est. remaining: 0.2s
First-order terms progress for pole x1**2*x2: 84% (107/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 85% (108/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 86% (110/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 87% (111/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 88% (112/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 89% (114/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 90% (115/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 91% (116/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 92% (117/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 93% (119/127) - Elapsed: 0.8s, Est. remaining: 0.1s
First-order terms progress for pole x1**2*x2: 94% (120/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 95% (121/127) - Elapsed: 0.8s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 96% (122/127) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 97% (124/127) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 98% (125/127) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 99% (126/127) - Elapsed: 0.9s, Est. remaining: 0.0s
First-order terms progress for pole x1**2*x2: 100% (127/127) - Elapsed: 0.9s, Est. remaining: 0.0s
Processed 127 first-order terms in 1.06s
Higher-order terms progress for pole x1**2*x2: 0% (1/263) - Elapsed: 0.3s, Est. remaining: 85.8s
Higher-order terms progress for pole x1**2*x2: 1% (3/263) - Elapsed: 0.3s, Est. remaining: 28.7s
Higher-order terms progress for pole x1**2*x2: 2% (6/263) - Elapsed: 0.3s, Est. remaining: 14.6s
Higher-order terms progress for pole x1**2*x2: 3% (8/263) - Elapsed: 0.3s, Est. remaining: 10.9s
Higher-order terms progress for pole x1**2*x2: 4% (11/263) - Elapsed: 0.3s, Est. remaining: 7.9s
Higher-order terms progress for pole x1**2*x2: 5% (14/263) - Elapsed: 0.3s, Est. remaining: 6.2s
Higher-order terms progress for pole x1**2*x2: 6% (16/263) - Elapsed: 0.4s, Est. remaining: 5.6s
Higher-order terms progress for pole x1**2*x2: 7% (19/263) - Elapsed: 0.4s, Est. remaining: 4.7s
Higher-order terms progress for pole x1**2*x2: 8% (22/263) - Elapsed: 0.4s, Est. remaining: 4.0s
Higher-order terms progress for pole x1**2*x2: 9% (24/263) - Elapsed: 0.4s, Est. remaining: 3.7s
Higher-order terms progress for pole x1**2*x2: 10% (27/263) - Elapsed: 0.4s, Est. remaining: 3.3s
Higher-order terms progress for pole x1**2*x2: 11% (29/263) - Elapsed: 0.4s, Est. remaining: 3.0s
Higher-order terms progress for pole x1**2*x2: 12% (32/263) - Elapsed: 0.4s, Est. remaining: 2.8s
Higher-order terms progress for pole x1**2*x2: 13% (35/263) - Elapsed: 0.4s, Est. remaining: 2.6s
Higher-order terms progress for pole x1**2*x2: 14% (37/263) - Elapsed: 0.4s, Est. remaining: 2.5s
Higher-order terms progress for pole x1**2*x2: 15% (40/263) - Elapsed: 0.4s, Est. remaining: 2.3s
Higher-order terms progress for pole x1**2*x2: 16% (43/263) - Elapsed: 0.4s, Est. remaining: 2.2s
Higher-order terms progress for pole x1**2*x2: 17% (45/263) - Elapsed: 0.4s, Est. remaining: 2.1s
Higher-order terms progress for pole x1**2*x2: 18% (48/263) - Elapsed: 0.5s, Est. remaining: 2.0s
Higher-order terms progress for pole x1**2*x2: 19% (50/263) - Elapsed: 0.5s, Est. remaining: 1.9s
Higher-order terms progress for pole x1**2*x2: 20% (53/263) - Elapsed: 0.5s, Est. remaining: 1.8s
Higher-order terms progress for pole x1**2*x2: 21% (56/263) - Elapsed: 0.6s, Est. remaining: 2.2s
Higher-order terms progress for pole x1**2*x2: 22% (58/263) - Elapsed: 0.6s, Est. remaining: 2.2s
Higher-order terms progress for pole x1**2*x2: 23% (61/263) - Elapsed: 0.6s, Est. remaining: 2.1s
Higher-order terms progress for pole x1**2*x2: 24% (64/263) - Elapsed: 0.7s, Est. remaining: 2.0s
Higher-order terms progress for pole x1**2*x2: 25% (66/263) - Elapsed: 0.7s, Est. remaining: 2.0s
Higher-order terms progress for pole x1**2*x2: 26% (69/263) - Elapsed: 0.7s, Est. remaining: 1.9s
Higher-order terms progress for pole x1**2*x2: 27% (72/263) - Elapsed: 0.7s, Est. remaining: 1.8s
Higher-order terms progress for pole x1**2*x2: 28% (74/263) - Elapsed: 0.7s, Est. remaining: 1.7s
Higher-order terms progress for pole x1**2*x2: 29% (77/263) - Elapsed: 0.7s, Est. remaining: 1.6s
Higher-order terms progress for pole x1**2*x2: 30% (79/263) - Elapsed: 0.7s, Est. remaining: 1.6s
Higher-order terms progress for pole x1**2*x2: 31% (82/263) - Elapsed: 0.7s, Est. remaining: 1.5s
Higher-order terms progress for pole x1**2*x2: 32% (85/263) - Elapsed: 0.7s, Est. remaining: 1.5s
Higher-order terms progress for pole x1**2*x2: 33% (87/263) - Elapsed: 0.7s, Est. remaining: 1.4s
Higher-order terms progress for pole x1**2*x2: 34% (90/263) - Elapsed: 0.7s, Est. remaining: 1.4s
Higher-order terms progress for pole x1**2*x2: 35% (93/263) - Elapsed: 0.7s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2*x2: 36% (95/263) - Elapsed: 0.7s, Est. remaining: 1.3s
Higher-order terms progress for pole x1**2*x2: 37% (98/263) - Elapsed: 0.7s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2*x2: 38% (100/263) - Elapsed: 0.7s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2*x2: 39% (103/263) - Elapsed: 0.7s, Est. remaining: 1.2s
Higher-order terms progress for pole x1**2*x2: 40% (106/263) - Elapsed: 0.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2*x2: 41% (108/263) - Elapsed: 0.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2*x2: 42% (111/263) - Elapsed: 0.8s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2*x2: 43% (114/263) - Elapsed: 0.8s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 44% (116/263) - Elapsed: 0.9s, Est. remaining: 1.1s
Higher-order terms progress for pole x1**2*x2: 45% (119/263) - Elapsed: 0.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 46% (121/263) - Elapsed: 0.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 47% (124/263) - Elapsed: 0.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 48% (127/263) - Elapsed: 0.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 49% (129/263) - Elapsed: 0.9s, Est. remaining: 1.0s
Higher-order terms progress for pole x1**2*x2: 50% (132/263) - Elapsed: 0.9s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2*x2: 51% (135/263) - Elapsed: 0.9s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2*x2: 52% (137/263) - Elapsed: 0.9s, Est. remaining: 0.9s
Higher-order terms progress for pole x1**2*x2: 53% (140/263) - Elapsed: 0.9s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2*x2: 54% (143/263) - Elapsed: 0.9s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2*x2: 55% (145/263) - Elapsed: 1.0s, Est. remaining: 0.8s
Higher-order terms progress for pole x1**2*x2: 56% (148/263) - Elapsed: 1.0s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2*x2: 57% (150/263) - Elapsed: 1.0s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2*x2: 58% (153/263) - Elapsed: 1.0s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2*x2: 59% (156/263) - Elapsed: 1.0s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2*x2: 60% (158/263) - Elapsed: 1.0s, Est. remaining: 0.7s
Higher-order terms progress for pole x1**2*x2: 61% (161/263) - Elapsed: 1.0s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 62% (164/263) - Elapsed: 1.0s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 63% (166/263) - Elapsed: 1.0s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 64% (169/263) - Elapsed: 1.0s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 65% (171/263) - Elapsed: 1.0s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 66% (174/263) - Elapsed: 1.3s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 67% (177/263) - Elapsed: 1.3s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 68% (179/263) - Elapsed: 1.3s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 69% (182/263) - Elapsed: 1.3s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 70% (185/263) - Elapsed: 1.3s, Est. remaining: 0.6s
Higher-order terms progress for pole x1**2*x2: 71% (187/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2*x2: 72% (190/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2*x2: 73% (192/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2*x2: 74% (195/263) - Elapsed: 1.3s, Est. remaining: 0.5s
Higher-order terms progress for pole x1**2*x2: 75% (198/263) - Elapsed: 1.3s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2*x2: 76% (200/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2*x2: 77% (203/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2*x2: 78% (206/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2*x2: 79% (208/263) - Elapsed: 1.4s, Est. remaining: 0.4s
Higher-order terms progress for pole x1**2*x2: 80% (211/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2*x2: 81% (214/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2*x2: 82% (216/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2*x2: 83% (219/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2*x2: 84% (221/263) - Elapsed: 1.4s, Est. remaining: 0.3s
Higher-order terms progress for pole x1**2*x2: 85% (224/263) - Elapsed: 1.4s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 86% (227/263) - Elapsed: 1.4s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 87% (229/263) - Elapsed: 1.4s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 88% (232/263) - Elapsed: 1.4s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 89% (235/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 90% (237/263) - Elapsed: 1.5s, Est. remaining: 0.2s
Higher-order terms progress for pole x1**2*x2: 91% (240/263) - Elapsed: 1.5s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 92% (242/263) - Elapsed: 1.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 93% (245/263) - Elapsed: 1.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 94% (248/263) - Elapsed: 1.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 95% (250/263) - Elapsed: 1.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 96% (253/263) - Elapsed: 1.6s, Est. remaining: 0.1s
Higher-order terms progress for pole x1**2*x2: 97% (256/263) - Elapsed: 1.6s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2*x2: 98% (258/263) - Elapsed: 1.6s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2*x2: 99% (261/263) - Elapsed: 1.6s, Est. remaining: 0.0s
Higher-order terms progress for pole x1**2*x2: 100% (263/263) - Elapsed: 1.7s, Est. remaining: 0.0s
Processed 263 higher-order terms in 1.77s
sum() takes 0.1s
(completed in 4.3s) Combined residue for candidate pole x1**2*x2 is: -x1**20*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**18*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**18*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**17*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**17*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**17*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**15*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**15*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**15*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**14*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**13*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**12*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**12*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**12*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**12*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**11/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**11*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**11*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**11*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**11*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**11*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**11*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**11*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**11*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**10*x2**9/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**7/((x1 - 1)**8*(x1 + 1)**2*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**10*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**10*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 3*x1**10*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 3*x1**10*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**10*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + x1**9*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)**2*(x1**3*x2**2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + 2*x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 3*x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + 3*x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 3*x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**9*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 4*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**9*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**2*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**9*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**9*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**9*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**9*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**9*x2**2/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) - x1**8*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - x1**8*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**4*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**4*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)**3*(x1**2*x2**3 - 1)*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)) + 2*x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 3*x1**8*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 13*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**3*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**8*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 12*x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**8*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**8*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**9/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**7/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + 2*x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 9*x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 4*x1**7*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 9*x1**7*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**3/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**7*x2**3/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**7*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**11/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + 2*x1**6*x2**10/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**9/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) - 2*x1**6*x2**8/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) + x1**6*x2**8/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**6*x2**8/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1**2 - x2)*(x1**3 - x2)*(x2 - 1)**8*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x1**2 + x1 + 1)*(x2**2 + x2 + 1)) + x1**6*x2**7/((x1 - 1)**9*(x1 + 1)**3*(x1 - x2)**3*(x1 - x2**2)**2*(x1**2 - x2)*(x2 - 1)**10*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x1**3*x2 - 1)*(x2**2 + x2 + 1)) - x1**6*x2**7/((x1 - 1)**10*(x1 + 1)**2*(x1 - x2)**3*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)*(x1*x2**3 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**6*x2**6/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 8*x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + 2*x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**9*(x2 + 1)**3*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 2*x1**6*x2**5/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**5*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**6*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - 9*x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**4/((x1 - 1)**10*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**6*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**6*x2**4/((x1 - 1)**11*(x1 + 1)**3*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**6*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1 - x2**2)*(x1**2 - x2)**2*(x2 - 1)**8*(x2 + 1)**2*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1))
Progress for pole x1**3: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 192.3s
Progress for pole x1**3: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 48.1s
Progress for pole x1**3: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 24.0s
Progress for pole x1**3: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 16.1s
Progress for pole x1**3: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.0s
Progress for pole x1**3: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.8s
Progress for pole x1**3: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.0s
Progress for pole x1**3: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 7.0s
Progress for pole x1**3: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.2s
Progress for pole x1**3: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.5s
Progress for pole x1**3: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.1s
Progress for pole x1**3: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.7s
Progress for pole x1**3: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.3s
Progress for pole x1**3: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.0s
Progress for pole x1**3: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x1**3: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.5s
Progress for pole x1**3: 16% (63/390) - Elapsed: 0.6s, Est. remaining: 3.3s
Progress for pole x1**3: 17% (67/390) - Elapsed: 0.6s, Est. remaining: 3.1s
Progress for pole x1**3: 18% (71/390) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x1**3: 19% (75/390) - Elapsed: 0.6s, Est. remaining: 2.7s
Progress for pole x1**3: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x1**3: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x1**3: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x1**3: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**3: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**3: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1**3: 26% (102/390) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x1**3: 27% (106/390) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x1**3: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x1**3: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**3: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**3: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x1**3: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**3: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**3: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**3: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**3: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x1**3: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1**3: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1**3: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x1**3: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x1**3: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x1**3: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**3: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**3: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**3: 45% (176/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**3: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**3: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**3: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**3: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**3: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**3: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**3: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**3: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**3: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**3: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**3: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**3: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**3: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**3: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**3: 67% (262/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 73% (285/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3: 74% (289/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 75% (293/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 77% (301/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**3: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**3: 96% (375/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x1**3: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**3: 98% (383/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**3: 99% (387/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**3: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x1**3 is: x1**27/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**26/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**25/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**23/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**22/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**21/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - x1**20*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**19*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**17*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**16*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**15*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**14*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**14*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**14*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**14*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x1**3 - x2**2)*(x1**4 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**4*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) + x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**3*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)**2*(x1**2 + x1 + 1)) - x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) - x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) + x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)**2*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**2 + x1 + 1)) 
Progress for pole x2**3: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 191.8s
Progress for pole x2**3: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 50.8s
Progress for pole x2**3: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 25.1s
Progress for pole x2**3: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 16.6s
Progress for pole x2**3: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.3s
Progress for pole x2**3: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.8s
Progress for pole x2**3: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.2s
Progress for pole x2**3: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 7.0s
Progress for pole x2**3: 8% (32/390) - Elapsed: 0.5s, Est. remaining: 6.1s
Progress for pole x2**3: 9% (36/390) - Elapsed: 0.5s, Est. remaining: 5.4s
Progress for pole x2**3: 10% (39/390) - Elapsed: 0.5s, Est. remaining: 4.9s
Progress for pole x2**3: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.5s
Progress for pole x2**3: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.1s
Progress for pole x2**3: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.0s
Progress for pole x2**3: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x2**3: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.4s
Progress for pole x2**3: 16% (63/390) - Elapsed: 0.6s, Est. remaining: 3.2s
Progress for pole x2**3: 17% (67/390) - Elapsed: 0.6s, Est. remaining: 2.9s
Progress for pole x2**3: 18% (71/390) - Elapsed: 0.6s, Est. remaining: 2.8s
Progress for pole x2**3: 19% (75/390) - Elapsed: 0.6s, Est. remaining: 2.6s
Progress for pole x2**3: 20% (78/390) - Elapsed: 0.6s, Est. remaining: 2.5s
Progress for pole x2**3: 21% (82/390) - Elapsed: 0.6s, Est. remaining: 2.4s
Progress for pole x2**3: 22% (86/390) - Elapsed: 0.6s, Est. remaining: 2.3s
Progress for pole x2**3: 23% (90/390) - Elapsed: 0.6s, Est. remaining: 2.2s
Progress for pole x2**3: 24% (94/390) - Elapsed: 0.6s, Est. remaining: 2.0s
Progress for pole x2**3: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x2**3: 26% (102/390) - Elapsed: 0.7s, Est. remaining: 1.9s
Progress for pole x2**3: 27% (106/390) - Elapsed: 0.7s, Est. remaining: 1.8s
Progress for pole x2**3: 28% (110/390) - Elapsed: 0.7s, Est. remaining: 1.8s
Progress for pole x2**3: 29% (114/390) - Elapsed: 0.7s, Est. remaining: 1.7s
Progress for pole x2**3: 30% (117/390) - Elapsed: 0.7s, Est. remaining: 1.7s
Progress for pole x2**3: 31% (121/390) - Elapsed: 0.7s, Est. remaining: 1.6s
Progress for pole x2**3: 32% (125/390) - Elapsed: 0.7s, Est. remaining: 1.6s
Progress for pole x2**3: 33% (129/390) - Elapsed: 0.7s, Est. remaining: 1.5s
Progress for pole x2**3: 34% (133/390) - Elapsed: 0.7s, Est. remaining: 1.4s
Progress for pole x2**3: 35% (137/390) - Elapsed: 0.7s, Est. remaining: 1.4s
Progress for pole x2**3: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**3: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**3: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**3: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**3: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**3: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**3: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**3: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**3: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**3: 45% (176/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**3: 46% (180/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x2**3: 47% (184/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x2**3: 48% (188/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x2**3: 49% (192/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x2**3: 50% (195/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x2**3: 51% (199/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x2**3: 52% (203/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x2**3: 53% (207/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x2**3: 54% (211/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x2**3: 55% (215/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x2**3: 56% (219/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x2**3: 57% (223/390) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x2**3: 58% (227/390) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x2**3: 59% (231/390) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x2**3: 60% (234/390) - Elapsed: 0.8s, Est. remaining: 0.6s
Progress for pole x2**3: 61% (238/390) - Elapsed: 0.8s, Est. remaining: 0.5s
Progress for pole x2**3: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**3: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**3: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**3: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**3: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 67% (262/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 68% (266/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 69% (270/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 70% (273/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 71% (277/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**3: 72% (281/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 73% (285/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 74% (289/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 75% (293/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 76% (297/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 77% (301/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 78% (305/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**3: 79% (309/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 80% (312/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 81% (316/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 82% (320/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 83% (324/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 84% (328/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 85% (332/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x2**3: 86% (336/390) - Elapsed: 0.9s, Est. remaining: 0.1s
Progress for pole x2**3: 87% (340/390) - Elapsed: 0.9s, Est. remaining: 0.1s
Progress for pole x2**3: 88% (344/390) - Elapsed: 0.9s, Est. remaining: 0.1s
Progress for pole x2**3: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**3: 96% (375/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**3: 97% (379/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**3: 98% (383/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**3: 99% (387/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**3: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x2**3 is: x1**4*x2**20/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**4*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**14/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**4*x2**13/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**4*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**4*x2**12/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**19/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**3*x2**15/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**14/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**3*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**3*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**3*x2**12/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**17/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**4*(x1 - x2**2)**2*(x1 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1*x2**4 - 1)*(x1**2*x2 - 1)*(x1**2*x2**3 - 1)*(x2**2 + x2 + 1)**2) + x1**2*x2**16/((x1 - 1)**6*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**3*(x1 - x2**3)*(x1 - x2**4)*(x1**2 - x2)*(x1**2 - x2**3)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)*(x2**2 + x2 + 1)**2) - x1**2*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**14/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x1**2*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**3*(x1 - x2**2)**3*(x1 - x2**3)*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)**2*(x1*x2**3 - 1)**2*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) - x1**2*x2**13/((x1 - 1)**7*(x1 + 1)*(x1 - x2)**5*(x1 + x2)*(x1 - x2**2)**2*(x1 - x2**3)**2*(x1**2 - x2)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**3*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)*(x1**2*x2 - 1)*(x2**2 + x2 + 1)) + x2**27/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**26/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**25/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**23/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**22/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - x2**21/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) 
Progress for pole x1**3/x2: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 204.8s
Progress for pole x1**3/x2: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 51.0s
Progress for pole x1**3/x2: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 25.6s
Progress for pole x1**3/x2: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 16.9s
Progress for pole x1**3/x2: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.7s
Progress for pole x1**3/x2: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 10.1s
Progress for pole x1**3/x2: 6% (24/390) - Elapsed: 0.6s, Est. remaining: 8.4s
Progress for pole x1**3/x2: 7% (28/390) - Elapsed: 0.6s, Est. remaining: 7.2s
Progress for pole x1**3/x2: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.3s
Progress for pole x1**3/x2: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.8s
Progress for pole x1**3/x2: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.4s
Progress for pole x1**3/x2: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.8s
Progress for pole x1**3/x2: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.4s
Progress for pole x1**3/x2: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.2s
Progress for pole x1**3/x2: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x1**3/x2: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x1**3/x2: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.4s
Progress for pole x1**3/x2: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x1**3/x2: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x1**3/x2: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x1**3/x2: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x1**3/x2: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x1**3/x2: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x1**3/x2: 23% (90/390) - Elapsed: 0.8s, Est. remaining: 2.7s
Progress for pole x1**3/x2: 24% (94/390) - Elapsed: 0.8s, Est. remaining: 2.6s
Progress for pole x1**3/x2: 25% (98/390) - Elapsed: 0.8s, Est. remaining: 2.5s
Progress for pole x1**3/x2: 26% (102/390) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x1**3/x2: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.3s
Progress for pole x1**3/x2: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 2.2s
Progress for pole x1**3/x2: 29% (114/390) - Elapsed: 0.9s, Est. remaining: 2.1s
Progress for pole x1**3/x2: 30% (117/390) - Elapsed: 0.9s, Est. remaining: 2.0s
Progress for pole x1**3/x2: 31% (121/390) - Elapsed: 0.9s, Est. remaining: 1.9s
Progress for pole x1**3/x2: 32% (125/390) - Elapsed: 0.9s, Est. remaining: 1.9s
Progress for pole x1**3/x2: 33% (129/390) - Elapsed: 0.9s, Est. remaining: 1.8s
Progress for pole x1**3/x2: 34% (133/390) - Elapsed: 0.9s, Est. remaining: 1.7s
Progress for pole x1**3/x2: 35% (137/390) - Elapsed: 0.9s, Est. remaining: 1.7s
Progress for pole x1**3/x2: 36% (141/390) - Elapsed: 0.9s, Est. remaining: 1.6s
Progress for pole x1**3/x2: 37% (145/390) - Elapsed: 0.9s, Est. remaining: 1.5s
Progress for pole x1**3/x2: 38% (149/390) - Elapsed: 0.9s, Est. remaining: 1.5s
Progress for pole x1**3/x2: 39% (153/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**3/x2: 40% (156/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**3/x2: 41% (160/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**3/x2: 42% (164/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**3/x2: 43% (168/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**3/x2: 44% (172/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**3/x2: 45% (176/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**3/x2: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**3/x2: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3/x2: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3/x2: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3/x2: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3/x2: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3/x2: 52% (203/390) - Elapsed: 1.0s, Est. remaining: 0.9s
Progress for pole x1**3/x2: 53% (207/390) - Elapsed: 1.0s, Est. remaining: 0.8s
Progress for pole x1**3/x2: 54% (211/390) - Elapsed: 1.0s, Est. remaining: 0.8s
Progress for pole x1**3/x2: 55% (215/390) - Elapsed: 1.0s, Est. remaining: 0.8s
Progress for pole x1**3/x2: 56% (219/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3/x2: 57% (223/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3/x2: 58% (227/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3/x2: 59% (231/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3/x2: 60% (234/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3/x2: 61% (238/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3/x2: 62% (242/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3/x2: 63% (246/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3/x2: 64% (250/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3/x2: 65% (254/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3/x2: 66% (258/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3/x2: 67% (262/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3/x2: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3/x2: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 73% (285/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 74% (289/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3/x2: 75% (293/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 76% (297/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 77% (301/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 78% (305/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 79% (309/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 80% (312/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 81% (316/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3/x2: 82% (320/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 83% (324/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 84% (328/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 85% (332/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 86% (336/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 87% (340/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 88% (344/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3/x2: 89% (348/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 90% (351/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 91% (355/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 92% (359/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 93% (363/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 94% (367/390) - Elapsed: 1.2s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 95% (371/390) - Elapsed: 1.2s, Est. remaining: 0.1s
Progress for pole x1**3/x2: 96% (375/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3/x2: 97% (379/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3/x2: 98% (383/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3/x2: 99% (387/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3/x2: 100% (390/390) - Elapsed: 1.3s, Est. remaining: 0.0s
(completed in 1.3s) Residue for candidate pole x1**3/x2 is: 0 
Progress for pole x1**3*x2: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 202.1s
Progress for pole x1**3*x2: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 52.8s
Progress for pole x1**3*x2: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 26.1s
Progress for pole x1**3*x2: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 17.2s
Progress for pole x1**3*x2: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.8s
Progress for pole x1**3*x2: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 10.1s
Progress for pole x1**3*x2: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.3s
Progress for pole x1**3*x2: 7% (28/390) - Elapsed: 0.6s, Est. remaining: 7.2s
Progress for pole x1**3*x2: 8% (32/390) - Elapsed: 0.6s, Est. remaining: 6.4s
Progress for pole x1**3*x2: 9% (36/390) - Elapsed: 0.6s, Est. remaining: 5.9s
Progress for pole x1**3*x2: 10% (39/390) - Elapsed: 0.6s, Est. remaining: 5.4s
Progress for pole x1**3*x2: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.9s
Progress for pole x1**3*x2: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.6s
Progress for pole x1**3*x2: 13% (51/390) - Elapsed: 0.7s, Est. remaining: 4.3s
Progress for pole x1**3*x2: 14% (55/390) - Elapsed: 0.7s, Est. remaining: 4.0s
Progress for pole x1**3*x2: 15% (59/390) - Elapsed: 0.7s, Est. remaining: 3.8s
Progress for pole x1**3*x2: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.6s
Progress for pole x1**3*x2: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.4s
Progress for pole x1**3*x2: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x1**3*x2: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 3.1s
Progress for pole x1**3*x2: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x1**3*x2: 21% (82/390) - Elapsed: 0.8s, Est. remaining: 2.8s
Progress for pole x1**3*x2: 22% (86/390) - Elapsed: 0.8s, Est. remaining: 2.7s
Progress for pole x1**3*x2: 23% (90/390) - Elapsed: 0.8s, Est. remaining: 2.5s
Progress for pole x1**3*x2: 24% (94/390) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x1**3*x2: 25% (98/390) - Elapsed: 0.8s, Est. remaining: 2.4s
Progress for pole x1**3*x2: 26% (102/390) - Elapsed: 0.8s, Est. remaining: 2.3s
Progress for pole x1**3*x2: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.2s
Progress for pole x1**3*x2: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 2.1s
Progress for pole x1**3*x2: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x1**3*x2: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x1**3*x2: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x1**3*x2: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**3*x2: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x1**3*x2: 34% (133/390) - Elapsed: 0.9s, Est. remaining: 1.7s
Progress for pole x1**3*x2: 35% (137/390) - Elapsed: 0.9s, Est. remaining: 1.6s
Progress for pole x1**3*x2: 36% (141/390) - Elapsed: 0.9s, Est. remaining: 1.5s
Progress for pole x1**3*x2: 37% (145/390) - Elapsed: 0.9s, Est. remaining: 1.5s
Progress for pole x1**3*x2: 38% (149/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**3*x2: 39% (153/390) - Elapsed: 0.9s, Est. remaining: 1.4s
Progress for pole x1**3*x2: 40% (156/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**3*x2: 41% (160/390) - Elapsed: 0.9s, Est. remaining: 1.3s
Progress for pole x1**3*x2: 42% (164/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**3*x2: 43% (168/390) - Elapsed: 0.9s, Est. remaining: 1.2s
Progress for pole x1**3*x2: 44% (172/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**3*x2: 45% (176/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**3*x2: 46% (180/390) - Elapsed: 0.9s, Est. remaining: 1.1s
Progress for pole x1**3*x2: 47% (184/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3*x2: 48% (188/390) - Elapsed: 0.9s, Est. remaining: 1.0s
Progress for pole x1**3*x2: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3*x2: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3*x2: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3*x2: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x1**3*x2: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**3*x2: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x1**3*x2: 55% (215/390) - Elapsed: 1.0s, Est. remaining: 0.8s
Progress for pole x1**3*x2: 56% (219/390) - Elapsed: 1.0s, Est. remaining: 0.8s
Progress for pole x1**3*x2: 57% (223/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3*x2: 58% (227/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3*x2: 59% (231/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3*x2: 60% (234/390) - Elapsed: 1.0s, Est. remaining: 0.7s
Progress for pole x1**3*x2: 61% (238/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3*x2: 62% (242/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3*x2: 63% (246/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3*x2: 64% (250/390) - Elapsed: 1.0s, Est. remaining: 0.6s
Progress for pole x1**3*x2: 65% (254/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3*x2: 66% (258/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3*x2: 67% (262/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3*x2: 68% (266/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3*x2: 69% (270/390) - Elapsed: 1.0s, Est. remaining: 0.5s
Progress for pole x1**3*x2: 70% (273/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3*x2: 71% (277/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3*x2: 72% (281/390) - Elapsed: 1.0s, Est. remaining: 0.4s
Progress for pole x1**3*x2: 73% (285/390) - Elapsed: 1.1s, Est. remaining: 0.4s
Progress for pole x1**3*x2: 74% (289/390) - Elapsed: 1.1s, Est. remaining: 0.4s
Progress for pole x1**3*x2: 75% (293/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 76% (297/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 77% (301/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 78% (305/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 79% (309/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 80% (312/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 81% (316/390) - Elapsed: 1.1s, Est. remaining: 0.3s
Progress for pole x1**3*x2: 82% (320/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 83% (324/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 84% (328/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 85% (332/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 86% (336/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 87% (340/390) - Elapsed: 1.1s, Est. remaining: 0.2s
Progress for pole x1**3*x2: 88% (344/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 89% (348/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 90% (351/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 91% (355/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 92% (359/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 93% (363/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 94% (367/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 95% (371/390) - Elapsed: 1.1s, Est. remaining: 0.1s
Progress for pole x1**3*x2: 96% (375/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**3*x2: 97% (379/390) - Elapsed: 1.1s, Est. remaining: 0.0s
Progress for pole x1**3*x2: 98% (383/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3*x2: 99% (387/390) - Elapsed: 1.2s, Est. remaining: 0.0s
Progress for pole x1**3*x2: 100% (390/390) - Elapsed: 1.2s, Est. remaining: 0.0s
(completed in 1.2s) Residue for candidate pole x1**3*x2 is: x1**20*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**19*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**17*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**17*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**16*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**16*x2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**15*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**15*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - 2*x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**14*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**14*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**5/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**2*(x1**3 - x2)*(x2 - 1)**6*(x2 + 1)*(x1*x2 - 1)**5*(x1*x2 + 1)*(x1*x2**2 - 1)*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + 2*x1**13*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**13*x2**2/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) + x1**12*x2**4/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) - x1**12*x2**3/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 - x2)*(x2 - 1)**7*(x2 + 1)*(x1*x2 - 1)**6*(x1*x2 + 1)**2*(x1*x2**2 - 1)**2*(x1**2*x2 - 1)**2*(x1**3*x2 - 1)*(x1**3*x2**2 - 1)*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2) 
Progress for pole x1**4: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 195.7s
Progress for pole x1**4: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 48.6s
Progress for pole x1**4: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 24.4s
Progress for pole x1**4: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 16.4s
Progress for pole x1**4: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 12.2s
Progress for pole x1**4: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.7s
Progress for pole x1**4: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 8.0s
Progress for pole x1**4: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 6.8s
Progress for pole x1**4: 8% (32/390) - Elapsed: 0.5s, Est. remaining: 5.9s
Progress for pole x1**4: 9% (36/390) - Elapsed: 0.5s, Est. remaining: 5.3s
Progress for pole x1**4: 10% (39/390) - Elapsed: 0.5s, Est. remaining: 4.9s
Progress for pole x1**4: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.6s
Progress for pole x1**4: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.2s
Progress for pole x1**4: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.0s
Progress for pole x1**4: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.9s
Progress for pole x1**4: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x1**4: 16% (63/390) - Elapsed: 0.7s, Est. remaining: 3.4s
Progress for pole x1**4: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x1**4: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x1**4: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.8s
Progress for pole x1**4: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x1**4: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x1**4: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x1**4: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x1**4: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x1**4: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x1**4: 26% (102/390) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x1**4: 27% (106/390) - Elapsed: 0.7s, Est. remaining: 2.0s
Progress for pole x1**4: 28% (110/390) - Elapsed: 0.7s, Est. remaining: 1.9s
Progress for pole x1**4: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**4: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x1**4: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x1**4: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**4: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x1**4: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**4: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x1**4: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x1**4: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1**4: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x1**4: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x1**4: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x1**4: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**4: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**4: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x1**4: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x1**4: 45% (176/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x1**4: 46% (180/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x1**4: 47% (184/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x1**4: 48% (188/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x1**4: 49% (192/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1**4: 50% (195/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1**4: 51% (199/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1**4: 52% (203/390) - Elapsed: 0.8s, Est. remaining: 0.8s
Progress for pole x1**4: 53% (207/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x1**4: 54% (211/390) - Elapsed: 0.8s, Est. remaining: 0.7s
Progress for pole x1**4: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**4: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x1**4: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**4: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**4: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**4: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**4: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x1**4: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**4: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**4: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**4: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**4: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x1**4: 67% (262/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 68% (266/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 69% (270/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 70% (273/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 71% (277/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 72% (281/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x1**4: 73% (285/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 74% (289/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 75% (293/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 76% (297/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 77% (301/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 78% (305/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x1**4: 79% (309/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x1**4: 80% (312/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x1**4: 81% (316/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x1**4: 82% (320/390) - Elapsed: 0.9s, Est. remaining: 0.2s
Progress for pole x1**4: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**4: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**4: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**4: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x1**4: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x1**4: 96% (375/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x1**4: 97% (379/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x1**4: 98% (383/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x1**4: 99% (387/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x1**4: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x1**4 is: -x1**24/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + 2*x1**23/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) - 2*x1**21/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) + x1**20/((x1 - 1)**11*(x1 + 1)**4*(x1 - x2)**4*(x1**2 + 1)*(x1**2 - x2)**3*(x1**3 - x2)**2*(x1**4 - x2)*(x2 - 1)**5*(x1*x2 - 1)**4*(x1**2*x2 - 1)**3*(x1**3*x2 - 1)**2*(x1**4*x2 - 1)*(x1**2 + x1 + 1)**2*(x1**4 + x1**3 + x1**2 + x1 + 1)) 
Progress for pole x2**4: 0% (1/390) - Elapsed: 0.5s, Est. remaining: 194.0s
Progress for pole x2**4: 1% (4/390) - Elapsed: 0.5s, Est. remaining: 48.2s
Progress for pole x2**4: 2% (8/390) - Elapsed: 0.5s, Est. remaining: 23.8s
Progress for pole x2**4: 3% (12/390) - Elapsed: 0.5s, Est. remaining: 15.8s
Progress for pole x2**4: 4% (16/390) - Elapsed: 0.5s, Est. remaining: 11.7s
Progress for pole x2**4: 5% (20/390) - Elapsed: 0.5s, Est. remaining: 9.3s
Progress for pole x2**4: 6% (24/390) - Elapsed: 0.5s, Est. remaining: 7.9s
Progress for pole x2**4: 7% (28/390) - Elapsed: 0.5s, Est. remaining: 6.8s
Progress for pole x2**4: 8% (32/390) - Elapsed: 0.5s, Est. remaining: 5.9s
Progress for pole x2**4: 9% (36/390) - Elapsed: 0.5s, Est. remaining: 5.2s
Progress for pole x2**4: 10% (39/390) - Elapsed: 0.5s, Est. remaining: 4.9s
Progress for pole x2**4: 11% (43/390) - Elapsed: 0.6s, Est. remaining: 4.4s
Progress for pole x2**4: 12% (47/390) - Elapsed: 0.6s, Est. remaining: 4.4s
Progress for pole x2**4: 13% (51/390) - Elapsed: 0.6s, Est. remaining: 4.0s
Progress for pole x2**4: 14% (55/390) - Elapsed: 0.6s, Est. remaining: 3.8s
Progress for pole x2**4: 15% (59/390) - Elapsed: 0.6s, Est. remaining: 3.6s
Progress for pole x2**4: 16% (63/390) - Elapsed: 0.6s, Est. remaining: 3.4s
Progress for pole x2**4: 17% (67/390) - Elapsed: 0.7s, Est. remaining: 3.2s
Progress for pole x2**4: 18% (71/390) - Elapsed: 0.7s, Est. remaining: 3.0s
Progress for pole x2**4: 19% (75/390) - Elapsed: 0.7s, Est. remaining: 2.9s
Progress for pole x2**4: 20% (78/390) - Elapsed: 0.7s, Est. remaining: 2.7s
Progress for pole x2**4: 21% (82/390) - Elapsed: 0.7s, Est. remaining: 2.6s
Progress for pole x2**4: 22% (86/390) - Elapsed: 0.7s, Est. remaining: 2.5s
Progress for pole x2**4: 23% (90/390) - Elapsed: 0.7s, Est. remaining: 2.4s
Progress for pole x2**4: 24% (94/390) - Elapsed: 0.7s, Est. remaining: 2.3s
Progress for pole x2**4: 25% (98/390) - Elapsed: 0.7s, Est. remaining: 2.2s
Progress for pole x2**4: 26% (102/390) - Elapsed: 0.7s, Est. remaining: 2.1s
Progress for pole x2**4: 27% (106/390) - Elapsed: 0.8s, Est. remaining: 2.0s
Progress for pole x2**4: 28% (110/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x2**4: 29% (114/390) - Elapsed: 0.8s, Est. remaining: 1.9s
Progress for pole x2**4: 30% (117/390) - Elapsed: 0.8s, Est. remaining: 1.8s
Progress for pole x2**4: 31% (121/390) - Elapsed: 0.8s, Est. remaining: 1.7s
Progress for pole x2**4: 32% (125/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**4: 33% (129/390) - Elapsed: 0.8s, Est. remaining: 1.6s
Progress for pole x2**4: 34% (133/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x2**4: 35% (137/390) - Elapsed: 0.8s, Est. remaining: 1.5s
Progress for pole x2**4: 36% (141/390) - Elapsed: 0.8s, Est. remaining: 1.4s
Progress for pole x2**4: 37% (145/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**4: 38% (149/390) - Elapsed: 0.8s, Est. remaining: 1.3s
Progress for pole x2**4: 39% (153/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**4: 40% (156/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**4: 41% (160/390) - Elapsed: 0.8s, Est. remaining: 1.2s
Progress for pole x2**4: 42% (164/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**4: 43% (168/390) - Elapsed: 0.8s, Est. remaining: 1.1s
Progress for pole x2**4: 44% (172/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**4: 45% (176/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**4: 46% (180/390) - Elapsed: 0.8s, Est. remaining: 1.0s
Progress for pole x2**4: 47% (184/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x2**4: 48% (188/390) - Elapsed: 0.8s, Est. remaining: 0.9s
Progress for pole x2**4: 49% (192/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**4: 50% (195/390) - Elapsed: 0.9s, Est. remaining: 0.9s
Progress for pole x2**4: 51% (199/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**4: 52% (203/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**4: 53% (207/390) - Elapsed: 0.9s, Est. remaining: 0.8s
Progress for pole x2**4: 54% (211/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**4: 55% (215/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**4: 56% (219/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**4: 57% (223/390) - Elapsed: 0.9s, Est. remaining: 0.7s
Progress for pole x2**4: 58% (227/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**4: 59% (231/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**4: 60% (234/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**4: 61% (238/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**4: 62% (242/390) - Elapsed: 0.9s, Est. remaining: 0.6s
Progress for pole x2**4: 63% (246/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**4: 64% (250/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**4: 65% (254/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**4: 66% (258/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**4: 67% (262/390) - Elapsed: 0.9s, Est. remaining: 0.5s
Progress for pole x2**4: 68% (266/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**4: 69% (270/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**4: 70% (273/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**4: 71% (277/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**4: 72% (281/390) - Elapsed: 0.9s, Est. remaining: 0.4s
Progress for pole x2**4: 73% (285/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**4: 74% (289/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**4: 75% (293/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**4: 76% (297/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**4: 77% (301/390) - Elapsed: 0.9s, Est. remaining: 0.3s
Progress for pole x2**4: 78% (305/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**4: 79% (309/390) - Elapsed: 1.0s, Est. remaining: 0.3s
Progress for pole x2**4: 80% (312/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 81% (316/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 82% (320/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 83% (324/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 84% (328/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 85% (332/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 86% (336/390) - Elapsed: 1.0s, Est. remaining: 0.2s
Progress for pole x2**4: 87% (340/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 88% (344/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 89% (348/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 90% (351/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 91% (355/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 92% (359/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 93% (363/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 94% (367/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 95% (371/390) - Elapsed: 1.0s, Est. remaining: 0.1s
Progress for pole x2**4: 96% (375/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**4: 97% (379/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**4: 98% (383/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**4: 99% (387/390) - Elapsed: 1.0s, Est. remaining: 0.0s
Progress for pole x2**4: 100% (390/390) - Elapsed: 1.1s, Est. remaining: 0.0s
(completed in 1.1s) Residue for candidate pole x2**4 is: -x2**24/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + 2*x2**23/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) - 2*x2**21/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) + x2**20/((x1 - 1)**5*(x1 - x2)**4*(x1 - x2**2)**3*(x1 - x2**3)**2*(x1 - x2**4)*(x2 - 1)**11*(x2 + 1)**4*(x2**2 + 1)*(x1*x2 - 1)**4*(x1*x2**2 - 1)**3*(x1*x2**3 - 1)**2*(x1*x2**4 - 1)*(x2**2 + x2 + 1)**2*(x2**4 + x2**3 + x2**2 + x2 + 1)) 
Time taken for integration over variable t1: 64.89788269996643 seconds

Saving intermediate result to Mathematica file: intermediate_result_N5.m
Converting 1635 terms to Mathematica format in parallel
Mathematica conversion: 15% (256/1635) - Batch 1/7 - Elapsed: 0.4s, Est. remaining: 2.3s
Mathematica conversion: 31% (512/1635) - Batch 2/7 - Elapsed: 0.8s, Est. remaining: 1.9s
Mathematica conversion: 46% (768/1635) - Batch 3/7 - Elapsed: 1.3s, Est. remaining: 1.4s
Mathematica conversion: 62% (1024/1635) - Batch 4/7 - Elapsed: 1.7s, Est. remaining: 1.0s
Mathematica conversion: 78% (1280/1635) - Batch 5/7 - Elapsed: 2.1s, Est. remaining: 0.6s
Mathematica conversion: 93% (1536/1635) - Batch 6/7 - Elapsed: 2.5s, Est. remaining: 0.2s
Mathematica conversion: 100% (1635/1635) - Batch 7/7 - Elapsed: 2.9s, Est. remaining: 0.0s
Intermediate result successfully saved to intermediate_result_N5.m
Total intermediate Mathematica export time: 2.905 seconds
Starting final factorization...
Large expression detected with 1635 terms
Using batch processing with batch_size=2
Iteration 1: Processing 1635 terms in 818 batches
Batch progress: 0% (1/818) - Elapsed: 0.5s, Est. remaining: 392.0s
Batch progress: 1% (9/818) - Elapsed: 0.5s, Est. remaining: 44.5s
Batch progress: 2% (17/818) - Elapsed: 0.5s, Est. remaining: 23.8s
Batch progress: 3% (25/818) - Elapsed: 0.5s, Est. remaining: 16.5s
Batch progress: 4% (33/818) - Elapsed: 0.5s, Est. remaining: 12.6s
Batch progress: 5% (41/818) - Elapsed: 0.5s, Est. remaining: 10.2s
Batch progress: 6% (50/818) - Elapsed: 0.6s, Est. remaining: 8.5s
Batch progress: 7% (58/818) - Elapsed: 0.6s, Est. remaining: 7.4s
Batch progress: 8% (66/818) - Elapsed: 0.6s, Est. remaining: 6.6s
Batch progress: 9% (74/818) - Elapsed: 0.6s, Est. remaining: 5.9s
Batch progress: 10% (82/818) - Elapsed: 0.6s, Est. remaining: 5.3s
Batch progress: 11% (90/818) - Elapsed: 0.6s, Est. remaining: 4.8s
Batch progress: 12% (99/818) - Elapsed: 0.6s, Est. remaining: 4.4s
Batch progress: 13% (107/818) - Elapsed: 0.6s, Est. remaining: 4.1s
Batch progress: 14% (115/818) - Elapsed: 0.6s, Est. remaining: 3.8s
Batch progress: 15% (123/818) - Elapsed: 0.6s, Est. remaining: 3.5s
Batch progress: 16% (131/818) - Elapsed: 0.6s, Est. remaining: 3.3s
Batch progress: 17% (140/818) - Elapsed: 0.6s, Est. remaining: 3.1s
Batch progress: 18% (148/818) - Elapsed: 0.6s, Est. remaining: 2.9s
Batch progress: 19% (156/818) - Elapsed: 0.7s, Est. remaining: 2.8s
Batch progress: 20% (164/818) - Elapsed: 0.7s, Est. remaining: 2.6s
Batch progress: 21% (172/818) - Elapsed: 0.7s, Est. remaining: 2.5s
Batch progress: 22% (180/818) - Elapsed: 0.7s, Est. remaining: 2.4s
Batch progress: 23% (189/818) - Elapsed: 0.7s, Est. remaining: 2.3s
Batch progress: 24% (197/818) - Elapsed: 0.7s, Est. remaining: 2.2s
Batch progress: 25% (205/818) - Elapsed: 0.7s, Est. remaining: 2.1s
Batch progress: 26% (213/818) - Elapsed: 0.7s, Est. remaining: 2.0s
Batch progress: 27% (221/818) - Elapsed: 0.7s, Est. remaining: 1.9s
Batch progress: 28% (230/818) - Elapsed: 0.7s, Est. remaining: 1.9s
Batch progress: 29% (238/818) - Elapsed: 0.7s, Est. remaining: 1.8s
Batch progress: 30% (246/818) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 31% (254/818) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 32% (262/818) - Elapsed: 0.8s, Est. remaining: 1.6s
Batch progress: 33% (270/818) - Elapsed: 0.8s, Est. remaining: 1.5s
Batch progress: 34% (279/818) - Elapsed: 0.8s, Est. remaining: 1.5s
Batch progress: 35% (287/818) - Elapsed: 0.8s, Est. remaining: 1.4s
Batch progress: 36% (295/818) - Elapsed: 0.8s, Est. remaining: 1.4s
Batch progress: 37% (303/818) - Elapsed: 0.8s, Est. remaining: 1.3s
Batch progress: 38% (311/818) - Elapsed: 0.8s, Est. remaining: 1.3s
Batch progress: 39% (320/818) - Elapsed: 0.8s, Est. remaining: 1.3s
Batch progress: 40% (328/818) - Elapsed: 0.8s, Est. remaining: 1.2s
Batch progress: 41% (336/818) - Elapsed: 0.8s, Est. remaining: 1.2s
Batch progress: 42% (344/818) - Elapsed: 0.8s, Est. remaining: 1.2s
Batch progress: 43% (352/818) - Elapsed: 0.8s, Est. remaining: 1.1s
Batch progress: 44% (360/818) - Elapsed: 0.9s, Est. remaining: 1.1s
Batch progress: 45% (369/818) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 46% (377/818) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 47% (385/818) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 48% (393/818) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 49% (401/818) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 50% (409/818) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 51% (418/818) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 52% (426/818) - Elapsed: 0.9s, Est. remaining: 0.8s
Batch progress: 53% (434/818) - Elapsed: 0.9s, Est. remaining: 0.8s
Batch progress: 54% (442/818) - Elapsed: 0.9s, Est. remaining: 0.8s
Batch progress: 55% (450/818) - Elapsed: 0.9s, Est. remaining: 0.8s
Batch progress: 56% (459/818) - Elapsed: 0.9s, Est. remaining: 0.7s
Batch progress: 57% (467/818) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 58% (475/818) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 59% (483/818) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 60% (491/818) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 61% (499/818) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 62% (508/818) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 63% (516/818) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 64% (524/818) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 65% (532/818) - Elapsed: 1.0s, Est. remaining: 0.5s
Batch progress: 66% (540/818) - Elapsed: 1.0s, Est. remaining: 0.5s
Batch progress: 67% (549/818) - Elapsed: 1.0s, Est. remaining: 0.5s
Batch progress: 68% (557/818) - Elapsed: 1.0s, Est. remaining: 0.5s
Batch progress: 69% (565/818) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 70% (573/818) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 71% (581/818) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 72% (589/818) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 73% (598/818) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 74% (606/818) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 75% (614/818) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 76% (622/818) - Elapsed: 1.2s, Est. remaining: 0.4s
Batch progress: 77% (630/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 78% (639/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 79% (647/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 80% (655/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 81% (663/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 82% (671/818) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 83% (679/818) - Elapsed: 1.2s, Est. remaining: 0.2s
Batch progress: 84% (688/818) - Elapsed: 1.2s, Est. remaining: 0.2s
Batch progress: 85% (696/818) - Elapsed: 1.2s, Est. remaining: 0.2s
Batch progress: 86% (704/818) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 87% (712/818) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 88% (720/818) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 89% (729/818) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 90% (737/818) - Elapsed: 1.3s, Est. remaining: 0.1s
Batch progress: 91% (745/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 92% (753/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 93% (761/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 94% (769/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 95% (778/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 96% (786/818) - Elapsed: 1.4s, Est. remaining: 0.1s
Batch progress: 97% (794/818) - Elapsed: 1.5s, Est. remaining: 0.0s
Batch progress: 98% (802/818) - Elapsed: 1.5s, Est. remaining: 0.0s
Batch progress: 99% (810/818) - Elapsed: 1.7s, Est. remaining: 0.0s
Batch progress: 100% (818/818) - Elapsed: 1.8s, Est. remaining: 0.0s
Iteration 1 completed in 3.730 seconds
Reduced to 818 terms
Iteration 2: Processing 818 terms in 409 batches
Batch progress: 0% (1/409) - Elapsed: 0.5s, Est. remaining: 198.6s
Batch progress: 1% (5/409) - Elapsed: 0.5s, Est. remaining: 40.1s
Batch progress: 2% (9/409) - Elapsed: 0.5s, Est. remaining: 22.6s
Batch progress: 3% (13/409) - Elapsed: 0.5s, Est. remaining: 15.9s
Batch progress: 4% (17/409) - Elapsed: 0.5s, Est. remaining: 12.5s
Batch progress: 5% (21/409) - Elapsed: 0.6s, Est. remaining: 10.4s
Batch progress: 6% (25/409) - Elapsed: 0.6s, Est. remaining: 8.7s
Batch progress: 7% (29/409) - Elapsed: 0.6s, Est. remaining: 7.5s
Batch progress: 8% (33/409) - Elapsed: 0.6s, Est. remaining: 6.6s
Batch progress: 9% (37/409) - Elapsed: 0.6s, Est. remaining: 5.9s
Batch progress: 10% (41/409) - Elapsed: 0.6s, Est. remaining: 5.3s
Batch progress: 11% (45/409) - Elapsed: 0.6s, Est. remaining: 4.9s
Batch progress: 12% (50/409) - Elapsed: 0.6s, Est. remaining: 4.4s
Batch progress: 13% (54/409) - Elapsed: 0.6s, Est. remaining: 4.1s
Batch progress: 14% (58/409) - Elapsed: 0.6s, Est. remaining: 3.8s
Batch progress: 15% (62/409) - Elapsed: 0.6s, Est. remaining: 3.5s
Batch progress: 16% (66/409) - Elapsed: 0.6s, Est. remaining: 3.3s
Batch progress: 17% (70/409) - Elapsed: 0.6s, Est. remaining: 3.1s
Batch progress: 18% (74/409) - Elapsed: 0.6s, Est. remaining: 2.9s
Batch progress: 19% (78/409) - Elapsed: 0.6s, Est. remaining: 2.7s
Batch progress: 20% (82/409) - Elapsed: 0.7s, Est. remaining: 2.6s
Batch progress: 21% (86/409) - Elapsed: 0.7s, Est. remaining: 2.5s
Batch progress: 22% (90/409) - Elapsed: 0.7s, Est. remaining: 2.3s
Batch progress: 23% (95/409) - Elapsed: 0.7s, Est. remaining: 2.2s
Batch progress: 24% (99/409) - Elapsed: 0.7s, Est. remaining: 2.1s
Batch progress: 25% (103/409) - Elapsed: 0.7s, Est. remaining: 2.0s
Batch progress: 26% (107/409) - Elapsed: 0.7s, Est. remaining: 2.0s
Batch progress: 27% (111/409) - Elapsed: 0.7s, Est. remaining: 1.9s
Batch progress: 28% (115/409) - Elapsed: 0.7s, Est. remaining: 1.8s
Batch progress: 29% (119/409) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 30% (123/409) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 31% (127/409) - Elapsed: 0.7s, Est. remaining: 1.6s
Batch progress: 32% (131/409) - Elapsed: 0.7s, Est. remaining: 1.5s
Batch progress: 33% (135/409) - Elapsed: 0.7s, Est. remaining: 1.5s
Batch progress: 34% (140/409) - Elapsed: 0.7s, Est. remaining: 1.4s
Batch progress: 35% (144/409) - Elapsed: 0.7s, Est. remaining: 1.4s
Batch progress: 36% (148/409) - Elapsed: 0.7s, Est. remaining: 1.3s
Batch progress: 37% (152/409) - Elapsed: 0.8s, Est. remaining: 1.3s
Batch progress: 38% (156/409) - Elapsed: 0.8s, Est. remaining: 1.2s
Batch progress: 39% (160/409) - Elapsed: 0.8s, Est. remaining: 1.2s
Batch progress: 40% (164/409) - Elapsed: 0.8s, Est. remaining: 1.1s
Batch progress: 41% (168/409) - Elapsed: 0.8s, Est. remaining: 1.1s
Batch progress: 42% (172/409) - Elapsed: 0.8s, Est. remaining: 1.1s
Batch progress: 43% (176/409) - Elapsed: 0.8s, Est. remaining: 1.0s
Batch progress: 44% (180/409) - Elapsed: 0.8s, Est. remaining: 1.0s
Batch progress: 45% (185/409) - Elapsed: 0.8s, Est. remaining: 1.0s
Batch progress: 46% (189/409) - Elapsed: 0.8s, Est. remaining: 0.9s
Batch progress: 47% (193/409) - Elapsed: 0.8s, Est. remaining: 0.9s
Batch progress: 48% (197/409) - Elapsed: 0.8s, Est. remaining: 0.9s
Batch progress: 49% (201/409) - Elapsed: 0.8s, Est. remaining: 0.8s
Batch progress: 50% (205/409) - Elapsed: 0.8s, Est. remaining: 0.8s
Batch progress: 51% (209/409) - Elapsed: 0.8s, Est. remaining: 0.8s
Batch progress: 52% (213/409) - Elapsed: 0.8s, Est. remaining: 0.8s
Batch progress: 53% (217/409) - Elapsed: 0.8s, Est. remaining: 0.7s
Batch progress: 54% (221/409) - Elapsed: 0.8s, Est. remaining: 0.7s
Batch progress: 55% (225/409) - Elapsed: 0.8s, Est. remaining: 0.7s
Batch progress: 56% (230/409) - Elapsed: 0.9s, Est. remaining: 0.7s
Batch progress: 57% (234/409) - Elapsed: 0.9s, Est. remaining: 0.6s
Batch progress: 58% (238/409) - Elapsed: 0.9s, Est. remaining: 0.6s
Batch progress: 59% (242/409) - Elapsed: 0.9s, Est. remaining: 0.6s
Batch progress: 60% (246/409) - Elapsed: 0.9s, Est. remaining: 0.6s
Batch progress: 61% (250/409) - Elapsed: 0.9s, Est. remaining: 0.6s
Batch progress: 62% (254/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 63% (258/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 64% (262/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 65% (266/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 66% (270/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 67% (275/409) - Elapsed: 0.9s, Est. remaining: 0.5s
Batch progress: 68% (279/409) - Elapsed: 0.9s, Est. remaining: 0.4s
Batch progress: 69% (283/409) - Elapsed: 1.0s, Est. remaining: 0.4s
Batch progress: 70% (287/409) - Elapsed: 1.0s, Est. remaining: 0.4s
Batch progress: 71% (291/409) - Elapsed: 1.0s, Est. remaining: 0.4s
Batch progress: 72% (295/409) - Elapsed: 1.0s, Est. remaining: 0.4s
Batch progress: 73% (299/409) - Elapsed: 1.0s, Est. remaining: 0.4s
Batch progress: 74% (303/409) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 75% (307/409) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 76% (311/409) - Elapsed: 1.1s, Est. remaining: 0.4s
Batch progress: 77% (315/409) - Elapsed: 1.1s, Est. remaining: 0.3s
Batch progress: 78% (320/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 79% (324/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 80% (328/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 81% (332/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 82% (336/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 83% (340/409) - Elapsed: 1.2s, Est. remaining: 0.3s
Batch progress: 84% (344/409) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 85% (348/409) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 86% (352/409) - Elapsed: 1.3s, Est. remaining: 0.2s
Batch progress: 87% (356/409) - Elapsed: 1.4s, Est. remaining: 0.2s
Batch progress: 88% (360/409) - Elapsed: 1.4s, Est. remaining: 0.2s
Batch progress: 89% (365/409) - Elapsed: 1.4s, Est. remaining: 0.2s
Batch progress: 90% (369/409) - Elapsed: 1.4s, Est. remaining: 0.2s
Batch progress: 91% (373/409) - Elapsed: 1.5s, Est. remaining: 0.1s
Batch progress: 92% (377/409) - Elapsed: 1.5s, Est. remaining: 0.1s
Batch progress: 93% (381/409) - Elapsed: 1.6s, Est. remaining: 0.1s
Batch progress: 94% (385/409) - Elapsed: 1.7s, Est. remaining: 0.1s
Batch progress: 95% (389/409) - Elapsed: 1.7s, Est. remaining: 0.1s
Batch progress: 96% (393/409) - Elapsed: 1.8s, Est. remaining: 0.1s
Batch progress: 97% (397/409) - Elapsed: 1.9s, Est. remaining: 0.1s
Batch progress: 98% (401/409) - Elapsed: 2.0s, Est. remaining: 0.0s
Batch progress: 99% (405/409) - Elapsed: 3.4s, Est. remaining: 0.0s
Batch progress: 100% (409/409) - Elapsed: 6.9s, Est. remaining: 0.0s
Iteration 2 completed in 7.527 seconds
Reduced to 409 terms
Iteration 3: Processing 409 terms in 205 batches
Batch progress: 0% (1/205) - Elapsed: 0.5s, Est. remaining: 93.5s
Batch progress: 1% (3/205) - Elapsed: 0.5s, Est. remaining: 32.0s
Batch progress: 2% (5/205) - Elapsed: 0.5s, Est. remaining: 19.6s
Batch progress: 3% (7/205) - Elapsed: 0.5s, Est. remaining: 13.9s
Batch progress: 4% (9/205) - Elapsed: 0.5s, Est. remaining: 10.7s
Batch progress: 5% (11/205) - Elapsed: 0.5s, Est. remaining: 8.7s
Batch progress: 6% (13/205) - Elapsed: 0.5s, Est. remaining: 7.3s
Batch progress: 7% (15/205) - Elapsed: 0.5s, Est. remaining: 6.2s
Batch progress: 8% (17/205) - Elapsed: 0.5s, Est. remaining: 5.5s
Batch progress: 9% (19/205) - Elapsed: 0.5s, Est. remaining: 4.9s
Batch progress: 10% (21/205) - Elapsed: 0.5s, Est. remaining: 4.4s
Batch progress: 11% (23/205) - Elapsed: 0.5s, Est. remaining: 4.1s
Batch progress: 12% (25/205) - Elapsed: 0.5s, Est. remaining: 3.7s
Batch progress: 13% (27/205) - Elapsed: 0.5s, Est. remaining: 3.4s
Batch progress: 14% (29/205) - Elapsed: 0.5s, Est. remaining: 3.3s
Batch progress: 15% (31/205) - Elapsed: 0.6s, Est. remaining: 3.1s
Batch progress: 16% (33/205) - Elapsed: 0.6s, Est. remaining: 2.9s
Batch progress: 17% (35/205) - Elapsed: 0.6s, Est. remaining: 2.7s
Batch progress: 18% (37/205) - Elapsed: 0.6s, Est. remaining: 2.6s
Batch progress: 19% (39/205) - Elapsed: 0.6s, Est. remaining: 2.4s
Batch progress: 20% (41/205) - Elapsed: 0.6s, Est. remaining: 2.3s
Batch progress: 21% (44/205) - Elapsed: 0.6s, Est. remaining: 2.1s
Batch progress: 22% (46/205) - Elapsed: 0.6s, Est. remaining: 2.0s
Batch progress: 23% (48/205) - Elapsed: 0.6s, Est. remaining: 2.0s
Batch progress: 24% (50/205) - Elapsed: 0.6s, Est. remaining: 1.9s
Batch progress: 25% (52/205) - Elapsed: 0.6s, Est. remaining: 1.8s
Batch progress: 26% (54/205) - Elapsed: 0.6s, Est. remaining: 1.8s
Batch progress: 27% (56/205) - Elapsed: 0.6s, Est. remaining: 1.7s
Batch progress: 28% (58/205) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 29% (60/205) - Elapsed: 0.7s, Est. remaining: 1.6s
Batch progress: 30% (62/205) - Elapsed: 0.7s, Est. remaining: 1.6s
Batch progress: 31% (64/205) - Elapsed: 0.7s, Est. remaining: 1.5s
Batch progress: 32% (66/205) - Elapsed: 0.7s, Est. remaining: 1.5s
Batch progress: 33% (68/205) - Elapsed: 0.7s, Est. remaining: 1.4s
Batch progress: 34% (70/205) - Elapsed: 0.7s, Est. remaining: 1.4s
Batch progress: 35% (72/205) - Elapsed: 0.7s, Est. remaining: 1.3s
Batch progress: 36% (74/205) - Elapsed: 0.7s, Est. remaining: 1.3s
Batch progress: 37% (76/205) - Elapsed: 0.7s, Est. remaining: 1.2s
Batch progress: 38% (78/205) - Elapsed: 0.7s, Est. remaining: 1.2s
Batch progress: 39% (80/205) - Elapsed: 0.7s, Est. remaining: 1.2s
Batch progress: 40% (82/205) - Elapsed: 0.7s, Est. remaining: 1.1s
Batch progress: 41% (85/205) - Elapsed: 0.8s, Est. remaining: 1.1s
Batch progress: 42% (87/205) - Elapsed: 0.8s, Est. remaining: 1.0s
Batch progress: 43% (89/205) - Elapsed: 0.8s, Est. remaining: 1.0s
Batch progress: 44% (91/205) - Elapsed: 0.9s, Est. remaining: 1.1s
Batch progress: 45% (93/205) - Elapsed: 0.9s, Est. remaining: 1.1s
Batch progress: 46% (95/205) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 47% (97/205) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 48% (99/205) - Elapsed: 0.9s, Est. remaining: 1.0s
Batch progress: 49% (101/205) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 50% (103/205) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 51% (105/205) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 52% (107/205) - Elapsed: 0.9s, Est. remaining: 0.9s
Batch progress: 53% (109/205) - Elapsed: 0.9s, Est. remaining: 0.8s
Batch progress: 54% (111/205) - Elapsed: 1.0s, Est. remaining: 0.8s
Batch progress: 55% (113/205) - Elapsed: 1.0s, Est. remaining: 0.8s
Batch progress: 56% (115/205) - Elapsed: 1.0s, Est. remaining: 0.8s
Batch progress: 57% (117/205) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 58% (119/205) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 59% (121/205) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 60% (123/205) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 61% (126/205) - Elapsed: 1.0s, Est. remaining: 0.7s
Batch progress: 62% (128/205) - Elapsed: 1.0s, Est. remaining: 0.6s
Batch progress: 63% (130/205) - Elapsed: 1.1s, Est. remaining: 0.6s
Batch progress: 64% (132/205) - Elapsed: 1.1s, Est. remaining: 0.6s
Batch progress: 65% (134/205) - Elapsed: 1.1s, Est. remaining: 0.6s
Batch progress: 66% (136/205) - Elapsed: 1.1s, Est. remaining: 0.6s
Batch progress: 67% (138/205) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 68% (140/205) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 69% (142/205) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 70% (144/205) - Elapsed: 1.1s, Est. remaining: 0.5s
Batch progress: 71% (146/205) - Elapsed: 1.2s, Est. remaining: 0.5s
Batch progress: 72% (148/205) - Elapsed: 1.2s, Est. remaining: 0.5s
Batch progress: 73% (150/205) - Elapsed: 1.2s, Est. remaining: 0.4s
Batch progress: 74% (152/205) - Elapsed: 1.2s, Est. remaining: 0.4s
Batch progress: 75% (154/205) - Elapsed: 1.2s, Est. remaining: 0.4s
Batch progress: 76% (156/205) - Elapsed: 1.3s, Est. remaining: 0.4s
Batch progress: 77% (158/205) - Elapsed: 1.3s, Est. remaining: 0.4s
Batch progress: 78% (160/205) - Elapsed: 1.3s, Est. remaining: 0.4s
Batch progress: 79% (162/205) - Elapsed: 1.4s, Est. remaining: 0.4s
Batch progress: 80% (164/205) - Elapsed: 1.4s, Est. remaining: 0.4s
Batch progress: 81% (167/205) - Elapsed: 1.5s, Est. remaining: 0.3s
Batch progress: 82% (169/205) - Elapsed: 1.5s, Est. remaining: 0.3s
Batch progress: 83% (171/205) - Elapsed: 1.6s, Est. remaining: 0.3s
Batch progress: 84% (173/205) - Elapsed: 1.7s, Est. remaining: 0.3s
Batch progress: 85% (175/205) - Elapsed: 1.8s, Est. remaining: 0.3s
Batch progress: 86% (177/205) - Elapsed: 1.8s, Est. remaining: 0.3s
Batch progress: 87% (179/205) - Elapsed: 1.9s, Est. remaining: 0.3s
Batch progress: 88% (181/205) - Elapsed: 1.9s, Est. remaining: 0.3s
Batch progress: 89% (183/205) - Elapsed: 2.2s, Est. remaining: 0.3s
Batch progress: 90% (185/205) - Elapsed: 2.3s, Est. remaining: 0.2s
Batch progress: 91% (187/205) - Elapsed: 2.3s, Est. remaining: 0.2s
Batch progress: 92% (189/205) - Elapsed: 2.4s, Est. remaining: 0.2s
Batch progress: 93% (191/205) - Elapsed: 2.5s, Est. remaining: 0.2s
Batch progress: 94% (193/205) - Elapsed: 2.5s, Est. remaining: 0.2s
Batch progress: 95% (195/205) - Elapsed: 2.6s, Est. remaining: 0.1s
Batch progress: 96% (197/205) - Elapsed: 2.8s, Est. remaining: 0.1s
Batch progress: 97% (199/205) - Elapsed: 2.9s, Est. remaining: 0.1s
Batch progress: 98% (201/205) - Elapsed: 3.1s, Est. remaining: 0.1s
Batch progress: 99% (203/205) - Elapsed: 4.7s, Est. remaining: 0.0s
Batch progress: 100% (205/205) - Elapsed: 12.7s, Est. remaining: 0.0s
Iteration 3 completed in 12.973 seconds
Reduced to 205 terms
Iteration 4: Processing 205 terms in 103 batches
Batch progress: 0% (1/103) - Elapsed: 0.5s, Est. remaining: 50.4s
Batch progress: 1% (2/103) - Elapsed: 0.5s, Est. remaining: 25.3s
Batch progress: 2% (3/103) - Elapsed: 0.5s, Est. remaining: 16.7s
Batch progress: 3% (4/103) - Elapsed: 0.5s, Est. remaining: 12.8s
Batch progress: 4% (5/103) - Elapsed: 0.5s, Est. remaining: 10.2s
Batch progress: 5% (6/103) - Elapsed: 0.5s, Est. remaining: 8.4s
Batch progress: 6% (7/103) - Elapsed: 0.5s, Est. remaining: 7.3s
Batch progress: 7% (8/103) - Elapsed: 0.5s, Est. remaining: 6.3s
Batch progress: 8% (9/103) - Elapsed: 0.6s, Est. remaining: 5.8s
Batch progress: 9% (10/103) - Elapsed: 0.6s, Est. remaining: 5.3s
Batch progress: 10% (11/103) - Elapsed: 0.6s, Est. remaining: 4.7s
Batch progress: 11% (12/103) - Elapsed: 0.6s, Est. remaining: 4.3s
Batch progress: 12% (13/103) - Elapsed: 0.6s, Est. remaining: 3.9s
Batch progress: 13% (14/103) - Elapsed: 0.6s, Est. remaining: 3.6s
Batch progress: 14% (15/103) - Elapsed: 0.6s, Est. remaining: 3.4s
Batch progress: 15% (16/103) - Elapsed: 0.6s, Est. remaining: 3.2s
Batch progress: 16% (17/103) - Elapsed: 0.6s, Est. remaining: 3.0s
Batch progress: 17% (18/103) - Elapsed: 0.6s, Est. remaining: 2.8s
Batch progress: 18% (19/103) - Elapsed: 0.6s, Est. remaining: 2.6s
Batch progress: 19% (20/103) - Elapsed: 0.6s, Est. remaining: 2.5s
Batch progress: 20% (21/103) - Elapsed: 0.6s, Est. remaining: 2.4s
Batch progress: 21% (22/103) - Elapsed: 0.6s, Est. remaining: 2.3s
Batch progress: 22% (23/103) - Elapsed: 0.6s, Est. remaining: 2.2s
Batch progress: 23% (24/103) - Elapsed: 0.6s, Est. remaining: 2.1s
Batch progress: 24% (25/103) - Elapsed: 0.7s, Est. remaining: 2.0s
Batch progress: 25% (26/103) - Elapsed: 0.7s, Est. remaining: 2.0s
Batch progress: 26% (27/103) - Elapsed: 0.7s, Est. remaining: 1.9s
Batch progress: 27% (28/103) - Elapsed: 0.7s, Est. remaining: 1.8s
Batch progress: 28% (29/103) - Elapsed: 0.7s, Est. remaining: 1.8s
Batch progress: 29% (30/103) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 30% (31/103) - Elapsed: 0.7s, Est. remaining: 1.7s
Batch progress: 31% (32/103) - Elapsed: 0.8s, Est. remaining: 1.9s
Batch progress: 32% (33/103) - Elapsed: 0.8s, Est. remaining: 1.8s
Batch progress: 33% (34/103) - Elapsed: 0.9s, Est. remaining: 1.8s
Batch progress: 34% (36/103) - Elapsed: 0.9s, Est. remaining: 1.7s
Batch progress: 35% (37/103) - Elapsed: 0.9s, Est. remaining: 1.6s
Batch progress: 36% (38/103) - Elapsed: 0.9s, Est. remaining: 1.6s
Batch progress: 37% (39/103) - Elapsed: 0.9s, Est. remaining: 1.5s
Batch progress: 38% (40/103) - Elapsed: 0.9s, Est. remaining: 1.5s
Batch progress: 39% (41/103) - Elapsed: 0.9s, Est. remaining: 1.4s
Batch progress: 40% (42/103) - Elapsed: 1.0s, Est. remaining: 1.4s
Batch progress: 41% (43/103) - Elapsed: 1.0s, Est. remaining: 1.3s
Batch progress: 42% (44/103) - Elapsed: 1.0s, Est. remaining: 1.3s
Batch progress: 43% (45/103) - Elapsed: 1.0s, Est. remaining: 1.3s
Batch progress: 44% (46/103) - Elapsed: 1.0s, Est. remaining: 1.2s
Batch progress: 45% (47/103) - Elapsed: 1.0s, Est. remaining: 1.2s
Batch progress: 46% (48/103) - Elapsed: 1.0s, Est. remaining: 1.2s
Batch progress: 47% (49/103) - Elapsed: 1.0s, Est. remaining: 1.1s
Batch progress: 48% (50/103) - Elapsed: 1.0s, Est. remaining: 1.1s
Batch progress: 49% (51/103) - Elapsed: 1.0s, Est. remaining: 1.1s
Batch progress: 50% (52/103) - Elapsed: 1.1s, Est. remaining: 1.0s
Batch progress: 51% (53/103) - Elapsed: 1.1s, Est. remaining: 1.0s
Batch progress: 52% (54/103) - Elapsed: 1.1s, Est. remaining: 1.0s
Batch progress: 53% (55/103) - Elapsed: 1.1s, Est. remaining: 1.0s
Batch progress: 54% (56/103) - Elapsed: 1.1s, Est. remaining: 0.9s
Batch progress: 55% (57/103) - Elapsed: 1.1s, Est. remaining: 0.9s
Batch progress: 56% (58/103) - Elapsed: 1.1s, Est. remaining: 0.9s
Batch progress: 57% (59/103) - Elapsed: 1.1s, Est. remaining: 0.8s
Batch progress: 58% (60/103) - Elapsed: 1.2s, Est. remaining: 0.8s
Batch progress: 59% (61/103) - Elapsed: 1.2s, Est. remaining: 0.8s
Batch progress: 60% (62/103) - Elapsed: 1.2s, Est. remaining: 0.8s
Batch progress: 61% (63/103) - Elapsed: 1.2s, Est. remaining: 0.8s
Batch progress: 62% (64/103) - Elapsed: 1.2s, Est. remaining: 0.7s
Batch progress: 63% (65/103) - Elapsed: 1.2s, Est. remaining: 0.7s
Batch progress: 64% (66/103) - Elapsed: 1.2s, Est. remaining: 0.7s
Batch progress: 65% (67/103) - Elapsed: 1.3s, Est. remaining: 0.7s
Batch progress: 66% (68/103) - Elapsed: 1.3s, Est. remaining: 0.7s
Batch progress: 67% (70/103) - Elapsed: 1.3s, Est. remaining: 0.6s
Batch progress: 68% (71/103) - Elapsed: 1.3s, Est. remaining: 0.6s
Batch progress: 69% (72/103) - Elapsed: 1.3s, Est. remaining: 0.6s
Batch progress: 70% (73/103) - Elapsed: 1.4s, Est. remaining: 0.6s
Batch progress: 71% (74/103) - Elapsed: 1.4s, Est. remaining: 0.5s
Batch progress: 72% (75/103) - Elapsed: 1.4s, Est. remaining: 0.5s
Batch progress: 73% (76/103) - Elapsed: 1.4s, Est. remaining: 0.5s
Batch progress: 74% (77/103) - Elapsed: 1.4s, Est. remaining: 0.5s
Batch progress: 75% (78/103) - Elapsed: 1.5s, Est. remaining: 0.5s
Batch progress: 76% (79/103) - Elapsed: 1.5s, Est. remaining: 0.5s
Batch progress: 77% (80/103) - Elapsed: 1.5s, Est. remaining: 0.4s
Batch progress: 78% (81/103) - Elapsed: 1.5s, Est. remaining: 0.4s
Batch progress: 79% (82/103) - Elapsed: 1.6s, Est. remaining: 0.4s
Batch progress: 80% (83/103) - Elapsed: 2.3s, Est. remaining: 0.5s
Batch progress: 81% (84/103) - Elapsed: 2.3s, Est. remaining: 0.5s
Batch progress: 82% (85/103) - Elapsed: 2.4s, Est. remaining: 0.5s
Batch progress: 83% (86/103) - Elapsed: 2.4s, Est. remaining: 0.5s
Batch progress: 84% (87/103) - Elapsed: 2.4s, Est. remaining: 0.4s
Batch progress: 85% (88/103) - Elapsed: 2.5s, Est. remaining: 0.4s
Batch progress: 86% (89/103) - Elapsed: 2.5s, Est. remaining: 0.4s
Batch progress: 87% (90/103) - Elapsed: 2.5s, Est. remaining: 0.4s
Batch progress: 88% (91/103) - Elapsed: 2.6s, Est. remaining: 0.3s
Batch progress: 89% (92/103) - Elapsed: 2.7s, Est. remaining: 0.3s
Batch progress: 90% (93/103) - Elapsed: 2.8s, Est. remaining: 0.3s
Batch progress: 91% (94/103) - Elapsed: 2.8s, Est. remaining: 0.3s
Batch progress: 92% (95/103) - Elapsed: 2.9s, Est. remaining: 0.2s
Batch progress: 93% (96/103) - Elapsed: 3.1s, Est. remaining: 0.2s
Batch progress: 94% (97/103) - Elapsed: 3.3s, Est. remaining: 0.2s
Batch progress: 95% (98/103) - Elapsed: 3.8s, Est. remaining: 0.2s
Batch progress: 96% (99/103) - Elapsed: 4.5s, Est. remaining: 0.2s
Batch progress: 97% (100/103) - Elapsed: 4.6s, Est. remaining: 0.1s
Batch progress: 98% (101/103) - Elapsed: 6.4s, Est. remaining: 0.1s
Batch progress: 99% (102/103) - Elapsed: 6.7s, Est. remaining: 0.1s
Batch progress: 100% (103/103) - Elapsed: 10.3s, Est. remaining: 0.0s
Iteration 4 completed in 10.556 seconds
Reduced to 103 terms
Iteration 5: Processing 103 terms in 52 batches
Batch progress: 1% (1/52) - Elapsed: 0.6s, Est. remaining: 28.2s
Batch progress: 3% (2/52) - Elapsed: 0.6s, Est. remaining: 14.1s
Batch progress: 5% (3/52) - Elapsed: 0.6s, Est. remaining: 9.5s
Batch progress: 7% (4/52) - Elapsed: 0.6s, Est. remaining: 7.0s
Batch progress: 9% (5/52) - Elapsed: 0.6s, Est. remaining: 5.6s
Batch progress: 11% (6/52) - Elapsed: 0.6s, Est. remaining: 4.7s
Batch progress: 13% (7/52) - Elapsed: 0.6s, Est. remaining: 4.1s
Batch progress: 15% (8/52) - Elapsed: 0.7s, Est. remaining: 3.7s
Batch progress: 17% (9/52) - Elapsed: 0.7s, Est. remaining: 3.3s
Batch progress: 19% (10/52) - Elapsed: 0.7s, Est. remaining: 3.0s
Batch progress: 21% (11/52) - Elapsed: 0.7s, Est. remaining: 2.8s
Batch progress: 23% (12/52) - Elapsed: 0.8s, Est. remaining: 2.6s
Batch progress: 25% (13/52) - Elapsed: 0.8s, Est. remaining: 2.5s
Batch progress: 26% (14/52) - Elapsed: 0.8s, Est. remaining: 2.3s
Batch progress: 28% (15/52) - Elapsed: 0.8s, Est. remaining: 2.1s
Batch progress: 30% (16/52) - Elapsed: 0.9s, Est. remaining: 1.9s
Batch progress: 32% (17/52) - Elapsed: 0.9s, Est. remaining: 1.8s
Batch progress: 34% (18/52) - Elapsed: 0.9s, Est. remaining: 1.7s
Batch progress: 36% (19/52) - Elapsed: 0.9s, Est. remaining: 1.6s
Batch progress: 38% (20/52) - Elapsed: 0.9s, Est. remaining: 1.5s
Batch progress: 40% (21/52) - Elapsed: 0.9s, Est. remaining: 1.4s
Batch progress: 42% (22/52) - Elapsed: 0.9s, Est. remaining: 1.3s
Batch progress: 44% (23/52) - Elapsed: 1.0s, Est. remaining: 1.2s
Batch progress: 46% (24/52) - Elapsed: 1.0s, Est. remaining: 1.1s
Batch progress: 48% (25/52) - Elapsed: 1.0s, Est. remaining: 1.1s
Batch progress: 50% (26/52) - Elapsed: 1.0s, Est. remaining: 1.0s
Batch progress: 51% (27/52) - Elapsed: 1.0s, Est. remaining: 0.9s
Batch progress: 53% (28/52) - Elapsed: 1.0s, Est. remaining: 0.9s
Batch progress: 55% (29/52) - Elapsed: 1.1s, Est. remaining: 0.8s
Batch progress: 57% (30/52) - Elapsed: 1.2s, Est. remaining: 0.9s
Batch progress: 59% (31/52) - Elapsed: 1.2s, Est. remaining: 0.8s
Batch progress: 61% (32/52) - Elapsed: 1.3s, Est. remaining: 0.8s
Batch progress: 63% (33/52) - Elapsed: 1.3s, Est. remaining: 0.7s
Batch progress: 65% (34/52) - Elapsed: 1.3s, Est. remaining: 0.7s
Batch progress: 67% (35/52) - Elapsed: 1.3s, Est. remaining: 0.7s
Batch progress: 69% (36/52) - Elapsed: 1.6s, Est. remaining: 0.7s
Batch progress: 71% (37/52) - Elapsed: 1.8s, Est. remaining: 0.7s
Batch progress: 73% (38/52) - Elapsed: 1.9s, Est. remaining: 0.7s
Batch progress: 75% (39/52) - Elapsed: 2.1s, Est. remaining: 0.7s
Batch progress: 76% (40/52) - Elapsed: 2.3s, Est. remaining: 0.7s
Batch progress: 78% (41/52) - Elapsed: 2.4s, Est. remaining: 0.6s
Batch progress: 80% (42/52) - Elapsed: 2.5s, Est. remaining: 0.6s
Batch progress: 82% (43/52) - Elapsed: 2.9s, Est. remaining: 0.6s
Batch progress: 84% (44/52) - Elapsed: 3.0s, Est. remaining: 0.6s
Batch progress: 86% (45/52) - Elapsed: 3.1s, Est. remaining: 0.5s
Batch progress: 88% (46/52) - Elapsed: 3.4s, Est. remaining: 0.4s
Batch progress: 90% (47/52) - Elapsed: 4.0s, Est. remaining: 0.4s
Batch progress: 92% (48/52) - Elapsed: 6.0s, Est. remaining: 0.5s
Batch progress: 94% (49/52) - Elapsed: 7.6s, Est. remaining: 0.5s
Batch progress: 96% (50/52) - Elapsed: 8.8s, Est. remaining: 0.4s
Batch progress: 98% (51/52) - Elapsed: 9.9s, Est. remaining: 0.2s
Batch progress: 100% (52/52) - Elapsed: 16.1s, Est. remaining: 0.0s
Iteration 5 completed in 16.288 seconds
Reduced to 52 terms
Iteration 6: Processing 52 terms in 26 batches
Batch progress: 3% (1/26) - Elapsed: 0.6s, Est. remaining: 14.5s
Batch progress: 7% (2/26) - Elapsed: 0.6s, Est. remaining: 7.2s
Batch progress: 11% (3/26) - Elapsed: 0.8s, Est. remaining: 5.9s
Batch progress: 15% (4/26) - Elapsed: 0.8s, Est. remaining: 4.3s
Batch progress: 19% (5/26) - Elapsed: 0.8s, Est. remaining: 3.4s
Batch progress: 23% (6/26) - Elapsed: 0.8s, Est. remaining: 2.7s
Batch progress: 26% (7/26) - Elapsed: 0.8s, Est. remaining: 2.3s
Batch progress: 30% (8/26) - Elapsed: 0.9s, Est. remaining: 1.9s
Batch progress: 34% (9/26) - Elapsed: 0.9s, Est. remaining: 1.7s
Batch progress: 38% (10/26) - Elapsed: 0.9s, Est. remaining: 1.5s
Batch progress: 42% (11/26) - Elapsed: 1.0s, Est. remaining: 1.4s
Batch progress: 46% (12/26) - Elapsed: 1.1s, Est. remaining: 1.3s
Batch progress: 50% (13/26) - Elapsed: 1.1s, Est. remaining: 1.1s
Batch progress: 53% (14/26) - Elapsed: 1.3s, Est. remaining: 1.1s
Batch progress: 57% (15/26) - Elapsed: 1.5s, Est. remaining: 1.1s
Batch progress: 61% (16/26) - Elapsed: 1.5s, Est. remaining: 0.9s
Batch progress: 65% (17/26) - Elapsed: 2.3s, Est. remaining: 1.2s
Batch progress: 69% (18/26) - Elapsed: 2.7s, Est. remaining: 1.2s
Batch progress: 73% (19/26) - Elapsed: 2.8s, Est. remaining: 1.0s
Batch progress: 76% (20/26) - Elapsed: 3.4s, Est. remaining: 1.0s
Batch progress: 80% (21/26) - Elapsed: 3.6s, Est. remaining: 0.9s
Batch progress: 84% (22/26) - Elapsed: 3.7s, Est. remaining: 0.7s
Batch progress: 88% (23/26) - Elapsed: 4.0s, Est. remaining: 0.5s
Batch progress: 92% (24/26) - Elapsed: 6.4s, Est. remaining: 0.5s
Batch progress: 96% (25/26) - Elapsed: 7.2s, Est. remaining: 0.3s
Batch progress: 100% (26/26) - Elapsed: 9.6s, Est. remaining: 0.0s
Iteration 6 completed in 9.841 seconds
Reduced to 26 terms
Iteration 7: Processing 26 terms in 13 batches
Batch progress: 7% (1/13) - Elapsed: 0.6s, Est. remaining: 7.5s
Batch progress: 15% (2/13) - Elapsed: 0.7s, Est. remaining: 3.9s
Batch progress: 23% (3/13) - Elapsed: 0.9s, Est. remaining: 3.0s
Batch progress: 30% (4/13) - Elapsed: 1.2s, Est. remaining: 2.8s
Batch progress: 38% (5/13) - Elapsed: 1.5s, Est. remaining: 2.3s
Batch progress: 46% (6/13) - Elapsed: 1.5s, Est. remaining: 1.8s
Batch progress: 53% (7/13) - Elapsed: 1.8s, Est. remaining: 1.6s
Batch progress: 61% (8/13) - Elapsed: 2.3s, Est. remaining: 1.4s
Batch progress: 69% (9/13) - Elapsed: 2.4s, Est. remaining: 1.0s
Batch progress: 76% (10/13) - Elapsed: 3.2s, Est. remaining: 1.0s
Batch progress: 84% (11/13) - Elapsed: 5.0s, Est. remaining: 0.9s
Batch progress: 92% (12/13) - Elapsed: 5.2s, Est. remaining: 0.4s
Batch progress: 100% (13/13) - Elapsed: 6.1s, Est. remaining: 0.0s
Iteration 7 completed in 6.262 seconds
Reduced to 13 terms
Iteration 8: Processing 13 terms in 7 batches
Batch progress: 14% (1/7) - Elapsed: 1.6s, Est. remaining: 9.6s
Batch progress: 28% (2/7) - Elapsed: 1.6s, Est. remaining: 4.1s
Batch progress: 42% (3/7) - Elapsed: 2.0s, Est. remaining: 2.6s
Batch progress: 57% (4/7) - Elapsed: 2.1s, Est. remaining: 1.5s
Batch progress: 71% (5/7) - Elapsed: 2.9s, Est. remaining: 1.2s
Batch progress: 85% (6/7) - Elapsed: 3.4s, Est. remaining: 0.6s
Batch progress: 100% (7/7) - Elapsed: 5.8s, Est. remaining: 0.0s
Iteration 8 completed in 6.015 seconds
Reduced to 7 terms
Iteration 9: Processing 7 terms in 4 batches
Batch progress: 25% (1/4) - Elapsed: 1.1s, Est. remaining: 3.3s
Batch progress: 50% (2/4) - Elapsed: 1.3s, Est. remaining: 1.3s
Batch progress: 75% (3/4) - Elapsed: 2.2s, Est. remaining: 0.7s
Batch progress: 100% (4/4) - Elapsed: 6.1s, Est. remaining: 0.0s
Iteration 9 completed in 6.323 seconds
Reduced to 4 terms
Iteration 10: Processing 4 terms in 2 batches
Batch progress: 50% (1/2) - Elapsed: 2.3s, Est. remaining: 2.3s
Batch progress: 100% (2/2) - Elapsed: 4.4s, Est. remaining: 0.0s
Iteration 10 completed in 4.626 seconds
Reduced to 2 terms
Performing final factorization on the reduced expression
Final factorization completed in 94.264 seconds total
Saving result to Mathematica file: result_N5.m
Mathematica conversion time: 0.528 seconds
File writing time: 0.107 seconds
Result successfully saved to result_N5.m
Total Mathematica export time: 0.635 seconds
======================================================
Final result after all integrations:
  69   35       69   34     69   33       69   32       69   31       69   30  ↪
x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂    ↪
────────────────────────────────────────────────────────────────────────────── ↪
                                                                               ↪
                                                                               ↪
                                                                               ↪

↪       69   29       69   28     69   27       69   26     69   25     68   3 ↪
↪ - 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + x₁  ⋅x₂   - x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9     68   38       68   37       68   36       68   35       68   34        ↪
↪   + x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 4⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 68   33       68   32       68   31       68   30       68   29       68   2 ↪
↪   ⋅x₂   + 6⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8       68   27       68   26       68   24     68   23     68   22       67 ↪
↪   + 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   - x₁  ⋅x₂   + 2⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    42       67   41     67   40       67   39       67   38       67   37    ↪
↪ ⋅x₂   - 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   67   36        67   35       67   34       67   33     67   32       67    ↪
↪ x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 3⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 31     67   30     67   29       67   28       67   27       67   26       6 ↪
↪    + x₁  ⋅x₂   - x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 2⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   25       67   24     67   22       67   21     67   19     66   45       ↪
↪  ⋅x₂   + 4⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   - x₁  ⋅x₂   - 3⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  66   44     66   43       66   42     66   41        66   40       66   39  ↪
↪ ₁  ⋅x₂   + x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        66   38       66   37        66   36        66   35       66   34     ↪
↪ - 13⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 5 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    66   33       66   32       66   31       66   30       66   28       66  ↪
↪ ⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   27     66   26       66   25       66   24     66   23       66   22     6 ↪
↪ x₂   - x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   21       66   20       66   19       66   17       65   47       65   46 ↪
↪  ⋅x₂   + 3⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        65   45        65   44        65   43       65   42       65   41     ↪
↪  + 5⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     65   40        65   39        65   38     65   37        65   36       6 ↪
↪ 5⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 3⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 5   35     65   34       65   33       65   32       65   30       65   29   ↪
↪  ⋅x₂   - x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      65   28     65   27       65   26       65   25       65   24       65  ↪
↪  7⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 4⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   22       65   21       65   20     65   19       65   18       65   17     ↪
↪ x₂   - 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    65   16       65   15       64   49       64   48       64   47       64  ↪
↪ ⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   46        64   45       64   44        64   43       64   42        64   4 ↪
↪ x₂   + 24⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 26⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1       64   40       64   39        64   38        64   37       64   36    ↪
↪   - 8⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 16⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      64   35       64   34       64   33       64   32        64   31        ↪
↪ 14⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   + 13⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  64   30        64   29        64   28        64   27       64   26       64 ↪
↪ ₁  ⋅x₂   + 14⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - 7⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    25       64   22       64   21       64   20     64   19       64   18    ↪
↪ ⋅x₂   + 2⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     64   17       64   15       64   14     64   13     63   51       63   5 ↪
↪ 4⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - x₁  ⋅x₂   + x₁  ⋅x₂   + 9⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0        63   48        63   47        63   46        63   45        63   44 ↪
↪   - 11⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 12⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         63   43        63   42        63   41        63   40        63   39  ↪
↪  + 15⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   - 30⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       63   38        63   37        63   36       63   35       63   34      ↪
↪ + 8⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   + 31⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 28 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    63   33        63   32       63   31        63   29       63   28     63  ↪
↪ ⋅x₁  ⋅x₂   - 34⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   27     63   26       63   24       63   23        63   22       63   21    ↪
↪ x₂   + x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     63   20       63   19       63   18     63   17     63   15       63   1 ↪
↪ 5⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + x₁  ⋅x₂   + x₁  ⋅x₂   - 5⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4     63   13       63   12       62   52       62   51        62   50       ↪
↪   + x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   + 14⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   62   49       62   48       62   47        62   46        62   45     62   ↪
↪ x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 33⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  44        62   43        62   42        62   41        62   40        62    ↪
↪ ₂   + 31⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 39⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 39        62   38        62   37        62   36        62   35        62   3 ↪
↪    - 38⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x₂   + 19⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4       62   33        62   32        62   31        62   30        62   29  ↪
↪   - 5⋅x₁  ⋅x₂   - 32⋅x₁  ⋅x₂   - 22⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       62   28        62   27       62   26       62   25        62   24      ↪
↪ + 8⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   - 6⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   62   23       62   22       62   21       62   20     62   19       62   1 ↪
↪ x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 2⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8       62   17       62   16       62   14     62   13       62   12        ↪
↪   + 2⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 3⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 62   11     61   54       61   53       61   52        61   51       61   50 ↪
↪   ⋅x₂   - x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         61   49        61   48        61   47        61   46        61   45  ↪
↪  + 25⋅x₁  ⋅x₂   + 32⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        61   44        61   43        61   42        61   41        61   40   ↪
↪ - 48⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 70⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       61   39        61   38        61   37       61   36        61   35     ↪
↪  16⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 81⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 8 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     61   34        61   33        61   32        61   31        61   30      ↪
↪ 6⋅x₁  ⋅x₂   + 61⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   - 24 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    61   29        61   28       61   27       61   26        61   24       6 ↪
↪ ⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   - 5⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   23        61   22       61   21     61   20     61   19       61   18    ↪
↪  ⋅x₂   + 11⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - x₁  ⋅x₂   - x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     61   17     61   16       61   15       61   14       61   13     61   1 ↪
↪ 8⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2       61   11     61   10       60   55        60   54       60   53       ↪
↪   - 5⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 3⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  60   52        60   51        60   50        60   49        60   48         ↪
↪ ₁  ⋅x₂   - 28⋅x₁  ⋅x₂   - 30⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 48⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 60   47        60   46        60   45        60   44        60   43        6 ↪
↪   ⋅x₂   + 36⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   - 62⋅x₁  ⋅x₂   - 68⋅x₁  ⋅x₂   - 40⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0   42        60   41         60   40         60   39        60   38         ↪
↪  ⋅x₂   + 96⋅x₁  ⋅x₂   + 106⋅x₁  ⋅x₂   + 109⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   - 76⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 60   37        60   36         60   35       60   34        60   33        6 ↪
↪   ⋅x₂   - 93⋅x₁  ⋅x₂   - 111⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 38⋅x₁  ⋅x₂   + 35⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0   32       60   31        60   30        60   29       60   28        60   ↪
↪  ⋅x₂   + 7⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 27⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  27        60   26        60   25     60   24       60   23       60   22    ↪
↪ ₂   + 24⋅x₁  ⋅x₂   + 27⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     60   21       60   20        60   19       60   18     60   17       60  ↪
↪ 4⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 6⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   16     60   15       60   14       60   13       60   11     60   10       ↪
↪ x₂   - x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 4⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  60   9       59   56       59   55       59   54        59   53        59   ↪
↪ ₁  ⋅x₂  - 9⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  52       59   51        59   50        59   49        59   48        59   4 ↪
↪ ₂   - 3⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7         59   46        59   45       59   44        59   43         59   4 ↪
↪   + 110⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   - 95⋅x₁  ⋅x₂   - 182⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2        59   41       59   40         59   39         59   38        59   3 ↪
↪   - 80⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 120⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7        59   36         59   35        59   34        59   33        59   3 ↪
↪   - 23⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2        59   31        59   30        59   29        59   28        59   27 ↪
↪   + 75⋅x₁  ⋅x₂   + 47⋅x₁  ⋅x₂   - 26⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         59   26       59   25        59   24       59   22        59   21    ↪
↪  - 20⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      59   20        59   19        59   18       59   17       59   16       ↪
↪ 13⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 8⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  59   15       59   14       59   13       59   12       59   10     59   9  ↪
↪ ₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     59   8       58   57       58   56        58   55        58   54         ↪
↪ - x₁  ⋅x₂  + 5⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   + 11⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 58   53        58   52        58   51        58   50        58   49        5 ↪
↪   ⋅x₂   + 45⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 99⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   48        58   47        58   46         58   45         58   44         ↪
↪  ⋅x₂   - 90⋅x₁  ⋅x₂   + 52⋅x₁  ⋅x₂   + 121⋅x₁  ⋅x₂   + 150⋅x₁  ⋅x₂   + 56⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 58   43         58   42         58   41         58   40        58   39       ↪
↪   ⋅x₂   - 137⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   - 165⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   + 163 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    58   38         58   37        58   36        58   35         58   34     ↪
↪ ⋅x₁  ⋅x₂   + 182⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   - 77⋅x₁  ⋅x₂   - 142⋅x₁  ⋅x₂   - 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      58   33        58   32        58   31        58   30        58   29     ↪
↪ 23⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   + 89⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     58   28        58   27        58   26        58   25        58   24      ↪
↪ 9⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 28⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 31 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    58   22        58   21        58   20     58   19        58   18       58 ↪
↪ ⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   + 6⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    16       58   15        58   14       58   13       58   12       58   11 ↪
↪ ⋅x₂   + 3⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        58   9       58   8       58   7       57   58        57   57       5 ↪
↪  - 2⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   + 9⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   56       57   55        57   54        57   53       57   52        57   ↪
↪  ⋅x₂   - 5⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 42⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 61⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  51        57   50        57   49        57   48         57   47         57  ↪
↪ ₂   + 73⋅x₁  ⋅x₂   + 27⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 183⋅x₁  ⋅x₂   - 100⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   46        57   45         57   44         57   43        57   42        57 ↪
↪ x₂   + 25⋅x₁  ⋅x₂   + 241⋅x₁  ⋅x₂   + 257⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   - 90⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    41         57   40         57   39        57   38         57   37         ↪
↪ ⋅x₂   - 302⋅x₁  ⋅x₂   - 222⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   + 159⋅x₁  ⋅x₂   + 206⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  57   36         57   35        57   34         57   33         57   32      ↪
↪ ₁  ⋅x₂   + 137⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 105⋅x₁  ⋅x₂   - 115⋅x₁  ⋅x₂   - 43 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    57   31        57   30        57   29        57   28        57   27       ↪
↪ ⋅x₁  ⋅x₂   + 65⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 31⋅x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   - 17⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   57   26       57   25        57   24        57   23       57   22        5 ↪
↪ x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 23⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   21       57   20        57   19       57   18        57   17     57   16 ↪
↪  ⋅x₂   + 4⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         57   15       57   14       57   13        57   12       57   11     ↪
↪  - 13⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 5 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    57   10     57   8       57   7       57   6       56   59       56   58  ↪
↪ ⋅x₁  ⋅x₂   + x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  - 9⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       56   57        56   56        56   55        56   54        56   53    ↪
↪ + 9⋅x₁  ⋅x₂   + 16⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 57⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      56   52        56   51         56   50         56   49        56   48   ↪
↪ 63⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   + 111⋅x₁  ⋅x₂   + 154⋅x₁  ⋅x₂   + 88⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        56   47         56   46         56   45        56   44         56   4 ↪
↪  129⋅x₁  ⋅x₂   - 243⋅x₁  ⋅x₂   - 285⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 236⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3         56   42         56   41         56   40         56   39         56 ↪
↪   + 300⋅x₁  ⋅x₂   + 188⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   - 304⋅x₁  ⋅x₂   - 280⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    38        56   37         56   36         56   35         56   34         ↪
↪ ⋅x₂   - 31⋅x₁  ⋅x₂   + 172⋅x₁  ⋅x₂   + 295⋅x₁  ⋅x₂   + 130⋅x₁  ⋅x₂   + 28⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 56   33         56   32         56   31        56   30        56   29        ↪
↪   ⋅x₂   - 124⋅x₁  ⋅x₂   - 125⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 39⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  56   28        56   27        56   26        56   25        56   24       5 ↪
↪ ₁  ⋅x₂   - 35⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 12⋅x₁  ⋅x₂   + 9⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   23       56   22        56   21        56   20        56   19       56   ↪
↪  ⋅x₂   + 4⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  18       56   17       56   16       56   15        56   14       56   13   ↪
↪ ₂   - 5⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      56   12       56   11       56   10       56   9       56   8     56    ↪
↪  7⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7     56   6     56   5       55   60       55   59        55   58       55  ↪
↪   + x₁  ⋅x₂  - x₁  ⋅x₂  + 5⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 5⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   57        55   56        55   55        55   54        55   53         55  ↪
↪ x₂   + 24⋅x₁  ⋅x₂   + 50⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   - 138⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   52         55   51        55   50         55   49         55   48          ↪
↪ x₂   - 109⋅x₁  ⋅x₂   - 33⋅x₁  ⋅x₂   + 167⋅x₁  ⋅x₂   + 246⋅x₁  ⋅x₂   + 117⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 55   47        55   46         55   45         55   44       55   43         ↪
↪   ⋅x₂   - 99⋅x₁  ⋅x₂   - 377⋅x₁  ⋅x₂   - 270⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 344⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  55   42         55   41         55   40         55   39         55   38     ↪
↪ ₁  ⋅x₂   + 469⋅x₁  ⋅x₂   + 287⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   - 387⋅x₁  ⋅x₂   - 3 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      55   37         55   36         55   35         55   34         55   33 ↪
↪ 75⋅x₁  ⋅x₂   - 191⋅x₁  ⋅x₂   + 126⋅x₁  ⋅x₂   + 136⋅x₁  ⋅x₂   + 146⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        55   32        55   31       55   30        55   29         55   28   ↪
↪  - 9⋅x₁  ⋅x₂   - 52⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   + 101⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       55   27       55   26        55   25     55   24       55   23         ↪
↪  33⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 19⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 55   22       55   21        55   20        55   19        55   18       55  ↪
↪   ⋅x₂   - 2⋅x₁  ⋅x₂   - 54⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 6⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   17       55   16        55   15       55   14        55   13       55   12 ↪
↪ x₂   + 9⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         55   11       55   10       55   9       55   8       55   7       5 ↪
↪  + 15⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  - 5⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 5   6       55   5     54   61        54   60       54   59        54   58   ↪
↪  ⋅x₂  - 4⋅x₁  ⋅x₂  - x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       54   57        54   56        54   55        54   54        54   53    ↪
↪  41⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   + 88⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      54   52         54   51         54   50        54   49         54   48  ↪
↪ 56⋅x₁  ⋅x₂   - 145⋅x₁  ⋅x₂   - 213⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 274⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         54   47         54   46         54   45         54   44         54   ↪
↪ + 370⋅x₁  ⋅x₂   + 227⋅x₁  ⋅x₂   - 220⋅x₁  ⋅x₂   - 512⋅x₁  ⋅x₂   - 522⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  43         54   42         54   41         54   40         54   39       54 ↪
↪ ₂   - 123⋅x₁  ⋅x₂   + 289⋅x₁  ⋅x₂   + 559⋅x₁  ⋅x₂   + 320⋅x₁  ⋅x₂   - 3⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    38         54   37         54   36        54   35        54   34          ↪
↪ ⋅x₂   - 267⋅x₁  ⋅x₂   - 307⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 220⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 54   33        54   32        54   31         54   30        54   29         ↪
↪   ⋅x₂   + 78⋅x₁  ⋅x₂   - 49⋅x₁  ⋅x₂   - 116⋅x₁  ⋅x₂   - 88⋅x₁  ⋅x₂   - 10⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 54   28        54   27       54   26        54   25       54   24        54  ↪
↪   ⋅x₂   - 29⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   - 60⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 26⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   23        54   22        54   21        54   20        54   19        54   ↪
↪ x₂   + 40⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   - 22⋅x₁  ⋅x₂   + 12⋅x₁  ⋅x₂   + 41⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  18       54   17        54   16        54   15        54   14       54   13 ↪
↪ ₂   + 6⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   - 22⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         54   12       54   11       54   10     54   9       54   8     54   ↪
↪  - 13⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  6       54   5       54   4       53   61       53   60        53   59      ↪
↪ ₂  + 3⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 11 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    53   58        53   57        53   56        53   55        53   54       ↪
↪ ⋅x₁  ⋅x₂   - 42⋅x₁  ⋅x₂   - 57⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   + 156 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    53   53         53   52        53   51         53   50         53   49    ↪
↪ ⋅x₁  ⋅x₂   + 103⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   - 338⋅x₁  ⋅x₂   - 327⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      53   48         53   47         53   46         53   45         53   44 ↪
↪ 65⋅x₁  ⋅x₂   + 345⋅x₁  ⋅x₂   + 547⋅x₁  ⋅x₂   + 349⋅x₁  ⋅x₂   - 134⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          53   43         53   42         53   41         53   40         53  ↪
↪  - 580⋅x₁  ⋅x₂   - 541⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   + 442⋅x₁  ⋅x₂   + 499⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   39         53   38        53   37         53   36         53   35          ↪
↪ x₂   + 364⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   - 390⋅x₁  ⋅x₂   - 293⋅x₁  ⋅x₂   - 187⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 53   34         53   33        53   32        53   31        53   30         ↪
↪   ⋅x₂   + 102⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 71⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   + 23⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 53   29        53   28        53   27        53   26        53   25        5 ↪
↪   ⋅x₂   + 85⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   - 25⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3   24        53   23        53   22       53   21        53   20        53  ↪
↪  ⋅x₂   - 31⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   - 37⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   19        53   18       53   17        53   16        53   15       53   1 ↪
↪ x₂   + 11⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4       53   13     53   12       53   11       53   10       53   9     53  ↪
↪   + 8⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂  - x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   8       53   7       53   4       52   62       52   61       52   60      ↪
↪ x₂  - 4⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 25 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    52   59        52   58       52   57        52   56         52   55       ↪
↪ ⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 138⋅x₁  ⋅x₂   - 56⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   52   54         52   53         52   52         52   51         52   50    ↪
↪ x₁  ⋅x₂   + 103⋅x₁  ⋅x₂   + 224⋅x₁  ⋅x₂   + 216⋅x₁  ⋅x₂   - 121⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       52   49         52   48        52   47         52   46         52   45 ↪
↪ 401⋅x₁  ⋅x₂   - 462⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   + 457⋅x₁  ⋅x₂   + 754⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          52   44         52   43         52   42         52   41         52  ↪
↪  + 464⋅x₁  ⋅x₂   - 175⋅x₁  ⋅x₂   - 660⋅x₁  ⋅x₂   - 792⋅x₁  ⋅x₂   - 177⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   40         52   39         52   38         52   37        52   36          ↪
↪ x₂   + 251⋅x₁  ⋅x₂   + 565⋅x₁  ⋅x₂   + 335⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   - 173⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 52   35         52   34        52   33        52   32        52   31         ↪
↪   ⋅x₂   - 193⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   - 114⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  52   30        52   29        52   28        52   27        52   26         ↪
↪ ₁  ⋅x₂   - 75⋅x₁  ⋅x₂   - 30⋅x₁  ⋅x₂   + 34⋅x₁  ⋅x₂   + 48⋅x₁  ⋅x₂   - 17⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 52   25       52   24        52   23        52   22        52   21        52 ↪
↪   ⋅x₂   - 6⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 26⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    20        52   19        52   18        52   17       52   16       52    ↪
↪ ⋅x₂   - 45⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 42⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15       52   14       52   13        52   12       52   10     52   9       ↪
↪    - 6⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - x₁  ⋅x₂  + 8⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  52   8       52   7     52   6       52   5       52   4       52   3     5 ↪
↪ ₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   63       51   62        51   61        51   60       51   59        51   ↪
↪  ⋅x₂   - 7⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   - 28⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  58        51   57        51   56         51   55         51   54        51  ↪
↪ ₂   + 61⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   - 109⋅x₁  ⋅x₂   - 145⋅x₁  ⋅x₂   - 46⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   53         51   52         51   51         51   50         51   49         ↪
↪ x₂   + 216⋅x₁  ⋅x₂   + 426⋅x₁  ⋅x₂   + 279⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   - 667⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  51   48         51   47         51   46         51   45         51   44     ↪
↪ ₁  ⋅x₂   - 668⋅x₁  ⋅x₂   - 267⋅x₁  ⋅x₂   + 512⋅x₁  ⋅x₂   + 780⋅x₁  ⋅x₂   + 5 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      51   43        51   42         51   41         51   40         51   39  ↪
↪ 67⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   - 722⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 224⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         51   38         51   37         51   36        51   35         51    ↪
↪ + 373⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   + 286⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   - 168⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 34        51   33        51   32        51   31        51   30        51   2 ↪
↪    - 96⋅x₁  ⋅x₂   + 22⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   - 78⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9        51   28        51   27        51   26       51   25        51   24  ↪
↪   - 59⋅x₁  ⋅x₂   + 36⋅x₁  ⋅x₂   + 76⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 70⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        51   23        51   22        51   21        51   20       51   19    ↪
↪ - 93⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      51   18        51   17        51   16        51   15        51   14     ↪
↪ 32⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 41⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 6 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    51   13       51   12        51   11        51   10       51   9       51 ↪
↪ ⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂  + 3⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    8       51   7       51   6       51   5       51   4       50   63       ↪
↪ ⋅x₂  + 2⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  + 9⋅x₁  ⋅x₂   + 14⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   50   62       50   61        50   60        50   59        50   58         ↪
↪ x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 30⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 73⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 50   57         50   56        50   55         50   54         50   53       ↪
↪   ⋅x₂   + 111⋅x₁  ⋅x₂   - 33⋅x₁  ⋅x₂   - 213⋅x₁  ⋅x₂   - 338⋅x₁  ⋅x₂   - 121 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    50   52         50   51         50   50         50   49         50   48   ↪
↪ ⋅x₁  ⋅x₂   + 279⋅x₁  ⋅x₂   + 568⋅x₁  ⋅x₂   + 445⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        50   47         50   46        50   45         50   44         50   4 ↪
↪  663⋅x₁  ⋅x₂   - 804⋅x₁  ⋅x₂   - 79⋅x₁  ⋅x₂   + 560⋅x₁  ⋅x₂   + 983⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3         50   42         50   41         50   40         50   39         50 ↪
↪   + 626⋅x₁  ⋅x₂   - 194⋅x₁  ⋅x₂   - 662⋅x₁  ⋅x₂   - 755⋅x₁  ⋅x₂   - 230⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    38        50   37         50   36         50   35       50   34        50 ↪
↪ ⋅x₂   + 94⋅x₁  ⋅x₂   + 277⋅x₁  ⋅x₂   + 100⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 49⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    33         50   32         50   31        50   30        50   29          ↪
↪ ⋅x₂   + 120⋅x₁  ⋅x₂   + 192⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   - 136⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 50   28       50   27        50   26        50   25        50   24         5 ↪
↪   ⋅x₂   - 8⋅x₁  ⋅x₂   + 92⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   - 131⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0   23         50   22     50   21        50   20        50   19       50    ↪
↪  ⋅x₂   - 110⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 93⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 18        50   17        50   16        50   15        50   14        50   1 ↪
↪    - 45⋅x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   + 12⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3        50   12     50   11        50   10        50   9     50   8     50  ↪
↪   + 20⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂  - x₁  ⋅x₂  - x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   7       50   6     50   5     50   4       50   3     50   2       49   64 ↪
↪ x₂  - 7⋅x₁  ⋅x₂  + x₁  ⋅x₂  - x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + x₁  ⋅x₂  - 3⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         49   62        49   61        49   60        49   59        49   58  ↪
↪  + 14⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        49   57         49   56         49   55        49   54         49   5 ↪
↪ + 27⋅x₁  ⋅x₂   + 154⋅x₁  ⋅x₂   + 167⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   - 327⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3         49   52         49   51         49   50         49   49         49 ↪
↪   - 401⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   + 445⋅x₁  ⋅x₂   + 742⋅x₁  ⋅x₂   + 503⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    48         49   47          49   46         49   45         49   44       ↪
↪ ⋅x₂   - 215⋅x₁  ⋅x₂   - 1016⋅x₁  ⋅x₂   - 916⋅x₁  ⋅x₂   - 374⋅x₁  ⋅x₂   + 614 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    49   43         49   42         49   41        49   40         49   39    ↪
↪ ⋅x₁  ⋅x₂   + 957⋅x₁  ⋅x₂   + 631⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   - 438⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       49   38        49   37         49   36        49   35        49   34   ↪
↪ 315⋅x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   + 211⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        49   33        49   32        49   31        49   30        49   29   ↪
↪  229⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   - 65⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        49   28        49   27        49   26         49   25         49   24 ↪
↪  212⋅x₁  ⋅x₂   - 88⋅x₁  ⋅x₂   + 91⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   + 168⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         49   23         49   22        49   21        49   20        49   19 ↪
↪  - 27⋅x₁  ⋅x₂   - 133⋅x₁  ⋅x₂   - 94⋅x₁  ⋅x₂   + 68⋅x₁  ⋅x₂   + 93⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         49   18        49   17        49   16        49   15        49   14  ↪
↪  + 74⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   - 22⋅x₁  ⋅x₂   - 54⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        49   13       49   12        49   11        49   10       49   9      ↪
↪ - 20⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂  - x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 49   8       49   7       49   6       49   5       49   4       49   3      ↪
↪   ⋅x₂  + 3⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  - 7⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   48   64        48   63       48   62        48   61        48   60         ↪
↪ x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 32⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   - 19⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 48   59        48   58        48   57        48   56         48   55         ↪
↪   ⋅x₂   - 99⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   + 88⋅x₁  ⋅x₂   + 246⋅x₁  ⋅x₂   + 274⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  48   54        48   53         48   52         48   51         48   50      ↪
↪ ₁  ⋅x₂   - 65⋅x₁  ⋅x₂   - 462⋅x₁  ⋅x₂   - 667⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   + 50 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     48   49         48   48         48   47         48   46         48   45  ↪
↪ 3⋅x₁  ⋅x₂   + 956⋅x₁  ⋅x₂   + 693⋅x₁  ⋅x₂   - 248⋅x₁  ⋅x₂   - 857⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          48   44         48   43         48   42         48   41         48  ↪
↪ - 1042⋅x₁  ⋅x₂   - 219⋅x₁  ⋅x₂   + 511⋅x₁  ⋅x₂   + 781⋅x₁  ⋅x₂   + 407⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   40         48   39         48   38         48   37        48   36        4 ↪
↪ x₂   - 137⋅x₁  ⋅x₂   - 421⋅x₁  ⋅x₂   - 295⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   + 13⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   35        48   34         48   33        48   32         48   31         ↪
↪  ⋅x₂   + 40⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   + 277⋅x₁  ⋅x₂   + 286⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  48   30         48   29         48   28         48   27         48   26     ↪
↪ ₁  ⋅x₂   + 171⋅x₁  ⋅x₂   - 159⋅x₁  ⋅x₂   - 242⋅x₁  ⋅x₂   - 147⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      48   25         48   24        48   23         48   22         48   21  ↪
↪ 02⋅x₁  ⋅x₂   + 176⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   - 256⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        48   20     48   19        48   18        48   17       48   16       ↪
↪ - 94⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 54⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   48   15       48   14        48   13        48   12        48   11         ↪
↪ x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   + 11⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 48   10       48   9       48   8       48   7       48   6       48   5     ↪
↪   ⋅x₂   - 4⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  - 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    48   4     48   3       48   2       47   65       47   64        47   63 ↪
↪ ⋅x₁  ⋅x₂  + x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        47   62        47   61        47   60        47   59        47   58   ↪
↪  - 5⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 48⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        47   57         47   56         47   55         47   54         47    ↪
↪  183⋅x₁  ⋅x₂   - 129⋅x₁  ⋅x₂   + 117⋅x₁  ⋅x₂   + 370⋅x₁  ⋅x₂   + 345⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 53        47   52         47   51         47   50         47   49         47 ↪
↪    - 41⋅x₁  ⋅x₂   - 668⋅x₁  ⋅x₂   - 663⋅x₁  ⋅x₂   - 215⋅x₁  ⋅x₂   + 693⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    48          47   47         47   46         47   45          47   44      ↪
↪ ⋅x₂   + 1096⋅x₁  ⋅x₂   + 658⋅x₁  ⋅x₂   - 184⋅x₁  ⋅x₂   - 1086⋅x₁  ⋅x₂   - 93 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     47   43         47   42         47   41         47   40         47   39  ↪
↪ 8⋅x₁  ⋅x₂   - 316⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   + 551⋅x₁  ⋅x₂   + 366⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        47   38        47   37         47   36        47   35        47   34  ↪
↪ - 61⋅x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   + 139⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   + 68⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         47   33         47   32        47   31         47   30         47    ↪
↪ - 371⋅x₁  ⋅x₂   - 286⋅x₁  ⋅x₂   - 86⋅x₁  ⋅x₂   + 215⋅x₁  ⋅x₂   + 298⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 29        47   28         47   27         47   26        47   25         47  ↪
↪    + 15⋅x₁  ⋅x₂   - 238⋅x₁  ⋅x₂   - 325⋅x₁  ⋅x₂   - 48⋅x₁  ⋅x₂   + 250⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   24         47   23         47   22         47   21         47   20         ↪
↪ x₂   + 349⋅x₁  ⋅x₂   + 180⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   - 133⋅x₁  ⋅x₂   - 110⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  47   19        47   18        47   17        47   16        47   15         ↪
↪ ₁  ⋅x₂   - 35⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   - 19⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 47   14       47   13       47   12        47   11       47   10       47    ↪
↪   ⋅x₂   + 4⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9        47   8       47   7        47   6       47   5       47   4       4 ↪
↪   + 11⋅x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  + 10⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  - 2⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   3     47   2     47          46   65       46   64        46   63        ↪
↪  ⋅x₂  - x₁  ⋅x₂  - x₁  ⋅x₂ + 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   - 33⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  46   62        46   61        46   60         46   59        46   58        ↪
↪ ₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 36⋅x₁  ⋅x₂   + 110⋅x₁  ⋅x₂   + 52⋅x₁  ⋅x₂   - 100⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   46   57         46   56        46   55         46   54         46   53     ↪
↪ x₁  ⋅x₂   - 243⋅x₁  ⋅x₂   - 99⋅x₁  ⋅x₂   + 227⋅x₁  ⋅x₂   + 547⋅x₁  ⋅x₂   + 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      46   52         46   51         46   50          46   49         46   4 ↪
↪ 57⋅x₁  ⋅x₂   - 267⋅x₁  ⋅x₂   - 804⋅x₁  ⋅x₂   - 1016⋅x₁  ⋅x₂   - 248⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8         46   47          46   46         46   45         46   44         4 ↪
↪   + 658⋅x₁  ⋅x₂   + 1122⋅x₁  ⋅x₂   + 771⋅x₁  ⋅x₂   - 186⋅x₁  ⋅x₂   - 729⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   43         46   42        46   41         46   40         46   39        ↪
↪  ⋅x₂   - 684⋅x₁  ⋅x₂   - 39⋅x₁  ⋅x₂   + 222⋅x₁  ⋅x₂   + 395⋅x₁  ⋅x₂   - 53⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  46   38         46   37        46   36         46   35         46   34      ↪
↪ ₁  ⋅x₂   - 105⋅x₁  ⋅x₂   + 79⋅x₁  ⋅x₂   + 180⋅x₁  ⋅x₂   + 224⋅x₁  ⋅x₂   - 24 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     46   33         46   32         46   31         46   30         46   29  ↪
↪ 5⋅x₁  ⋅x₂   - 381⋅x₁  ⋅x₂   - 343⋅x₁  ⋅x₂   + 113⋅x₁  ⋅x₂   + 454⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         46   28       46   27         46   26         46   25        46   24 ↪
↪ + 404⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 445⋅x₁  ⋅x₂   - 370⋅x₁  ⋅x₂   - 76⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          46   23         46   22        46   21        46   20         46    ↪
↪  + 246⋅x₁  ⋅x₂   + 349⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   - 27⋅x₁  ⋅x₂   - 131⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 19        46   18        46   17        46   16        46   15       46   14 ↪
↪    - 93⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        46   13        46   12       46   9       46   8       46   7       4 ↪
↪  + 9⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  - 6⋅x₁  ⋅x₂  + 3⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   6     46   3     46        45   66       45   65        45   64        4 ↪
↪  ⋅x₂  - x₁  ⋅x₂  + x₁  ⋅x₂ - x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   + 12⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 5   63        45   62        45   61        45   60        45   59         4 ↪
↪  ⋅x₂   - 19⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   + 121⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 5   58        45   57         45   56         45   55         45   54        ↪
↪  ⋅x₂   + 25⋅x₁  ⋅x₂   - 285⋅x₁  ⋅x₂   - 377⋅x₁  ⋅x₂   - 220⋅x₁  ⋅x₂   + 349⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   45   53         45   52         45   51        45   50         45   49     ↪
↪ x₁  ⋅x₂   + 754⋅x₁  ⋅x₂   + 512⋅x₁  ⋅x₂   - 79⋅x₁  ⋅x₂   - 916⋅x₁  ⋅x₂   - 8 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      45   48         45   47         45   46          45   45         45   4 ↪
↪ 57⋅x₁  ⋅x₂   - 184⋅x₁  ⋅x₂   + 771⋅x₁  ⋅x₂   + 1026⋅x₁  ⋅x₂   + 570⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4         45   43         45   42         45   41         45   40         45 ↪
↪   - 261⋅x₁  ⋅x₂   - 717⋅x₁  ⋅x₂   - 485⋅x₁  ⋅x₂   - 257⋅x₁  ⋅x₂   + 160⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    39         45   38         45   37        45   36         45   35         ↪
↪ ⋅x₂   - 165⋅x₁  ⋅x₂   - 141⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 376⋅x₁  ⋅x₂   + 650⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  45   34         45   33         45   32         45   31         45   30     ↪
↪ ₁  ⋅x₂   + 242⋅x₁  ⋅x₂   - 256⋅x₁  ⋅x₂   - 599⋅x₁  ⋅x₂   - 309⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      45   29         45   28         45   27         45   26         45   25 ↪
↪ 92⋅x₁  ⋅x₂   + 539⋅x₁  ⋅x₂   + 402⋅x₁  ⋅x₂   - 174⋅x₁  ⋅x₂   - 456⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          45   24        45   23         45   22         45   21         45   ↪
↪  - 424⋅x₁  ⋅x₂   - 76⋅x₁  ⋅x₂   + 250⋅x₁  ⋅x₂   + 176⋅x₁  ⋅x₂   + 168⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  20        45   19        45   18       45   17        45   16       45   15 ↪
↪ ₂   - 29⋅x₁  ⋅x₂   - 70⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      45   14        45   13        45   12        45   11        45   10     ↪
↪  - x₁  ⋅x₂   + 12⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  45   9        45   8        45   7       45   6       45   4       45   3   ↪
↪ ₁  ⋅x₂  - 18⋅x₁  ⋅x₂  - 15⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + 7⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      45   2       45          44   66        44   65       44   64        44 ↪
↪  4⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂ - 3⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 21⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    63     44   62        44   61        44   60       44   59         44   5 ↪
↪ ⋅x₂   + x₁  ⋅x₂   - 48⋅x₁  ⋅x₂   - 62⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 150⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8         44   57        44   56         44   55         44   54         44  ↪
↪   + 241⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   - 270⋅x₁  ⋅x₂   - 512⋅x₁  ⋅x₂   - 134⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   53         44   52         44   51         44   50         44   49         ↪
↪ x₂   + 464⋅x₁  ⋅x₂   + 780⋅x₁  ⋅x₂   + 560⋅x₁  ⋅x₂   - 374⋅x₁  ⋅x₂   - 1042⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   44   48          44   47         44   46         44   45         44   44   ↪
↪ x₁  ⋅x₂   - 1086⋅x₁  ⋅x₂   - 186⋅x₁  ⋅x₂   + 570⋅x₁  ⋅x₂   + 940⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        44   43        44   42        44   41        44   40         44   39  ↪
↪  477⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 98⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   + 264⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         44   38         44   37         44   36        44   35         44    ↪
↪ - 169⋅x₁  ⋅x₂   - 386⋅x₁  ⋅x₂   - 531⋅x₁  ⋅x₂   - 91⋅x₁  ⋅x₂   + 514⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 34         44   33         44   32         44   31         44   30         4 ↪
↪    + 568⋅x₁  ⋅x₂   + 121⋅x₁  ⋅x₂   - 571⋅x₁  ⋅x₂   - 675⋅x₁  ⋅x₂   - 333⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   29         44   28         44   27         44   26        44   25        ↪
↪  ⋅x₂   + 380⋅x₁  ⋅x₂   + 764⋅x₁  ⋅x₂   + 440⋅x₁  ⋅x₂   - 62⋅x₁  ⋅x₂   - 456⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   44   24         44   23        44   22         44   21         44   20     ↪
↪ x₁  ⋅x₂   - 370⋅x₁  ⋅x₂   - 48⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   + 8 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     44   19       44   18        44   17        44   16        44   15       ↪
↪ 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   - 60⋅x₁  ⋅x₂   - 45⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   44   14        44   13       44   12        44   11       44   10        4 ↪
↪ x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 28⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 27⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   9       44   7       44   5       44   4       44   3       44   2     4 ↪
↪  ⋅x₂  + 4⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  + 6⋅x₁  ⋅x₂  - 6⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4     43   66        43   65        43   64        43   63        43   62    ↪
↪   + x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 31⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      43   61        43   60        43   59        43   58         43   57    ↪
↪ 13⋅x₁  ⋅x₂   - 68⋅x₁  ⋅x₂   - 95⋅x₁  ⋅x₂   + 56⋅x₁  ⋅x₂   + 257⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       43   56       43   55         43   54         43   53         43   52  ↪
↪ 236⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 522⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 175⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         43   51         43   50         43   49         43   48         43   ↪
↪ + 567⋅x₁  ⋅x₂   + 983⋅x₁  ⋅x₂   + 614⋅x₁  ⋅x₂   - 219⋅x₁  ⋅x₂   - 938⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  47         43   46         43   45         43   44         43   43          ↪
↪ ₂   - 729⋅x₁  ⋅x₂   - 261⋅x₁  ⋅x₂   + 477⋅x₁  ⋅x₂   + 374⋅x₁  ⋅x₂   + 113⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 43   42         43   41        43   40         43   39        43   38        ↪
↪   ⋅x₂   - 112⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   + 354⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   - 213⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   43   37         43   36         43   35         43   34         43   33    ↪
↪ x₁  ⋅x₂   - 691⋅x₁  ⋅x₂   - 449⋅x₁  ⋅x₂   + 225⋅x₁  ⋅x₂   + 901⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       43   32        43   31         43   30         43   29         43   28 ↪
↪ 890⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   - 601⋅x₁  ⋅x₂   - 882⋅x₁  ⋅x₂   - 358⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          43   27         43   26         43   25         43   24         43  ↪
↪  + 404⋅x₁  ⋅x₂   + 662⋅x₁  ⋅x₂   + 440⋅x₁  ⋅x₂   - 174⋅x₁  ⋅x₂   - 445⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   23         43   22         43   21        43   20        43   19        43 ↪
↪ x₂   - 325⋅x₁  ⋅x₂   - 147⋅x₁  ⋅x₂   + 91⋅x₁  ⋅x₂   + 92⋅x₁  ⋅x₂   + 76⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    18        43   17        43   16       43   15       43   14        43    ↪
↪ ⋅x₂   + 48⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 13        43   12        43   11        43   10        43   9       43   8   ↪
↪    - 17⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      43   7     43   6       43   5       43   4     43   3       43   2     ↪
↪  9⋅x₁  ⋅x₂  + x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  + 7⋅x₁  ⋅x₂  - x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  - 5 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    43          43       42   67       42   66       42   65       42   64    ↪
↪ ⋅x₁  ⋅x₂ - 3⋅x₁   + 2⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      42   63        42   62        42   61        42   60         42   59    ↪
↪ 14⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 182⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       42   58        42   57         42   56         42   55         42   54 ↪
↪ 137⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   + 300⋅x₁  ⋅x₂   + 344⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          42   53         42   52        42   51         42   50         42   ↪
↪  - 541⋅x₁  ⋅x₂   - 660⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   + 626⋅x₁  ⋅x₂   + 957⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  49         42   48         42   47         42   46         42   45        4 ↪
↪ ₂   + 511⋅x₁  ⋅x₂   - 316⋅x₁  ⋅x₂   - 684⋅x₁  ⋅x₂   - 717⋅x₁  ⋅x₂   + 18⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2   44         42   43         42   42       42   41        42   40          ↪
↪  ⋅x₂   + 113⋅x₁  ⋅x₂   + 186⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 44⋅x₁  ⋅x₂   + 538⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 42   39         42   38         42   37         42   36          42   35     ↪
↪   ⋅x₂   + 604⋅x₁  ⋅x₂   + 294⋅x₁  ⋅x₂   - 616⋅x₁  ⋅x₂   - 1002⋅x₁  ⋅x₂   - 7 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      42   34         42   33         42   32         42   31        42   30  ↪
↪ 67⋅x₁  ⋅x₂   + 212⋅x₁  ⋅x₂   + 896⋅x₁  ⋅x₂   + 790⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         42   29         42   28         42   27         42   26         42   ↪
↪ - 818⋅x₁  ⋅x₂   - 854⋅x₁  ⋅x₂   - 226⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 764⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  25         42   24       42   23         42   22         42   21        42  ↪
↪ ₂   + 402⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 238⋅x₁  ⋅x₂   - 242⋅x₁  ⋅x₂   - 88⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   20       42   19        42   18        42   17        42   16        42    ↪
↪ x₂   - 8⋅x₁  ⋅x₂   + 36⋅x₁  ⋅x₂   + 34⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15        42   14        42   13        42   12        42   11        42   1 ↪
↪    + 33⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0        42   9       42   8        42   7     42   6        42   5     42   ↪
↪   + 24⋅x₁  ⋅x₂  + 7⋅x₁  ⋅x₂  + 17⋅x₁  ⋅x₂  + x₁  ⋅x₂  - 14⋅x₁  ⋅x₂  + x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  4       42   3       42   2       42        42       41   67     41   66    ↪
↪ ₂  + 4⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂ + x₁   - 2⋅x₁  ⋅x₂   - x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     41   65        41   64        41   63        41   62        41   61      ↪
↪ 9⋅x₁  ⋅x₂   - 26⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   + 70⋅x₁  ⋅x₂   + 96 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    41   60        41   59         41   58        41   57         41   56     ↪
↪ ⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   + 188⋅x₁  ⋅x₂   + 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      41   55         41   54         41   53         41   52         41   51 ↪
↪ 69⋅x₁  ⋅x₂   + 289⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   - 792⋅x₁  ⋅x₂   - 722⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          41   50         41   49         41   48         41   47        41   ↪
↪  - 194⋅x₁  ⋅x₂   + 631⋅x₁  ⋅x₂   + 781⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   - 39⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  46         41   45        41   44         41   43       41   42         41  ↪
↪ ₂   - 485⋅x₁  ⋅x₂   - 98⋅x₁  ⋅x₂   - 112⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 362⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   41         41   40        41   39         41   38         41   37          ↪
↪ x₂   - 402⋅x₁  ⋅x₂   + 96⋅x₁  ⋅x₂   + 710⋅x₁  ⋅x₂   + 933⋅x₁  ⋅x₂   + 206⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 41   36         41   35          41   34         41   33         41   32     ↪
↪   ⋅x₂   - 651⋅x₁  ⋅x₂   - 1179⋅x₁  ⋅x₂   - 604⋅x₁  ⋅x₂   + 380⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       41   31         41   30        41   29         41   28         41   27 ↪
↪ 099⋅x₁  ⋅x₂   + 969⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   - 810⋅x₁  ⋅x₂   - 854⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          41   26         41   25         41   24         41   23        41   ↪
↪  - 358⋅x₁  ⋅x₂   + 380⋅x₁  ⋅x₂   + 539⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  22         41   21         41   20         41   19        41   18        41 ↪
↪ ₂   - 159⋅x₁  ⋅x₂   - 212⋅x₁  ⋅x₂   - 136⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   - 30⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    17        41   16        41   15         41   14        41   13        41 ↪
↪ ⋅x₂   + 85⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 101⋅x₁  ⋅x₂   + 39⋅x₁  ⋅x₂   + 31⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    12        41   11        41   10       41   9        41   8       41   7  ↪
↪ ⋅x₂   + 19⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂  - 19⋅x₁  ⋅x₂  + 8⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       41   6        41   5       41   4       41   3       41   2       41   ↪
↪ + 2⋅x₁  ⋅x₂  - 10⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         41     40   67        40   66        40   65       40   64        40 ↪
↪ ₂ + 4⋅x₁   + x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 30⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    63        40   62        40   61         40   60       40   59         40 ↪
↪ ⋅x₂   - 20⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 106⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 165⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    58         40   57         40   56         40   55         40   54        ↪
↪ ⋅x₂   - 302⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   + 287⋅x₁  ⋅x₂   + 559⋅x₁  ⋅x₂   + 442⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   40   53         40   52         40   51         40   50        40   49     ↪
↪ x₁  ⋅x₂   - 177⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 662⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      40   48         40   47         40   46         40   45        40   44  ↪
↪ 07⋅x₁  ⋅x₂   + 551⋅x₁  ⋅x₂   + 222⋅x₁  ⋅x₂   - 257⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        40   43        40   42         40   41         40   40         40   3 ↪
↪ - 87⋅x₁  ⋅x₂   + 44⋅x₁  ⋅x₂   - 402⋅x₁  ⋅x₂   - 662⋅x₁  ⋅x₂   - 569⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9         40   38          40   37          40   36         40   35          ↪
↪   + 312⋅x₁  ⋅x₂   + 1179⋅x₁  ⋅x₂   + 1166⋅x₁  ⋅x₂   + 371⋅x₁  ⋅x₂   - 894⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 40   34          40   33         40   32         40   31          40   30    ↪
↪   ⋅x₂   - 1191⋅x₁  ⋅x₂   - 690⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 1207⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       40   29        40   28         40   27         40   26         40   25 ↪
↪ 800⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   - 818⋅x₁  ⋅x₂   - 882⋅x₁  ⋅x₂   - 333⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          40   24         40   23         40   22         40   21        40   ↪
↪  + 192⋅x₁  ⋅x₂   + 454⋅x₁  ⋅x₂   + 298⋅x₁  ⋅x₂   + 171⋅x₁  ⋅x₂   - 65⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  20        40   19        40   18        40   17        40   16        40    ↪
↪ ₂   - 12⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 75⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   - 88⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15        40   14        40   13        40   12        40   11        40   1 ↪
↪    + 30⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   - 26⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0        40   9        40   8        40   7        40   6        40   5      ↪
↪   - 27⋅x₁  ⋅x₂  - 24⋅x₁  ⋅x₂  + 17⋅x₁  ⋅x₂  + 24⋅x₁  ⋅x₂  + 14⋅x₁  ⋅x₂  - 2⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   40   4     40   2       40          40     39   68       39   67       39  ↪
↪ x₁  ⋅x₂  - x₁  ⋅x₂  - 6⋅x₁  ⋅x₂ - 2⋅x₁   - x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 5⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   66        39   65       39   64        39   63        39   62        39    ↪
↪ x₂   + 17⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 39⋅x₁  ⋅x₂   - 16⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 61         39   60         39   59        39   58         39   57         39 ↪
↪    + 109⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   - 222⋅x₁  ⋅x₂   - 304⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    56         39   55         39   54         39   53         39   52        ↪
↪ ⋅x₂   - 124⋅x₁  ⋅x₂   + 320⋅x₁  ⋅x₂   + 499⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   - 224⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   39   51         39   50         39   49         39   48         39   47    ↪
↪ x₁  ⋅x₂   - 755⋅x₁  ⋅x₂   - 438⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   + 366⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       39   46         39   45         39   44         39   43         39   4 ↪
↪ 395⋅x₁  ⋅x₂   + 160⋅x₁  ⋅x₂   + 264⋅x₁  ⋅x₂   + 354⋅x₁  ⋅x₂   + 538⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2        39   41         39   40          39   39         39   38         39 ↪
↪   + 96⋅x₁  ⋅x₂   - 569⋅x₁  ⋅x₂   - 1242⋅x₁  ⋅x₂   - 806⋅x₁  ⋅x₂   + 147⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    37          39   36          39   35        39   34         39   33       ↪
↪ ⋅x₂   + 1066⋅x₁  ⋅x₂   + 1205⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   - 919⋅x₁  ⋅x₂   - 134 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     39   32         39   31         39   30          39   29         39   28 ↪
↪ 9⋅x₁  ⋅x₂   - 649⋅x₁  ⋅x₂   + 652⋅x₁  ⋅x₂   + 1207⋅x₁  ⋅x₂   + 969⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         39   27         39   26         39   25         39   24         39   ↪
↪  + 87⋅x₁  ⋅x₂   - 601⋅x₁  ⋅x₂   - 675⋅x₁  ⋅x₂   - 309⋅x₁  ⋅x₂   + 113⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  23         39   22         39   21        39   20        39   19        39  ↪
↪ ₂   + 215⋅x₁  ⋅x₂   + 286⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   - 78⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   18         39   17        39   16         39   15       39   14        39  ↪
↪ x₂   - 114⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   - 116⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 14⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   13        39   12        39   11        39   10        39   9        39    ↪
↪ x₂   + 65⋅x₁  ⋅x₂   + 89⋅x₁  ⋅x₂   + 47⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂  - 29⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8        39   7        39   5       39   4       39   3     39   2       39  ↪
↪   - 21⋅x₁  ⋅x₂  + 13⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + x₁  ⋅x₂  + 2⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          39     38   68       38   67        38   66        38   65        3 ↪
↪ x₂ - 2⋅x₁   + x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 15⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   64       38   63        38   62        38   61        38   60         38 ↪
↪  ⋅x₂   + 8⋅x₁  ⋅x₂   - 38⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 120⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    59         38   58        38   57         38   56         38   55       3 ↪
↪ ⋅x₂   + 163⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   - 280⋅x₁  ⋅x₂   - 387⋅x₁  ⋅x₂   - 3⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   54         38   53         38   52         38   51         38   50       ↪
↪  ⋅x₂   + 364⋅x₁  ⋅x₂   + 565⋅x₁  ⋅x₂   + 373⋅x₁  ⋅x₂   - 230⋅x₁  ⋅x₂   - 315 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    38   49         38   48        38   47        38   46         38   45     ↪
↪ ⋅x₁  ⋅x₂   - 421⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   - 165⋅x₁  ⋅x₂   - 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      38   44        38   43         38   42         38   41         38   40  ↪
↪ 69⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   + 604⋅x₁  ⋅x₂   + 710⋅x₁  ⋅x₂   + 312⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         38   39          38   38         38   37         38   36          38 ↪
↪ - 806⋅x₁  ⋅x₂   - 1122⋅x₁  ⋅x₂   - 815⋅x₁  ⋅x₂   + 393⋅x₁  ⋅x₂   + 1480⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    35          38   34         38   33          38   32          38   31     ↪
↪ ⋅x₂   + 1276⋅x₁  ⋅x₂   + 261⋅x₁  ⋅x₂   - 1062⋅x₁  ⋅x₂   - 1418⋅x₁  ⋅x₂   - 6 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      38   30         38   29          38   28         38   27        38   26 ↪
↪ 49⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 1099⋅x₁  ⋅x₂   + 790⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          38   25         38   24         38   23        38   22         38   ↪
↪  - 571⋅x₁  ⋅x₂   - 599⋅x₁  ⋅x₂   - 343⋅x₁  ⋅x₂   - 86⋅x₁  ⋅x₂   + 277⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  21        38   20         38   19        38   18        38   17        38   ↪
↪ ₂   + 94⋅x₁  ⋅x₂   + 192⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   + 71⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  16        38   15        38   14         38   13        38   12        38   ↪
↪ ₂   - 49⋅x₁  ⋅x₂   - 52⋅x₁  ⋅x₂   - 125⋅x₁  ⋅x₂   - 43⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  11        38   10       38   9        38   8        38   7       38   6     ↪
↪ ₂   + 75⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂  - 10⋅x₁  ⋅x₂  - 22⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     38   5       38   3       38   2       38          38       37   68      ↪
↪ 1⋅x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂ - 2⋅x₁   + 2⋅x₁  ⋅x₂   + 5⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   37   67       37   66     37   65        37   64        37   63        37  ↪
↪ x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 16⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   - 15⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   62        37   61        37   60        37   59         37   58         37 ↪
↪ x₂   - 81⋅x₁  ⋅x₂   - 76⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x₂   + 182⋅x₁  ⋅x₂   + 159⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    57        37   56         37   55         37   54        37   53          ↪
↪ ⋅x₂   - 31⋅x₁  ⋅x₂   - 375⋅x₁  ⋅x₂   - 267⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   + 335⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 37   52         37   51        37   50        37   49         37   48        ↪
↪   ⋅x₂   + 455⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   - 295⋅x₁  ⋅x₂   - 69⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  37   47         37   46         37   45         37   44         37   43     ↪
↪ ₁  ⋅x₂   - 105⋅x₁  ⋅x₂   - 141⋅x₁  ⋅x₂   - 386⋅x₁  ⋅x₂   - 213⋅x₁  ⋅x₂   + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      37   42         37   41          37   40         37   39         37   3 ↪
↪ 94⋅x₁  ⋅x₂   + 933⋅x₁  ⋅x₂   + 1179⋅x₁  ⋅x₂   + 147⋅x₁  ⋅x₂   - 815⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8          37   37         37   36         37   35          37   34          ↪
↪   - 1522⋅x₁  ⋅x₂   - 977⋅x₁  ⋅x₂   + 372⋅x₁  ⋅x₂   + 1345⋅x₁  ⋅x₂   + 1325⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  37   33         37   32          37   31          37   30         37   29   ↪
↪ ₁  ⋅x₂   + 112⋅x₁  ⋅x₂   - 1062⋅x₁  ⋅x₂   - 1349⋅x₁  ⋅x₂   - 690⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        37   28         37   27         37   26         37   25         37    ↪
↪  380⋅x₁  ⋅x₂   + 896⋅x₁  ⋅x₂   + 890⋅x₁  ⋅x₂   + 121⋅x₁  ⋅x₂   - 256⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 24         37   23         37   22        37   21        37   20         37  ↪
↪    - 381⋅x₁  ⋅x₂   - 286⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   + 120⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   19        37   18        37   17        37   16        37   15       37    ↪
↪ x₂   + 22⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 78⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 14         37   13         37   12        37   11        37   10        37   ↪
↪    - 124⋅x₁  ⋅x₂   - 115⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  9        37   8        37   7        37   6       37   5       37   4       ↪
↪ ₂  + 21⋅x₁  ⋅x₂  - 32⋅x₁  ⋅x₂  - 34⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 8⋅x₁  ⋅x₂  + 7⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  37   3     37   2       37          37       36   68     36   67        36  ↪
↪ ₁  ⋅x₂  - x₁  ⋅x₂  + 6⋅x₁  ⋅x₂ + 4⋅x₁   - 2⋅x₁  ⋅x₂   + x₁  ⋅x₂   - 10⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   66        36   65       36   64        36   63        36   62       36   6 ↪
↪ x₂   - 20⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 31⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1        36   60        36   59        36   58         36   57         36    ↪
↪   - 93⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 206⋅x₁  ⋅x₂   + 172⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 56         36   55         36   54         36   53        36   52         36 ↪
↪    - 191⋅x₁  ⋅x₂   - 307⋅x₁  ⋅x₂   - 390⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   + 286⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    51         36   50         36   49        36   48         36   47         ↪
↪ ⋅x₂   + 277⋅x₁  ⋅x₂   + 211⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   + 139⋅x₁  ⋅x₂   + 79⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 36   46        36   45         36   44         36   43         36   42       ↪
↪   ⋅x₂   + 40⋅x₁  ⋅x₂   - 531⋅x₁  ⋅x₂   - 691⋅x₁  ⋅x₂   - 616⋅x₁  ⋅x₂   + 206 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    36   41          36   40          36   39         36   38         36   37 ↪
↪ ⋅x₁  ⋅x₂   + 1166⋅x₁  ⋅x₂   + 1066⋅x₁  ⋅x₂   + 393⋅x₁  ⋅x₂   - 977⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪           36   36         36   35         36   34          36   33           ↪
↪  - 1528⋅x₁  ⋅x₂   - 910⋅x₁  ⋅x₂   + 398⋅x₁  ⋅x₂   + 1488⋅x₁  ⋅x₂   + 1325⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 36   32         36   31         36   30          36   29         36   28     ↪
↪   ⋅x₂   + 261⋅x₁  ⋅x₂   - 919⋅x₁  ⋅x₂   - 1191⋅x₁  ⋅x₂   - 604⋅x₁  ⋅x₂   + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      36   27         36   26         36   25         36   24         36   23 ↪
↪ 12⋅x₁  ⋅x₂   + 901⋅x₁  ⋅x₂   + 568⋅x₁  ⋅x₂   + 242⋅x₁  ⋅x₂   - 245⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          36   22         36   21         36   20        36   19        36    ↪
↪  - 371⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   - 229⋅x₁  ⋅x₂   - 49⋅x₁  ⋅x₂   - 96⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 18        36   17         36   16         36   15         36   14        36  ↪
↪    + 15⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   + 220⋅x₁  ⋅x₂   + 146⋅x₁  ⋅x₂   + 28⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   13         36   12         36   11        36   10        36   9        36  ↪
↪ x₂   - 105⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 38⋅x₁  ⋅x₂  + 61⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   8       36   7        36   6       36   5       36   4       36   3        ↪
↪ x₂  - 5⋅x₁  ⋅x₂  - 28⋅x₁  ⋅x₂  - 8⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  - 6⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 36   2       36        36     35   69       35   68        35   67        35 ↪
↪   ⋅x₂  - 4⋅x₁  ⋅x₂ + x₁   + x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 11⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    66       35   65        35   64       35   63        35   62        35    ↪
↪ ⋅x₂   - 3⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 19⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 61         35   60         35   59        35   58         35   57         35 ↪
↪    - 111⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 77⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 295⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    56         35   55        35   54         35   53         35   52         ↪
↪ ⋅x₂   + 126⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   - 293⋅x₁  ⋅x₂   - 173⋅x₁  ⋅x₂   - 23⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 35   51         35   50        35   49        35   48        35   47         ↪
↪   ⋅x₂   + 100⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   + 180⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  35   46         35   45        35   44         35   43          35   42     ↪
↪ ₁  ⋅x₂   + 376⋅x₁  ⋅x₂   - 91⋅x₁  ⋅x₂   - 449⋅x₁  ⋅x₂   - 1002⋅x₁  ⋅x₂   - 6 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      35   41         35   40          35   39          35   38         35    ↪
↪ 51⋅x₁  ⋅x₂   + 371⋅x₁  ⋅x₂   + 1205⋅x₁  ⋅x₂   + 1480⋅x₁  ⋅x₂   + 372⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 37         35   36          35   35          35   34         35   33         ↪
↪    - 910⋅x₁  ⋅x₂   - 1546⋅x₁  ⋅x₂   - 1014⋅x₁  ⋅x₂   + 398⋅x₁  ⋅x₂   + 1345⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   35   32          35   31        35   30         35   29          35   28   ↪
↪ x₁  ⋅x₂   + 1276⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   - 894⋅x₁  ⋅x₂   - 1179⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        35   27         35   26         35   25         35   24         35    ↪
↪  767⋅x₁  ⋅x₂   + 225⋅x₁  ⋅x₂   + 514⋅x₁  ⋅x₂   + 650⋅x₁  ⋅x₂   + 224⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                     (x₁ - 1) ↪

↪ 23        35   22        35   21        35   20       35   19         35   1 ↪
↪    + 68⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 168⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                             3           2                    ↪
↪ 11         4          6           ⎛       2⎞  ⎛       3⎞  ⎛       4⎞ ⎛  2    ↪
↪   ⋅(x₁ + 1) ⋅(x₁ - x₂) ⋅(x₁ + x₂)⋅⎝x₁ - x₂ ⎠ ⋅⎝x₁ - x₂ ⎠ ⋅⎝x₁ - x₂ ⎠⋅⎝x₁  +  ↪

↪ 8         35   17         35   16        35   15         35   14         35  ↪
↪   - 193⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 136⋅x₁  ⋅x₂   + 130⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪              3                       2                                       ↪
↪  ⎞ ⎛  2     ⎞  ⎛  2     3⎞ ⎛  3     ⎞  ⎛  3     2⎞ ⎛  4     ⎞         11     ↪
↪ 1⎠⋅⎝x₁  - x₂⎠ ⋅⎝x₁  - x₂ ⎠⋅⎝x₁  - x₂⎠ ⋅⎝x₁  - x₂ ⎠⋅⎝x₁  - x₂⎠⋅(x₂ - 1)  ⋅(x₂ ↪

↪   13        35   12         35   11        35   10       35   9        35    ↪
↪ x₂   - 41⋅x₁  ⋅x₂   - 142⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂  + 86⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                        3             2       ↪
↪      4 ⎛  2    ⎞            6            2 ⎛     2    ⎞  ⎛     3    ⎞  ⎛     ↪
↪  + 1) ⋅⎝x₂  + 1⎠⋅(x₁⋅x₂ - 1) ⋅(x₁⋅x₂ + 1) ⋅⎝x₁⋅x₂  - 1⎠ ⋅⎝x₁⋅x₂  - 1⎠ ⋅⎝x₁⋅x ↪

↪ 8        35   7       35   6       35   5     35   4       35   3       35   ↪
↪   + 35⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  - x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  - 4⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                     3                           2                            ↪
↪  4    ⎞ ⎛  2       ⎞  ⎛  2   3    ⎞ ⎛  3       ⎞  ⎛  3   2    ⎞ ⎛  4       ⎞ ↪
↪ ₂  - 1⎠⋅⎝x₁ ⋅x₂ - 1⎠ ⋅⎝x₁ ⋅x₂  - 1⎠⋅⎝x₁ ⋅x₂ - 1⎠ ⋅⎝x₁ ⋅x₂  - 1⎠⋅⎝x₁ ⋅x₂ - 1⎠ ↪

↪  2       35          35       34   69       34   68       34   67       34   ↪
↪ ₂  - 5⋅x₁  ⋅x₂ - 3⋅x₁   - 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                2               2                                             ↪
↪  ⎛  2         ⎞  ⎛  2         ⎞  ⎛  4     3     2         ⎞ ⎛  4     3     2 ↪
↪ ⋅⎝x₁  + x₁ + 1⎠ ⋅⎝x₂  + x₂ + 1⎠ ⋅⎝x₁  + x₁  + x₁  + x₁ + 1⎠⋅⎝x₂  + x₂  + x₂  ↪

↪  66     34   65       34   64       34   63        34   62        34   61    ↪
↪ ₂   - x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   + 86⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪          ⎞                                                                   ↪
↪  + x₂ + 1⎠                                                                   ↪

↪     34   60        34   59         34   58        34   57         34   56    ↪
↪ 3⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   - 142⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   + 130⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       34   55        34   54         34   53         34   52         34   51 ↪
↪ 136⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   - 193⋅x₁  ⋅x₂   - 168⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        34   50        34   49        34   48        34   47         34   46  ↪
↪  - 6⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 68⋅x₁  ⋅x₂   + 224⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         34   45         34   44         34   43         34   42          34  ↪
↪ + 650⋅x₁  ⋅x₂   + 514⋅x₁  ⋅x₂   + 225⋅x₁  ⋅x₂   - 767⋅x₁  ⋅x₂   - 1179⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   41         34   40        34   39          34   38          34   37        ↪
↪ x₂   - 894⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   + 1276⋅x₁  ⋅x₂   + 1345⋅x₁  ⋅x₂   + 398⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   34   36          34   35          34   34         34   33         34   32  ↪
↪ x₁  ⋅x₂   - 1014⋅x₁  ⋅x₂   - 1546⋅x₁  ⋅x₂   - 910⋅x₁  ⋅x₂   + 372⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          34   31          34   30         34   29         34   28          3 ↪
↪ + 1480⋅x₁  ⋅x₂   + 1205⋅x₁  ⋅x₂   + 371⋅x₁  ⋅x₂   - 651⋅x₁  ⋅x₂   - 1002⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   27         34   26        34   25         34   24         34   23        ↪
↪  ⋅x₂   - 449⋅x₁  ⋅x₂   - 91⋅x₁  ⋅x₂   + 376⋅x₁  ⋅x₂   + 180⋅x₁  ⋅x₂   + 84⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  34   22        34   21        34   20         34   19        34   18        ↪
↪ ₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   + 100⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   - 173⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   34   17         34   16        34   15         34   14         34   13     ↪
↪ x₁  ⋅x₂   - 293⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   + 126⋅x₁  ⋅x₂   + 295⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      34   12        34   11         34   10         34   9        34   8     ↪
↪ 37⋅x₁  ⋅x₂   - 77⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 111⋅x₁  ⋅x₂  + 18⋅x₁  ⋅x₂  + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     34   7       34   6        34   5       34   4        34   3        34   ↪
↪ 9⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  - 14⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + 11⋅x₁  ⋅x₂  + 10⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  2       34        34     33   69       33   68       33   67       33   66  ↪
↪ ₂  + 3⋅x₁  ⋅x₂ + x₁   + x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       33   65       33   64        33   63       33   62        33   61      ↪
↪ - 3⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 28⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 61⋅x₁  ⋅x₂   + 38 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    33   60        33   59         33   58         33   57        33   56     ↪
↪ ⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 105⋅x₁  ⋅x₂   + 28⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      33   55         33   54         33   53        33   52        33   51   ↪
↪ 46⋅x₁  ⋅x₂   + 220⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   - 96⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       33   50         33   49         33   48         33   47         33   4 ↪
↪  49⋅x₁  ⋅x₂   - 229⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   - 371⋅x₁  ⋅x₂   - 245⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6         33   45         33   44         33   43         33   42         33 ↪
↪   + 242⋅x₁  ⋅x₂   + 568⋅x₁  ⋅x₂   + 901⋅x₁  ⋅x₂   + 212⋅x₁  ⋅x₂   - 604⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    41          33   40         33   39         33   38          33   37      ↪
↪ ⋅x₂   - 1191⋅x₁  ⋅x₂   - 919⋅x₁  ⋅x₂   + 261⋅x₁  ⋅x₂   + 1325⋅x₁  ⋅x₂   + 14 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      33   36         33   35         33   34          33   33         33   3 ↪
↪ 88⋅x₁  ⋅x₂   + 398⋅x₁  ⋅x₂   - 910⋅x₁  ⋅x₂   - 1528⋅x₁  ⋅x₂   - 977⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2         33   31          33   30          33   29         33   28          ↪
↪   + 393⋅x₁  ⋅x₂   + 1066⋅x₁  ⋅x₂   + 1166⋅x₁  ⋅x₂   + 206⋅x₁  ⋅x₂   - 616⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 33   27         33   26         33   25        33   24        33   23        ↪
↪   ⋅x₂   - 691⋅x₁  ⋅x₂   - 531⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 79⋅x₁  ⋅x₂   + 139⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   33   22        33   21         33   20         33   19         33   18     ↪
↪ x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   + 211⋅x₁  ⋅x₂   + 277⋅x₁  ⋅x₂   + 286⋅x₁  ⋅x₂   - 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     33   17         33   16         33   15         33   14         33   13  ↪
↪ 1⋅x₁  ⋅x₂   - 390⋅x₁  ⋅x₂   - 307⋅x₁  ⋅x₂   - 191⋅x₁  ⋅x₂   + 172⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         33   12        33   11        33   10        33   9       33   8     ↪
↪ + 206⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   - 93⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  + 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     33   7        33   6       33   5        33   4        33   3     33   2 ↪
↪ 3⋅x₁  ⋅x₂  + 31⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  - 20⋅x₁  ⋅x₂  - 10⋅x₁  ⋅x₂  + x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        33          32   69       32   68     32   67       32   66       32  ↪
↪  - 2⋅x₁  ⋅x₂ + 4⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 8⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   65       32   64        32   63        32   62        32   61        32    ↪
↪ x₂   + 5⋅x₁  ⋅x₂   - 34⋅x₁  ⋅x₂   - 32⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 60        32   59        32   58         32   57         32   56       32    ↪
↪    + 74⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 115⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 55        32   54        32   53        32   52        32   51         32    ↪
↪    + 78⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   + 22⋅x₁  ⋅x₂   + 120⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 50        32   49        32   48         32   47         32   46         32  ↪
↪    - 35⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   - 286⋅x₁  ⋅x₂   - 381⋅x₁  ⋅x₂   - 256⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   45         32   44         32   43         32   42         32   41         ↪
↪ x₂   + 121⋅x₁  ⋅x₂   + 890⋅x₁  ⋅x₂   + 896⋅x₁  ⋅x₂   + 380⋅x₁  ⋅x₂   - 690⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  32   40          32   39          32   38         32   37          32   36  ↪
↪ ₁  ⋅x₂   - 1349⋅x₁  ⋅x₂   - 1062⋅x₁  ⋅x₂   + 112⋅x₁  ⋅x₂   + 1325⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          32   35         32   34         32   33          32   32         32 ↪
↪ + 1345⋅x₁  ⋅x₂   + 372⋅x₁  ⋅x₂   - 977⋅x₁  ⋅x₂   - 1522⋅x₁  ⋅x₂   - 815⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    31         32   30          32   29         32   28         32   27       ↪
↪ ⋅x₂   + 147⋅x₁  ⋅x₂   + 1179⋅x₁  ⋅x₂   + 933⋅x₁  ⋅x₂   + 294⋅x₁  ⋅x₂   - 213 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    32   26         32   25         32   24         32   23        32   22    ↪
↪ ⋅x₁  ⋅x₂   - 386⋅x₁  ⋅x₂   - 141⋅x₁  ⋅x₂   - 105⋅x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       32   21        32   20        32   19         32   18         32   17  ↪
↪ 295⋅x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   + 335⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        32   16         32   15         32   14        32   13         32   1 ↪
↪ - 61⋅x₁  ⋅x₂   - 267⋅x₁  ⋅x₂   - 375⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   + 159⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2         32   11        32   10        32   9        32   8        32   7   ↪
↪   + 182⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x₂   - 76⋅x₁  ⋅x₂  - 81⋅x₁  ⋅x₂  - 15⋅x₁  ⋅x₂  + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       32   6        32   5     32   4       32   3       32   2       32     ↪
↪  30⋅x₁  ⋅x₂  + 16⋅x₁  ⋅x₂  - x₁  ⋅x₂  - 4⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       31   69       31   68       31   67       31   66        31   64       ↪
↪ - 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 21⋅x₁  ⋅x₂   - 5⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  31   63        31   62        31   61       31   60        31   59        3 ↪
↪ ₁  ⋅x₂   - 22⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 75⋅x₁  ⋅x₂   + 26⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   58        31   57         31   56        31   55        31   54        3 ↪
↪  ⋅x₂   - 43⋅x₁  ⋅x₂   - 125⋅x₁  ⋅x₂   - 52⋅x₁  ⋅x₂   - 49⋅x₁  ⋅x₂   + 71⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   53        31   52        31   51         31   50        31   49          ↪
↪  ⋅x₂   + 59⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   + 192⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 277⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 31   48        31   47         31   46         31   45         31   44       ↪
↪   ⋅x₂   - 86⋅x₁  ⋅x₂   - 343⋅x₁  ⋅x₂   - 599⋅x₁  ⋅x₂   - 571⋅x₁  ⋅x₂   + 80⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   31   43         31   42          31   41         31   40         31   39   ↪
↪ x₁  ⋅x₂   + 790⋅x₁  ⋅x₂   + 1099⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   - 649⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         31   38          31   37         31   36          31   35          3 ↪
↪  1418⋅x₁  ⋅x₂   - 1062⋅x₁  ⋅x₂   + 261⋅x₁  ⋅x₂   + 1276⋅x₁  ⋅x₂   + 1480⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   34         31   33         31   32          31   31         31   30      ↪
↪  ⋅x₂   + 393⋅x₁  ⋅x₂   - 815⋅x₁  ⋅x₂   - 1122⋅x₁  ⋅x₂   - 806⋅x₁  ⋅x₂   + 31 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     31   29         31   28         31   27        31   26         31   25   ↪
↪ 2⋅x₁  ⋅x₂   + 710⋅x₁  ⋅x₂   + 604⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   - 169⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        31   24        31   23        31   22         31   21         31   20 ↪
↪  165⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   - 421⋅x₁  ⋅x₂   - 315⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          31   19         31   18         31   17         31   16       31    ↪
↪  - 230⋅x₁  ⋅x₂   + 373⋅x₁  ⋅x₂   + 565⋅x₁  ⋅x₂   + 364⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15         31   14         31   13        31   12         31   11         31 ↪
↪    - 387⋅x₁  ⋅x₂   - 280⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   + 163⋅x₁  ⋅x₂   + 120⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    10        31   9        31   8        31   7       31   6        31   5   ↪
↪ ⋅x₂   + 20⋅x₁  ⋅x₂  - 63⋅x₁  ⋅x₂  - 38⋅x₁  ⋅x₂  + 8⋅x₁  ⋅x₂  + 15⋅x₁  ⋅x₂  + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       31   4        31   3       31   2     31          30   69       30   6 ↪
↪  11⋅x₁  ⋅x₂  - 13⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + x₁  ⋅x₂ - 2⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8     30   67       30   66       30   65        30   64        30   62      ↪
↪   + x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   - 29 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    30   61        30   60        30   59        30   58        30   57       ↪
↪ ⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   + 47⋅x₁  ⋅x₂   + 89⋅x₁  ⋅x₂   + 65⋅x₁  ⋅x₂   - 14⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   30   56       30   55         30   54        30   53         30   52       ↪
↪ x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 116⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   - 114⋅x₁  ⋅x₂   - 78⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   30   51        30   50        30   49         30   48         30   47      ↪
↪ x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   + 286⋅x₁  ⋅x₂   + 215⋅x₁  ⋅x₂   + 11 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     30   46         30   45         30   44         30   43        30   42   ↪
↪ 3⋅x₁  ⋅x₂   - 309⋅x₁  ⋅x₂   - 675⋅x₁  ⋅x₂   - 601⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        30   41          30   40         30   39         30   38          30  ↪
↪  969⋅x₁  ⋅x₂   + 1207⋅x₁  ⋅x₂   + 652⋅x₁  ⋅x₂   - 649⋅x₁  ⋅x₂   - 1349⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   37         30   36        30   35          30   34          30   33        ↪
↪ x₂   - 919⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   + 1205⋅x₁  ⋅x₂   + 1066⋅x₁  ⋅x₂   + 147⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   30   32         30   31          30   30         30   29        30   28    ↪
↪ x₁  ⋅x₂   - 806⋅x₁  ⋅x₂   - 1242⋅x₁  ⋅x₂   - 569⋅x₁  ⋅x₂   + 96⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       30   27         30   26         30   25         30   24         30   2 ↪
↪ 538⋅x₁  ⋅x₂   + 354⋅x₁  ⋅x₂   + 264⋅x₁  ⋅x₂   + 160⋅x₁  ⋅x₂   + 395⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3         30   22         30   21         30   20         30   19         30 ↪
↪   + 366⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   - 438⋅x₁  ⋅x₂   - 755⋅x₁  ⋅x₂   - 224⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    18         30   17         30   16         30   15         30   14        ↪
↪ ⋅x₂   + 251⋅x₁  ⋅x₂   + 499⋅x₁  ⋅x₂   + 320⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   - 304⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   30   13         30   12        30   11         30   10         30   9      ↪
↪ x₁  ⋅x₂   - 222⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 109⋅x₁  ⋅x₂  - 16 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    30   8        30   7        30   6       30   5        30   4       30    ↪
↪ ⋅x₁  ⋅x₂  - 39⋅x₁  ⋅x₂  - 13⋅x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  + 17⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3       30   2     30          29   69       29   68     29   67       29    ↪
↪   - 5⋅x₁  ⋅x₂  - x₁  ⋅x₂ - 2⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 2⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 65        29   64        29   63        29   62        29   61        29   6 ↪
↪    + 14⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   - 27⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0        29   59        29   58        29   57        29   56        29   55 ↪
↪   - 26⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 30⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         29   54        29   53        29   52        29   51        29   50  ↪
↪  - 88⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   - 75⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        29   49         29   48         29   47         29   46         29    ↪
↪ - 65⋅x₁  ⋅x₂   + 171⋅x₁  ⋅x₂   + 298⋅x₁  ⋅x₂   + 454⋅x₁  ⋅x₂   + 192⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 45         29   44         29   43         29   42        29   41         29 ↪
↪    - 333⋅x₁  ⋅x₂   - 882⋅x₁  ⋅x₂   - 818⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   + 800⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    40          29   39         29   38         29   37          29   36      ↪
↪ ⋅x₂   + 1207⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   - 690⋅x₁  ⋅x₂   - 1191⋅x₁  ⋅x₂   - 89 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     29   35         29   34          29   33          29   32         29   3 ↪
↪ 4⋅x₁  ⋅x₂   + 371⋅x₁  ⋅x₂   + 1166⋅x₁  ⋅x₂   + 1179⋅x₁  ⋅x₂   + 312⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1         29   30         29   29         29   28        29   27        29   ↪
↪   - 569⋅x₁  ⋅x₂   - 662⋅x₁  ⋅x₂   - 402⋅x₁  ⋅x₂   + 44⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  26        29   25         29   24         29   23         29   22         2 ↪
↪ ₂   - 87⋅x₁  ⋅x₂   - 257⋅x₁  ⋅x₂   + 222⋅x₁  ⋅x₂   + 551⋅x₁  ⋅x₂   + 407⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9   21        29   20         29   19         29   18         29   17        ↪
↪  ⋅x₂   + 25⋅x₁  ⋅x₂   - 662⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 177⋅x₁  ⋅x₂   + 442⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   29   16         29   15         29   14         29   13         29   12    ↪
↪ x₁  ⋅x₂   + 559⋅x₁  ⋅x₂   + 287⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   - 302⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       29   11       29   10         29   9        29   8        29   7       ↪
↪ 165⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 106⋅x₁  ⋅x₂  + 18⋅x₁  ⋅x₂  - 20⋅x₁  ⋅x₂  - 30⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   29   6       29   5        29   4        29   3     29   2       28   69   ↪
↪ x₁  ⋅x₂  - 8⋅x₁  ⋅x₂  + 15⋅x₁  ⋅x₂  + 11⋅x₁  ⋅x₂  + x₁  ⋅x₂  + 4⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      28   68       28   67       28   66       28   65        28   64        ↪
↪  2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 2⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 28   63       28   62        28   61       28   60        28   59        28  ↪
↪   ⋅x₂   + 8⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   + 19⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   58        28   57        28   56         28   55        28   54        28  ↪
↪ x₂   + 31⋅x₁  ⋅x₂   + 39⋅x₁  ⋅x₂   + 101⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   + 85⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   53        28   52        28   51         28   50         28   49         2 ↪
↪ x₂   - 30⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   - 136⋅x₁  ⋅x₂   - 212⋅x₁  ⋅x₂   - 159⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   48        28   47         28   46         28   45         28   44        ↪
↪  ⋅x₂   + 15⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 539⋅x₁  ⋅x₂   + 380⋅x₁  ⋅x₂   - 358⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   28   43         28   42         28   41        28   40         28   39     ↪
↪ x₁  ⋅x₂   - 854⋅x₁  ⋅x₂   - 810⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   + 969⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       28   38         28   37         28   36          28   35         28    ↪
↪ 099⋅x₁  ⋅x₂   + 380⋅x₁  ⋅x₂   - 604⋅x₁  ⋅x₂   - 1179⋅x₁  ⋅x₂   - 651⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 34         28   33         28   32         28   31        28   30         28 ↪
↪    + 206⋅x₁  ⋅x₂   + 933⋅x₁  ⋅x₂   + 710⋅x₁  ⋅x₂   + 96⋅x₁  ⋅x₂   - 402⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    29         28   28       28   27         28   26        28   25         2 ↪
↪ ⋅x₂   - 362⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 112⋅x₁  ⋅x₂   - 98⋅x₁  ⋅x₂   - 485⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   24        28   23         28   22         28   21         28   20        ↪
↪  ⋅x₂   - 39⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   + 781⋅x₁  ⋅x₂   + 631⋅x₁  ⋅x₂   - 194⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   28   19         28   18         28   17         28   16         28   15    ↪
↪ x₁  ⋅x₂   - 722⋅x₁  ⋅x₂   - 792⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   + 289⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       28   14         28   13        28   12         28   11        28   10  ↪
↪ 469⋅x₁  ⋅x₂   + 188⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        28   9        28   8        28   7        28   6        28   5        ↪
↪ + 96⋅x₁  ⋅x₂  + 70⋅x₁  ⋅x₂  + 21⋅x₁  ⋅x₂  - 21⋅x₁  ⋅x₂  - 26⋅x₁  ⋅x₂  - 9⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 28   4     28   3       28   2     27   69       27   68       27   67       ↪
↪   ⋅x₂  - x₁  ⋅x₂  - 2⋅x₁  ⋅x₂  + x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + 4⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  27   66     27   65        27   64     27   63        27   62       27   61 ↪
↪ ₁  ⋅x₂   + x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         27   60        27   59        27   58        27   57        27   56  ↪
↪  + 24⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        27   55        27   54        27   53        27   52        27   51   ↪
↪ + 33⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   + 34⋅x₁  ⋅x₂   + 36⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      27   50        27   49         27   48         27   47       27   46    ↪
↪  8⋅x₁  ⋅x₂   - 88⋅x₁  ⋅x₂   - 242⋅x₁  ⋅x₂   - 238⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       27   45         27   44         27   43         27   42         27   4 ↪
↪ 402⋅x₁  ⋅x₂   + 764⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   - 226⋅x₁  ⋅x₂   - 854⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1         27   40        27   39         27   38         27   37         27  ↪
↪   - 818⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   + 790⋅x₁  ⋅x₂   + 896⋅x₁  ⋅x₂   + 212⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   36         27   35          27   34         27   33         27   32        ↪
↪ x₂   - 767⋅x₁  ⋅x₂   - 1002⋅x₁  ⋅x₂   - 616⋅x₁  ⋅x₂   + 294⋅x₁  ⋅x₂   + 604⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   27   31         27   30        27   29       27   28         27   27       ↪
↪ x₁  ⋅x₂   + 538⋅x₁  ⋅x₂   + 44⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 186⋅x₁  ⋅x₂   + 113 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    27   26        27   25         27   24         27   23         27   22    ↪
↪ ⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 717⋅x₁  ⋅x₂   - 684⋅x₁  ⋅x₂   - 316⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       27   21         27   20         27   19        27   18         27   17 ↪
↪ 511⋅x₁  ⋅x₂   + 957⋅x₁  ⋅x₂   + 626⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   - 660⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          27   16         27   15         27   14         27   13        27   ↪
↪  - 541⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   + 344⋅x₁  ⋅x₂   + 300⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  12         27   11         27   10        27   9        27   8        27    ↪
↪ ₂   - 137⋅x₁  ⋅x₂   - 182⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂  + 25⋅x₁  ⋅x₂  + 46⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7        27   6       27   5       27   4       27   3       27   2       26 ↪
↪   + 14⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  + 7⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  - 3⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    69       26   68       26   67     26   66       26   65       26   64    ↪
↪ ⋅x₂   - 5⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   26   63       26   62       26   61        26   60        26   59        2 ↪
↪ x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   + 10⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   58        26   57        26   56       26   55       26   54        26   ↪
↪  ⋅x₂   - 17⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  53        26   52        26   51        26   50        26   49         26   ↪
↪ ₂   + 48⋅x₁  ⋅x₂   + 76⋅x₁  ⋅x₂   + 92⋅x₁  ⋅x₂   + 91⋅x₁  ⋅x₂   - 147⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  48         26   47         26   46         26   45         26   44          ↪
↪ ₂   - 325⋅x₁  ⋅x₂   - 445⋅x₁  ⋅x₂   - 174⋅x₁  ⋅x₂   + 440⋅x₁  ⋅x₂   + 662⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 26   43         26   42         26   41         26   40         26   39      ↪
↪   ⋅x₂   + 404⋅x₁  ⋅x₂   - 358⋅x₁  ⋅x₂   - 882⋅x₁  ⋅x₂   - 601⋅x₁  ⋅x₂   + 80 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    26   38         26   37         26   36         26   35         26   34   ↪
↪ ⋅x₁  ⋅x₂   + 890⋅x₁  ⋅x₂   + 901⋅x₁  ⋅x₂   + 225⋅x₁  ⋅x₂   - 449⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        26   33         26   32        26   31         26   30        26   29 ↪
↪  691⋅x₁  ⋅x₂   - 213⋅x₁  ⋅x₂   + 87⋅x₁  ⋅x₂   + 354⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          26   28         26   27         26   26         26   25         26  ↪
↪  - 112⋅x₁  ⋅x₂   + 113⋅x₁  ⋅x₂   + 374⋅x₁  ⋅x₂   + 477⋅x₁  ⋅x₂   - 261⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   24         26   23         26   22         26   21         26   20         ↪
↪ x₂   - 729⋅x₁  ⋅x₂   - 938⋅x₁  ⋅x₂   - 219⋅x₁  ⋅x₂   + 614⋅x₁  ⋅x₂   + 983⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  26   19         26   18         26   17         26   16         26   15     ↪
↪ ₁  ⋅x₂   + 567⋅x₁  ⋅x₂   - 175⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 522⋅x₁  ⋅x₂   - 8 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    26   14         26   13         26   12        26   11        26   10     ↪
↪ ⋅x₁  ⋅x₂   + 236⋅x₁  ⋅x₂   + 257⋅x₁  ⋅x₂   + 56⋅x₁  ⋅x₂   - 95⋅x₁  ⋅x₂   - 6 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     26   9        26   8        26   7        26   6        26   5        26 ↪
↪ 8⋅x₁  ⋅x₂  - 13⋅x₁  ⋅x₂  + 31⋅x₁  ⋅x₂  + 15⋅x₁  ⋅x₂  - 11⋅x₁  ⋅x₂  - 11⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    4     26   3     25   69       25   67       25   66       25   65        ↪
↪ ⋅x₂  + x₁  ⋅x₂  + x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 7⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 25   64       25   62        25   60       25   59        25   58       25   ↪
↪   ⋅x₂   + 4⋅x₁  ⋅x₂   + 27⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 28⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  57        25   56        25   55        25   54        25   53        25    ↪
↪ ₂   - 10⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   - 60⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 52       25   51        25   50         25   49         25   48        25    ↪
↪    - 5⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   - 48⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 47         25   46         25   45        25   44         25   43         25 ↪
↪    - 370⋅x₁  ⋅x₂   - 456⋅x₁  ⋅x₂   - 62⋅x₁  ⋅x₂   + 440⋅x₁  ⋅x₂   + 764⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    42         25   41         25   40         25   39         25   38        ↪
↪ ⋅x₂   + 380⋅x₁  ⋅x₂   - 333⋅x₁  ⋅x₂   - 675⋅x₁  ⋅x₂   - 571⋅x₁  ⋅x₂   + 121⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   25   37         25   36         25   35        25   34         25   33     ↪
↪ x₁  ⋅x₂   + 568⋅x₁  ⋅x₂   + 514⋅x₁  ⋅x₂   - 91⋅x₁  ⋅x₂   - 531⋅x₁  ⋅x₂   - 3 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      25   32         25   31         25   30        25   29        25   28   ↪
↪ 86⋅x₁  ⋅x₂   - 169⋅x₁  ⋅x₂   + 264⋅x₁  ⋅x₂   - 87⋅x₁  ⋅x₂   - 98⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       25   27         25   26         25   25         25   24         25   2 ↪
↪  18⋅x₁  ⋅x₂   + 477⋅x₁  ⋅x₂   + 940⋅x₁  ⋅x₂   + 570⋅x₁  ⋅x₂   - 186⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3          25   22          25   21         25   20         25   19          ↪
↪   - 1086⋅x₁  ⋅x₂   - 1042⋅x₁  ⋅x₂   - 374⋅x₁  ⋅x₂   + 560⋅x₁  ⋅x₂   + 780⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 25   18         25   17         25   16         25   15         25   14      ↪
↪   ⋅x₂   + 464⋅x₁  ⋅x₂   - 134⋅x₁  ⋅x₂   - 512⋅x₁  ⋅x₂   - 270⋅x₁  ⋅x₂   + 17 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    25   13         25   12         25   11       25   10        25   9       ↪
↪ ⋅x₁  ⋅x₂   + 241⋅x₁  ⋅x₂   + 150⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   - 62⋅x₁  ⋅x₂  - 48⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   25   8     25   7        25   6       25   5        25   4       25   3    ↪
↪ x₁  ⋅x₂  + x₁  ⋅x₂  + 21⋅x₁  ⋅x₂  + 7⋅x₁  ⋅x₂  - 15⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     24   68       24   67       24   66       24   65       24   63        2 ↪
↪ 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 15⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   62        24   61     24   60        24   59        24   58        24    ↪
↪  ⋅x₂   - 18⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 57        24   56     24   55       24   54        24   53       24   52     ↪
↪    + 12⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 7 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     24   51        24   50         24   49         24   48         24   47   ↪
↪ 0⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   + 168⋅x₁  ⋅x₂   + 176⋅x₁  ⋅x₂   + 250⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       24   46         24   45         24   44         24   43         24   4 ↪
↪  76⋅x₁  ⋅x₂   - 424⋅x₁  ⋅x₂   - 456⋅x₁  ⋅x₂   - 174⋅x₁  ⋅x₂   + 402⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2         24   41         24   40         24   39         24   38         24 ↪
↪   + 539⋅x₁  ⋅x₂   + 192⋅x₁  ⋅x₂   - 309⋅x₁  ⋅x₂   - 599⋅x₁  ⋅x₂   - 256⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    37         24   36         24   35         24   34        24   33         ↪
↪ ⋅x₂   + 242⋅x₁  ⋅x₂   + 650⋅x₁  ⋅x₂   + 376⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   - 141⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  24   32         24   31         24   30         24   29         24   28     ↪
↪ ₁  ⋅x₂   - 165⋅x₁  ⋅x₂   + 160⋅x₁  ⋅x₂   - 257⋅x₁  ⋅x₂   - 485⋅x₁  ⋅x₂   - 7 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      24   27         24   26         24   25          24   24         24   2 ↪
↪ 17⋅x₁  ⋅x₂   - 261⋅x₁  ⋅x₂   + 570⋅x₁  ⋅x₂   + 1026⋅x₁  ⋅x₂   + 771⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3         24   22         24   21         24   20        24   19         24  ↪
↪   - 184⋅x₁  ⋅x₂   - 857⋅x₁  ⋅x₂   - 916⋅x₁  ⋅x₂   - 79⋅x₁  ⋅x₂   + 512⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   18         24   17         24   16         24   15         24   14         ↪
↪ x₂   + 754⋅x₁  ⋅x₂   + 349⋅x₁  ⋅x₂   - 220⋅x₁  ⋅x₂   - 377⋅x₁  ⋅x₂   - 285⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  24   13        24   12         24   11        24   10        24   9         ↪
↪ ₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 121⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂  - 40⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 24   8        24   7        24   6        24   5       24   4     24   3     ↪
↪   ⋅x₂  - 19⋅x₁  ⋅x₂  + 12⋅x₁  ⋅x₂  + 24⋅x₁  ⋅x₂  + 5⋅x₁  ⋅x₂  - x₁  ⋅x₂  + x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  23   68     23   66       23   63       23   62       23   61       23   60 ↪
↪ ₁  ⋅x₂   - x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         23   57       23   56       23   55        23   54        23   53    ↪
↪  + 11⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      23   52        23   51         23   50        23   49        23   48    ↪
↪ 13⋅x₁  ⋅x₂   - 93⋅x₁  ⋅x₂   - 131⋅x₁  ⋅x₂   - 27⋅x₁  ⋅x₂   + 72⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       23   47         23   46        23   45         23   44         23   43 ↪
↪ 349⋅x₁  ⋅x₂   + 246⋅x₁  ⋅x₂   - 76⋅x₁  ⋅x₂   - 370⋅x₁  ⋅x₂   - 445⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        23   42         23   41         23   40         23   39         23    ↪
↪  - 4⋅x₁  ⋅x₂   + 404⋅x₁  ⋅x₂   + 454⋅x₁  ⋅x₂   + 113⋅x₁  ⋅x₂   - 343⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 38         23   37         23   36         23   35         23   34        23 ↪
↪    - 381⋅x₁  ⋅x₂   - 245⋅x₁  ⋅x₂   + 224⋅x₁  ⋅x₂   + 180⋅x₁  ⋅x₂   + 79⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    33         23   32        23   31         23   30         23   29         ↪
↪ ⋅x₂   - 105⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   + 395⋅x₁  ⋅x₂   + 222⋅x₁  ⋅x₂   - 39⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 23   28         23   27         23   26         23   25         23   24      ↪
↪   ⋅x₂   - 684⋅x₁  ⋅x₂   - 729⋅x₁  ⋅x₂   - 186⋅x₁  ⋅x₂   + 771⋅x₁  ⋅x₂   + 11 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      23   23         23   22         23   21          23   20         23   1 ↪
↪ 22⋅x₁  ⋅x₂   + 658⋅x₁  ⋅x₂   - 248⋅x₁  ⋅x₂   - 1016⋅x₁  ⋅x₂   - 804⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9         23   18         23   17         23   16         23   15        23  ↪
↪   - 267⋅x₁  ⋅x₂   + 457⋅x₁  ⋅x₂   + 547⋅x₁  ⋅x₂   + 227⋅x₁  ⋅x₂   - 99⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   14         23   13         23   12        23   11         23   10        2 ↪
↪ x₂   - 243⋅x₁  ⋅x₂   - 100⋅x₁  ⋅x₂   + 52⋅x₁  ⋅x₂   + 110⋅x₁  ⋅x₂   + 36⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3   9        23   8        23   7        23   6       23   5       23   4    ↪
↪  ⋅x₂  - 14⋅x₁  ⋅x₂  - 33⋅x₁  ⋅x₂  - 19⋅x₁  ⋅x₂  + 4⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   22   68     22   67       22   66       22   65       22   64        22    ↪
↪ x₁  ⋅x₂   - x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 63       22   62        22   61       22   60       22   59        22   58   ↪
↪    + 4⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      22   57       22   56        22   55        22   54        22   53      ↪
↪  6⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   + 53 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    22   52        22   51         22   50         22   49         22   48    ↪
↪ ⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   - 110⋅x₁  ⋅x₂   - 133⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       22   47         22   46         22   45        22   44         22   43 ↪
↪ 180⋅x₁  ⋅x₂   + 349⋅x₁  ⋅x₂   + 250⋅x₁  ⋅x₂   - 48⋅x₁  ⋅x₂   - 325⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          22   42        22   41         22   40         22   39        22    ↪
↪  - 238⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 298⋅x₁  ⋅x₂   + 215⋅x₁  ⋅x₂   - 86⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 38         22   37         22   36        22   35        22   34         22  ↪
↪    - 286⋅x₁  ⋅x₂   - 371⋅x₁  ⋅x₂   + 68⋅x₁  ⋅x₂   + 84⋅x₁  ⋅x₂   + 139⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   33        22   32        22   31         22   30         22   29         2 ↪
↪ x₂   - 69⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   + 366⋅x₁  ⋅x₂   + 551⋅x₁  ⋅x₂   + 455⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2   28         22   27         22   26          22   25         22   24      ↪
↪  ⋅x₂   - 316⋅x₁  ⋅x₂   - 938⋅x₁  ⋅x₂   - 1086⋅x₁  ⋅x₂   - 184⋅x₁  ⋅x₂   + 65 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     22   23          22   22         22   21         22   20         22   19 ↪
↪ 8⋅x₁  ⋅x₂   + 1096⋅x₁  ⋅x₂   + 693⋅x₁  ⋅x₂   - 215⋅x₁  ⋅x₂   - 663⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          22   18        22   17         22   16         22   15         22   ↪
↪  - 668⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   + 345⋅x₁  ⋅x₂   + 370⋅x₁  ⋅x₂   + 117⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  14         22   13         22   12        22   11        22   10        22  ↪
↪ ₂   - 129⋅x₁  ⋅x₂   - 183⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x₂   + 48⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   9        22   8       22   7        22   6       22   5       22   4       ↪
↪ x₂  + 25⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂  - 10⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  - 2⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  21   67     21   66       21   65       21   64       21   63       21   62 ↪
↪ ₁  ⋅x₂   + x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        21   61       21   60        21   59        21   58        21   57    ↪
↪  - 2⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      21   56       21   55        21   54       21   53        21   52       ↪
↪ 17⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 72⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   21   51     21   50        21   49         21   48         21   47         ↪
↪ x₁  ⋅x₂   - x₁  ⋅x₂   - 94⋅x₁  ⋅x₂   - 256⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   + 72⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 21   46         21   45         21   44         21   43         21   42      ↪
↪   ⋅x₂   + 176⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   - 147⋅x₁  ⋅x₂   - 242⋅x₁  ⋅x₂   - 15 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     21   41         21   40         21   39         21   38        21   37   ↪
↪ 9⋅x₁  ⋅x₂   + 171⋅x₁  ⋅x₂   + 286⋅x₁  ⋅x₂   + 277⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        21   36        21   35        21   34        21   33         21   32  ↪
↪  187⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   - 295⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         21   31         21   30         21   29         21   28         21   ↪
↪ - 421⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   + 407⋅x₁  ⋅x₂   + 781⋅x₁  ⋅x₂   + 511⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  27         21   26          21   25         21   24         21   23         ↪
↪ ₂   - 219⋅x₁  ⋅x₂   - 1042⋅x₁  ⋅x₂   - 857⋅x₁  ⋅x₂   - 248⋅x₁  ⋅x₂   + 693⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  21   22         21   21         21   20         21   19         21   18     ↪
↪ ₁  ⋅x₂   + 956⋅x₁  ⋅x₂   + 503⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   - 667⋅x₁  ⋅x₂   - 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      21   17        21   16         21   15         21   14        21   13   ↪
↪ 62⋅x₁  ⋅x₂   - 65⋅x₁  ⋅x₂   + 274⋅x₁  ⋅x₂   + 246⋅x₁  ⋅x₂   + 88⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       21   12        21   11        21   10        21   9        21   8      ↪
↪  63⋅x₁  ⋅x₂   - 99⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂  + 32⋅x₁  ⋅x₂  - 3⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   21   7        21   6       21   5       20   66       20   65       20   6 ↪
↪ x₁  ⋅x₂  - 11⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4       20   63       20   62     20   61       20   60        20   59       ↪
↪   + 5⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 24⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   20   58       20   57        20   56        20   55        20   54         ↪
↪ x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 54⋅x₁  ⋅x₂   - 22⋅x₁  ⋅x₂   - 59⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 20   53        20   52        20   51        20   50        20   49        2 ↪
↪   ⋅x₂   + 26⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x₂   + 93⋅x₁  ⋅x₂   + 68⋅x₁  ⋅x₂   - 94⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0   48         20   47        20   46         20   45         20   44        ↪
↪  ⋅x₂   - 133⋅x₁  ⋅x₂   - 27⋅x₁  ⋅x₂   + 168⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   + 91⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  20   43        20   42         20   41        20   40        20   39        ↪
↪ ₁  ⋅x₂   - 88⋅x₁  ⋅x₂   - 212⋅x₁  ⋅x₂   - 65⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   + 94⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  20   38        20   37         20   36        20   35        20   34        ↪
↪ ₁  ⋅x₂   - 35⋅x₁  ⋅x₂   - 229⋅x₁  ⋅x₂   - 53⋅x₁  ⋅x₂   + 60⋅x₁  ⋅x₂   + 211⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   20   33        20   32         20   31         20   30        20   29      ↪
↪ x₁  ⋅x₂   - 69⋅x₁  ⋅x₂   - 315⋅x₁  ⋅x₂   - 438⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 63 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     20   28         20   27         20   26         20   25         20   24  ↪
↪ 1⋅x₁  ⋅x₂   + 957⋅x₁  ⋅x₂   + 614⋅x₁  ⋅x₂   - 374⋅x₁  ⋅x₂   - 916⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          20   23         20   22         20   21         20   20         20  ↪
↪ - 1016⋅x₁  ⋅x₂   - 215⋅x₁  ⋅x₂   + 503⋅x₁  ⋅x₂   + 742⋅x₁  ⋅x₂   + 445⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   19         20   18         20   17         20   16        20   15          ↪
↪ x₂   - 148⋅x₁  ⋅x₂   - 401⋅x₁  ⋅x₂   - 327⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 167⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 20   14         20   13        20   12        20   11        20   10         ↪
↪   ⋅x₂   + 154⋅x₁  ⋅x₂   + 27⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   - 18⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 20   9        20   8        20   7       20   5     19   67       19   66    ↪
↪   ⋅x₂  + 25⋅x₁  ⋅x₂  + 14⋅x₁  ⋅x₂  - 3⋅x₁  ⋅x₂  + x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   19   65     19   64       19   63     19   62     19   61        19   60   ↪
↪ x₁  ⋅x₂   + x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   - x₁  ⋅x₂   - x₁  ⋅x₂   - 11⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       19   59     19   58        19   57        19   56        19   55       ↪
↪  17⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 14⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 12⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   19   54        19   53        19   52       19   51        19   50         ↪
↪ x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 62⋅x₁  ⋅x₂   + 93⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 19   49     19   48         19   47         19   46        19   45        19 ↪
↪   ⋅x₂   - x₁  ⋅x₂   - 110⋅x₁  ⋅x₂   - 131⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   + 83⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    44        19   43       19   42         19   41        19   40        19  ↪
↪ ⋅x₂   + 92⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 136⋅x₁  ⋅x₂   - 12⋅x₁  ⋅x₂   + 30⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   39         19   38         19   37        19   36       19   35         19 ↪
↪ x₂   + 192⋅x₁  ⋅x₂   + 120⋅x₁  ⋅x₂   - 49⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 100⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    34         19   33        19   32         19   31         19   30         ↪
↪ ⋅x₂   + 277⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   - 230⋅x₁  ⋅x₂   - 755⋅x₁  ⋅x₂   - 662⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  19   29         19   28         19   27         19   26         19   25     ↪
↪ ₁  ⋅x₂   - 194⋅x₁  ⋅x₂   + 626⋅x₁  ⋅x₂   + 983⋅x₁  ⋅x₂   + 560⋅x₁  ⋅x₂   - 7 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     19   24         19   23         19   22         19   21         19   20  ↪
↪ 9⋅x₁  ⋅x₂   - 804⋅x₁  ⋅x₂   - 663⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   + 445⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         19   19         19   18         19   17         19   16         19   ↪
↪ + 568⋅x₁  ⋅x₂   + 279⋅x₁  ⋅x₂   - 121⋅x₁  ⋅x₂   - 338⋅x₁  ⋅x₂   - 213⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  15        19   14         19   13        19   12        19   11        19   ↪
↪ ₂   - 33⋅x₁  ⋅x₂   + 111⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  10        19   9       19   8        19   7       19   6       18   65      ↪
↪ ₂   - 30⋅x₁  ⋅x₂  + 3⋅x₁  ⋅x₂  + 14⋅x₁  ⋅x₂  + 9⋅x₁  ⋅x₂  - 5⋅x₁  ⋅x₂   + 2⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   18   64       18   63       18   62       18   61       18   60        18  ↪
↪ x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 10⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   59        18   58       18   57       18   56        18   55        18   5 ↪
↪ x₂   - 11⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 41⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4        18   53        18   52        18   51       18   50        18   49  ↪
↪   + 11⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 32⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        18   48        18   47        18   46        18   45       18   44    ↪
↪ + 72⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   - 93⋅x₁  ⋅x₂   - 70⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      18   43        18   42        18   41        18   40        18   39     ↪
↪ 76⋅x₁  ⋅x₂   + 36⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 78⋅x₁  ⋅x₂   + 7 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     18   38        18   37        18   36         18   35        18   34     ↪
↪ 2⋅x₁  ⋅x₂   + 22⋅x₁  ⋅x₂   - 96⋅x₁  ⋅x₂   - 168⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      18   33         18   32         18   31         18   30         18   29 ↪
↪ 86⋅x₁  ⋅x₂   + 455⋅x₁  ⋅x₂   + 373⋅x₁  ⋅x₂   - 224⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪          18   28        18   27         18   26         18   25         18   ↪
↪  - 722⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   + 567⋅x₁  ⋅x₂   + 780⋅x₁  ⋅x₂   + 512⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  24         18   23         18   22         18   21         18   20          ↪
↪ ₂   - 267⋅x₁  ⋅x₂   - 668⋅x₁  ⋅x₂   - 667⋅x₁  ⋅x₂   - 148⋅x₁  ⋅x₂   + 279⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 18   19         18   18         18   17        18   16         18   15       ↪
↪   ⋅x₂   + 426⋅x₁  ⋅x₂   + 216⋅x₁  ⋅x₂   - 46⋅x₁  ⋅x₂   - 145⋅x₁  ⋅x₂   - 109 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    18   14        18   13        18   12        18   11       18   10        ↪
↪ ⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   + 61⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 28⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  18   9        18   8       18   7     18   6       17   66       17   65    ↪
↪ ₁  ⋅x₂  - 18⋅x₁  ⋅x₂  - 7⋅x₁  ⋅x₂  + x₁  ⋅x₂  - 2⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     17   64     17   63       17   62       17   61     17   60       17   5 ↪
↪ 4⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 7⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9        17   57       17   56       17   55       17   54       17   53     ↪
↪   - 10⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 4 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     17   52        17   51        17   50        17   49        17   48      ↪
↪ 2⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + 53 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    17   47        17   46       17   45        17   44        17   43        ↪
↪ ⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   + 48⋅x₁  ⋅x₂   + 34⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  17   42        17   41        17   40         17   39        17   38        ↪
↪ ₁  ⋅x₂   - 30⋅x₁  ⋅x₂   - 75⋅x₁  ⋅x₂   - 114⋅x₁  ⋅x₂   + 59⋅x₁  ⋅x₂   + 59⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  17   37        17   36         17   35         17   34        17   33       ↪
↪ ₁  ⋅x₂   + 15⋅x₁  ⋅x₂   - 193⋅x₁  ⋅x₂   - 173⋅x₁  ⋅x₂   - 21⋅x₁  ⋅x₂   + 335 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    17   32         17   31         17   30         17   29         17   28   ↪
↪ ⋅x₁  ⋅x₂   + 565⋅x₁  ⋅x₂   + 251⋅x₁  ⋅x₂   - 177⋅x₁  ⋅x₂   - 792⋅x₁  ⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        17   27         17   26         17   25         17   24         17    ↪
↪  660⋅x₁  ⋅x₂   - 175⋅x₁  ⋅x₂   + 464⋅x₁  ⋅x₂   + 754⋅x₁  ⋅x₂   + 457⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 23        17   22         17   21         17   20         17   19         17 ↪
↪    - 41⋅x₁  ⋅x₂   - 462⋅x₁  ⋅x₂   - 401⋅x₁  ⋅x₂   - 121⋅x₁  ⋅x₂   + 216⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    18         17   17         17   16        17   15         17   14         ↪
↪ ⋅x₂   + 224⋅x₁  ⋅x₂   + 103⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   - 138⋅x₁  ⋅x₂   - 63⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 17   13       17   12        17   11        17   10       17   9       17    ↪
↪   ⋅x₂   - 2⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂  - 2⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8       17   7       16   65       16   62     16   61       16   60       1 ↪
↪   - 2⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   - 6⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   59       16   58     16   57       16   56       16   55        16   54  ↪
↪  ⋅x₂   + 6⋅x₁  ⋅x₂   - x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        16   53       16   52        16   51        16   50        16   49    ↪
↪ + 30⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 37⋅x₁  ⋅x₂   - 59⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     16   48        16   47        16   46        16   45        16   44      ↪
↪ 2⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   + 60 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    16   43        16   42        16   41        16   40        16   39       ↪
↪ ⋅x₁  ⋅x₂   + 80⋅x₁  ⋅x₂   + 85⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   - 25⋅x₁  ⋅x₂   + 71⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   16   38        16   37         16   36         16   35         16   34     ↪
↪ x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 102⋅x₁  ⋅x₂   - 187⋅x₁  ⋅x₂   - 293⋅x₁  ⋅x₂   - 3 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      16   33        16   32         16   31         16   30         16   29  ↪
↪ 90⋅x₁  ⋅x₂   - 61⋅x₁  ⋅x₂   + 364⋅x₁  ⋅x₂   + 499⋅x₁  ⋅x₂   + 442⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         16   28         16   27         16   26         16   25         16   ↪
↪ - 171⋅x₁  ⋅x₂   - 541⋅x₁  ⋅x₂   - 580⋅x₁  ⋅x₂   - 134⋅x₁  ⋅x₂   + 349⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  24         16   23         16   22        16   21         16   20         1 ↪
↪ ₂   + 547⋅x₁  ⋅x₂   + 345⋅x₁  ⋅x₂   - 65⋅x₁  ⋅x₂   - 327⋅x₁  ⋅x₂   - 338⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   19        16   18         16   17         16   16        16   15         ↪
↪  ⋅x₂   - 46⋅x₁  ⋅x₂   + 103⋅x₁  ⋅x₂   + 156⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   - 29⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 16   14        16   13        16   12        16   11        16   10       16 ↪
↪   ⋅x₂   - 57⋅x₁  ⋅x₂   - 42⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 4⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    9       16   8       15   65       15   64     15   63       15   61      ↪
↪ ⋅x₂  - 3⋅x₁  ⋅x₂  + 2⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15   60       15   59       15   58        15   57       15   56        15   ↪
↪   ⋅x₂   - 8⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  55        15   54        15   53       15   52        15   51        15   5 ↪
↪ ₂   - 22⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 41⋅x₁  ⋅x₂   + 12⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0        15   49        15   48        15   47        15   46       15   45  ↪
↪   - 22⋅x₁  ⋅x₂   + 54⋅x₁  ⋅x₂   + 40⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        15   44       15   43        15   42        15   41        15   40    ↪
↪ - 60⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   - 29⋅x₁  ⋅x₂   - 10⋅x₁  ⋅x₂   - 88⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       15   39        15   38        15   37         15   36        15   35   ↪
↪ 116⋅x₁  ⋅x₂   - 49⋅x₁  ⋅x₂   + 78⋅x₁  ⋅x₂   + 220⋅x₁  ⋅x₂   + 94⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       15   34         15   33         15   32       15   31         15   30  ↪
↪  14⋅x₁  ⋅x₂   - 307⋅x₁  ⋅x₂   - 267⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 320⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         15   29         15   28         15   27         15   26         15   ↪
↪ + 559⋅x₁  ⋅x₂   + 289⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 522⋅x₁  ⋅x₂   - 512⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  25         15   24         15   23         15   22         15   21        1 ↪
↪ ₂   - 220⋅x₁  ⋅x₂   + 227⋅x₁  ⋅x₂   + 370⋅x₁  ⋅x₂   + 274⋅x₁  ⋅x₂   + 15⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 5   20         15   19         15   18        15   17        15   16         ↪
↪  ⋅x₂   - 213⋅x₁  ⋅x₂   - 145⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   + 83⋅x₁  ⋅x₂   + 88⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 15   15        15   14        15   13        15   12        15   11       15 ↪
↪   ⋅x₂   + 35⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 18⋅x₁  ⋅x₂   + 3⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    10        15   9     15   8       14   64       14   63       14   62     ↪
↪ ⋅x₂   + 10⋅x₁  ⋅x₂  - x₁  ⋅x₂  - 4⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    14   61       14   60       14   59        14   58       14   57        1 ↪
↪ ⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + 11⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   56       14   55        14   54       14   53       14   52        14    ↪
↪  ⋅x₂   + 2⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   - 6⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 51        14   50        14   49       14   48        14   47       14   46  ↪
↪    - 14⋅x₁  ⋅x₂   - 54⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   - 19⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     14   45        14   44       14   43        14   42         14   41      ↪
↪ - x₁  ⋅x₂   - 45⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 33⋅x₁  ⋅x₂   + 101⋅x₁  ⋅x₂   + 30 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    14   40       14   39        14   38       14   37         14   36        ↪
↪ ⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 52⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   + 146⋅x₁  ⋅x₂   + 136⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   14   35         14   34         14   33         14   32         14   31    ↪
↪ x₁  ⋅x₂   + 126⋅x₁  ⋅x₂   - 191⋅x₁  ⋅x₂   - 375⋅x₁  ⋅x₂   - 387⋅x₁  ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       14   30         14   29         14   28         14   27       14   26  ↪
↪ 124⋅x₁  ⋅x₂   + 287⋅x₁  ⋅x₂   + 469⋅x₁  ⋅x₂   + 344⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         14   25         14   24        14   23         14   22         14    ↪
↪ - 270⋅x₁  ⋅x₂   - 377⋅x₁  ⋅x₂   - 99⋅x₁  ⋅x₂   + 117⋅x₁  ⋅x₂   + 246⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 21         14   20        14   19         14   18         14   17        14  ↪
↪    + 167⋅x₁  ⋅x₂   - 33⋅x₁  ⋅x₂   - 109⋅x₁  ⋅x₂   - 138⋅x₁  ⋅x₂   - 29⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   16        14   15        14   14        14   13       14   12        14    ↪
↪ x₂   + 35⋅x₁  ⋅x₂   + 50⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 11       14   10       14   9     13   64     13   63     13   62       13   ↪
↪    - 5⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂  - x₁  ⋅x₂   + x₁  ⋅x₂   + x₁  ⋅x₂   + 2⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  61       13   60       13   59       13   58       13   57       13   56    ↪
↪ ₂   - 2⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      13   55       13   54       13   53       13   52       13   51         ↪
↪ 11⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   + 14⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 13   50        13   49        13   48       13   47       13   46        13  ↪
↪   ⋅x₂   - 20⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 12⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   45        13   44        13   43        13   42        13   41        13   ↪
↪ x₂   - 10⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 35⋅x₁  ⋅x₂   + 39⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  40        13   39         13   38         13   37        13   36         13 ↪
↪ ₂   - 14⋅x₁  ⋅x₂   - 125⋅x₁  ⋅x₂   - 124⋅x₁  ⋅x₂   + 28⋅x₁  ⋅x₂   + 130⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    35         13   34         13   33        13   32         13   31         ↪
↪ ⋅x₂   + 295⋅x₁  ⋅x₂   + 172⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   - 280⋅x₁  ⋅x₂   - 304⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  13   30         13   29         13   28         13   27         13   26     ↪
↪ ₁  ⋅x₂   - 124⋅x₁  ⋅x₂   + 188⋅x₁  ⋅x₂   + 300⋅x₁  ⋅x₂   + 236⋅x₁  ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     13   25         13   24         13   23         13   22        13   21   ↪
↪ 7⋅x₁  ⋅x₂   - 285⋅x₁  ⋅x₂   - 243⋅x₁  ⋅x₂   - 129⋅x₁  ⋅x₂   + 88⋅x₁  ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        13   20         13   19        13   18        13   17        13   16  ↪
↪  154⋅x₁  ⋅x₂   + 111⋅x₁  ⋅x₂   + 35⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   - 57⋅x₁  ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪        13   15        13   14        13   13       13   12       13   11     ↪
↪ - 13⋅x₁  ⋅x₂   + 24⋅x₁  ⋅x₂   + 16⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 9 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    13   10       12   63       12   62     12   61       12   59       12    ↪
↪ ⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   + x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 58        12   57       12   56       12   55        12   54     12   53     ↪
↪    - 14⋅x₁  ⋅x₂   - 7⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     12   52       12   51        12   50       12   49        12   48        ↪
↪ 0⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 20⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 23⋅x₁  ⋅x₂   + 6⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 12   47        12   46        12   45       12   44        12   43        12 ↪
↪   ⋅x₂   + 11⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   - 4⋅x₁  ⋅x₂   - 17⋅x₁  ⋅x₂   - 37⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    42        12   41        12   40        12   39        12   38         12 ↪
↪ ⋅x₂   + 31⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 65⋅x₁  ⋅x₂   - 43⋅x₁  ⋅x₂   - 115⋅x₁   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    37         12   36        12   35         12   34         12   33         ↪
↪ ⋅x₂   - 105⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 206⋅x₁  ⋅x₂   + 159⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  12   32        12   31         12   30         12   29        12   28       ↪
↪ ₁  ⋅x₂   - 46⋅x₁  ⋅x₂   - 222⋅x₁  ⋅x₂   - 302⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   + 87⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   12   27         12   26         12   25        12   24         12   23     ↪
↪ x₁  ⋅x₂   + 257⋅x₁  ⋅x₂   + 241⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂   - 100⋅x₁  ⋅x₂   - 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      12   22        12   21        12   20        12   19        12   18     ↪
↪ 83⋅x₁  ⋅x₂   - 63⋅x₁  ⋅x₂   + 27⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   + 61⋅x₁  ⋅x₂   - 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    12   17        12   16        12   15       12   14       12   13         ↪
↪ ⋅x₁  ⋅x₂   - 42⋅x₁  ⋅x₂   - 41⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 14⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 12   12       12   11       11   62       11   61       11   60       11   5 ↪
↪   ⋅x₂   + 5⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 2⋅x₁  ⋅x₂   + 8⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8       11   57       11   56        11   55       11   54       11   53     ↪
↪   + 4⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   + 15⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   + 6⋅x₁  ⋅x₂   - 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     11   51     11   50        11   49        11   48        11   47         ↪
↪ 1⋅x₁  ⋅x₂   - x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   - 24⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   + 11⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 11   45        11   44        11   43        11   42        11   41        1 ↪
↪   ⋅x₂   + 28⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   - 15⋅x₁  ⋅x₂   + 19⋅x₁  ⋅x₂   + 40⋅x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1   40        11   39        11   38        11   37         11   36          ↪
↪  ⋅x₂   + 89⋅x₁  ⋅x₂   + 26⋅x₁  ⋅x₂   - 40⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 142⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 11   35        11   34        11   33         11   32         11   31        ↪
↪   ⋅x₂   - 77⋅x₁  ⋅x₂   + 98⋅x₁  ⋅x₂   + 182⋅x₁  ⋅x₂   + 163⋅x₁  ⋅x₂   + 45⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  11   30         11   29         11   28         11   27        11   26      ↪
↪ ₁  ⋅x₂   - 165⋅x₁  ⋅x₂   - 171⋅x₁  ⋅x₂   - 137⋅x₁  ⋅x₂   + 56⋅x₁  ⋅x₂   + 15 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     11   25         11   24        11   23        11   22        11   21     ↪
↪ 0⋅x₁  ⋅x₂   + 121⋅x₁  ⋅x₂   + 52⋅x₁  ⋅x₂   - 90⋅x₁  ⋅x₂   - 99⋅x₁  ⋅x₂   - 6 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     11   20        11   19        11   18        11   17        11   16      ↪
↪ 3⋅x₁  ⋅x₂   + 18⋅x₁  ⋅x₂   + 53⋅x₁  ⋅x₂   + 45⋅x₁  ⋅x₂   + 11⋅x₁  ⋅x₂   - 18 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    11   15        11   14       11   13       11   12     10   61     10   6 ↪
↪ ⋅x₁  ⋅x₂   - 13⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 5⋅x₁  ⋅x₂   - x₁  ⋅x₂   + x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 0       10   59       10   57       10   56       10   55       10   54      ↪
↪   + 4⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   + 4⋅x₁  ⋅x₂   - 8⋅x₁  ⋅x₂   - 6⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   10   53       10   52        10   51        10   50        10   49         ↪
↪ x₁  ⋅x₂   + 7⋅x₁  ⋅x₂   + 10⋅x₁  ⋅x₂   + 17⋅x₁  ⋅x₂   + 13⋅x₁  ⋅x₂   + 11⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 10   48       10   47        10   45       10   44        10   43        10  ↪
↪   ⋅x₂   - 2⋅x₁  ⋅x₂   - 14⋅x₁  ⋅x₂   + 2⋅x₁  ⋅x₂   - 20⋅x₁  ⋅x₂   - 46⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   42        10   41        10   40        10   39        10   38        10   ↪
↪ x₂   - 55⋅x₁  ⋅x₂   - 26⋅x₁  ⋅x₂   + 47⋅x₁  ⋅x₂   + 75⋅x₁  ⋅x₂   + 74⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  37        10   36        10   35         10   34        10   33        10   ↪
↪ ₂   + 18⋅x₁  ⋅x₂   - 55⋅x₁  ⋅x₂   - 123⋅x₁  ⋅x₂   - 23⋅x₁  ⋅x₂   + 46⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  32         10   31         10   30       10   29        10   28         10  ↪
↪ ₂   + 120⋅x₁  ⋅x₂   + 137⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 80⋅x₁  ⋅x₂   - 182⋅x₁  ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   27        10   26       10   25        10   24         10   23        10   ↪
↪ x₂   - 95⋅x₁  ⋅x₂   + 9⋅x₁  ⋅x₂   + 73⋅x₁  ⋅x₂   + 110⋅x₁  ⋅x₂   + 43⋅x₁  ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  22        10   21        10   20        10   19       10   18        10   1 ↪
↪ ₂   - 19⋅x₁  ⋅x₂   - 56⋅x₁  ⋅x₂   - 31⋅x₁  ⋅x₂   - 3⋅x₁  ⋅x₂   + 25⋅x₁  ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7        10   16       10   15       10   14       10   13       9   60      ↪
↪   + 20⋅x₁  ⋅x₂   + 3⋅x₁  ⋅x₂   - 5⋅x₁  ⋅x₂   - 9⋅x₁  ⋅x₂   + 4⋅x₁ ⋅x₂   + x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 9   59       9   58       9   56       9   55     9   54       9   53     9  ↪
↪  ⋅x₂   - 2⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   - x₁ ⋅x₂   - 6⋅x₁ ⋅x₂   - x₁ ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   52       9   51        9   50       9   49       9   48       9   47       ↪
↪ x₂   - 8⋅x₁ ⋅x₂   - 11⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   + 4⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  9   46     9   45        9   44        9   43        9   42       9   41    ↪
↪ ₁ ⋅x₂   - x₁ ⋅x₂   + 27⋅x₁ ⋅x₂   + 24⋅x₁ ⋅x₂   + 24⋅x₁ ⋅x₂   - 8⋅x₁ ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      9   40        9   39       9   38        9   37        9   36       9   ↪
↪ 27⋅x₁ ⋅x₂   - 13⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   + 35⋅x₁ ⋅x₂   + 38⋅x₁ ⋅x₂   - 3⋅x₁ ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  35         9   34        9   33        9   32        9   31         9   30  ↪
↪ ₂   - 111⋅x₁ ⋅x₂   - 93⋅x₁ ⋅x₂   - 76⋅x₁ ⋅x₂   + 20⋅x₁ ⋅x₂   + 109⋅x₁ ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         9   29        9   28        9   27        9   26        9   25       ↪
↪ + 106⋅x₁ ⋅x₂   + 96⋅x₁ ⋅x₂   - 40⋅x₁ ⋅x₂   - 68⋅x₁ ⋅x₂   - 62⋅x₁ ⋅x₂   - 17⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   9   24        9   23        9   22        9   21        9   20        9    ↪
↪ x₁ ⋅x₂   + 36⋅x₁ ⋅x₂   + 48⋅x₁ ⋅x₂   + 20⋅x₁ ⋅x₂   - 18⋅x₁ ⋅x₂   - 30⋅x₁ ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 19        9   18       9   17       9   16        9   15       9   14     8  ↪
↪    - 28⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   + 10⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   - x₁ ⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   59       8   58     8   57       8   56       8   55       8   54     8    ↪
↪ x₂   - 5⋅x₁ ⋅x₂   + x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - x₁ ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 53       8   52       8   51     8   50     8   49       8   48        8   4 ↪
↪    + 8⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   - x₁ ⋅x₂   - x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   + 11⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7       8   46        8   45       8   43       8   42        8   41         ↪
↪   - 5⋅x₁ ⋅x₂   - 18⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   - 19⋅x₁ ⋅x₂   - 24⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8   40        8   39        8   38        8   37        8   36        8   35 ↪
↪  ⋅x₂   - 29⋅x₁ ⋅x₂   - 10⋅x₁ ⋅x₂   + 21⋅x₁ ⋅x₂   + 61⋅x₁ ⋅x₂   + 86⋅x₁ ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         8   34       8   33        8   32        8   31        8   30        ↪
↪  + 18⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   - 81⋅x₁ ⋅x₂   - 63⋅x₁ ⋅x₂   - 16⋅x₁ ⋅x₂   + 18⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  8   29        8   28        8   27        8   26        8   25        8   2 ↪
↪ ₁ ⋅x₂   + 70⋅x₁ ⋅x₂   + 25⋅x₁ ⋅x₂   - 13⋅x₁ ⋅x₂   - 48⋅x₁ ⋅x₂   - 40⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4        8   23        8   22        8   21        8   20       8   19       ↪
↪   - 14⋅x₁ ⋅x₂   + 25⋅x₁ ⋅x₂   + 32⋅x₁ ⋅x₂   + 25⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   - 18⋅ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   8   18       8   17       8   16     8   15       7   58       7   57      ↪
↪ x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   - x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   + x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   56       7   55       7   53       7   52       7   51     7   50        ↪
↪  ⋅x₂   - 2⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - x₁ ⋅x₂   + 3⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   49       7   48       7   47       7   46        7   45       7   44     ↪
↪  ⋅x₂   - 4⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   - 6⋅x₁ ⋅x₂   - 15⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   + 9 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    7   43        7   42       7   41        7   40        7   39        7    ↪
↪ ⋅x₁ ⋅x₂   + 17⋅x₁ ⋅x₂   + 8⋅x₁ ⋅x₂   + 17⋅x₁ ⋅x₂   - 21⋅x₁ ⋅x₂   - 22⋅x₁ ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 38        7   37       7   36        7   35        7   34        7   33      ↪
↪    - 32⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   + 35⋅x₁ ⋅x₂   + 19⋅x₁ ⋅x₂   + 43⋅x₁ ⋅x₂   - 15 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    7   32        7   31        7   30        7   29        7   28        7   ↪
↪ ⋅x₁ ⋅x₂   - 38⋅x₁ ⋅x₂   - 39⋅x₁ ⋅x₂   - 20⋅x₁ ⋅x₂   + 21⋅x₁ ⋅x₂   + 46⋅x₁ ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  27        7   26     7   25        7   24        7   23       7   22        ↪
↪ ₂   + 31⋅x₁ ⋅x₂   + x₁ ⋅x₂   - 19⋅x₁ ⋅x₂   - 33⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   - 3⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7   21        7   20        7   19       7   18       7   17       6   57    ↪
↪  ⋅x₂   + 14⋅x₁ ⋅x₂   + 14⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪   6   56       6   55     6   54     6   52       6   51       6   50        ↪
↪ x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   + x₁ ⋅x₂   + x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   + 5⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 6   49       6   48        6   47       6   46       6   45     6   43     6 ↪
↪  ⋅x₂   - 3⋅x₁ ⋅x₂   + 10⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   + x₁ ⋅x₂   + x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    42       6   41        6   40       6   38        6   37        6   36    ↪
↪ ⋅x₂   + 2⋅x₁ ⋅x₂   + 24⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   - 34⋅x₁ ⋅x₂   - 28⋅x₁ ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     6   35       6   34        6   33        6   32       6   31        6    ↪
↪ 3⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   + 31⋅x₁ ⋅x₂   + 30⋅x₁ ⋅x₂   + 8⋅x₁ ⋅x₂   - 13⋅x₁ ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 30        6   29        6   28        6   27        6   26        6   25     ↪
↪    - 30⋅x₁ ⋅x₂   - 21⋅x₁ ⋅x₂   + 14⋅x₁ ⋅x₂   + 15⋅x₁ ⋅x₂   + 21⋅x₁ ⋅x₂   + 1 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     6   24        6   23        6   22        6   21       6   19     6   18 ↪
↪ 2⋅x₁ ⋅x₂   - 19⋅x₁ ⋅x₂   - 10⋅x₁ ⋅x₂   - 11⋅x₁ ⋅x₂   + 9⋅x₁ ⋅x₂   + x₁ ⋅x₂   ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      5   56       5   55       5   54       5   52       5   51     5   50   ↪
↪  - x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + x₁ ⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      5   49       5   48       5   47       5   44       5   43        5   4 ↪
↪  4⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   - 14⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 2        5   41        5   40        5   39        5   38       5   37       ↪
↪   - 10⋅x₁ ⋅x₂   + 14⋅x₁ ⋅x₂   + 13⋅x₁ ⋅x₂   + 21⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   - 8⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  5   36       5   35        5   34       5   33        5   32        5   31  ↪
↪ ₁ ⋅x₂   - 4⋅x₁ ⋅x₂   - 14⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   + 16⋅x₁ ⋅x₂   + 15⋅x₁ ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       5   30       5   29        5   28       5   27        5   26       5   ↪
↪ + 4⋅x₁ ⋅x₂   - 8⋅x₁ ⋅x₂   - 26⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   - 11⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪  25        5   24       5   23       5   22       5   21       5   20        ↪
↪ ₂   + 24⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   + 2⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   54       4   53       4   52       4   51     4   50       4   49        ↪
↪  ⋅x₂   + 2⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   - x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - 2⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   48       4   47       4   45       4   44       4   43     4   42        ↪
↪  ⋅x₂   - 4⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   + 6⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   + x₁ ⋅x₂   - 7⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   41       4   40       4   39       4   37       4   36     4   35        ↪
↪  ⋅x₂   - 2⋅x₁ ⋅x₂   - 7⋅x₁ ⋅x₂   + 8⋅x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   - x₁ ⋅x₂   - 3⋅x₁ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 4   34        4   33     4   32        4   31        4   30        4   29    ↪
↪  ⋅x₂   - 20⋅x₁ ⋅x₂   - x₁ ⋅x₂   + 11⋅x₁ ⋅x₂   + 17⋅x₁ ⋅x₂   + 15⋅x₁ ⋅x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     4   28       4   27        4   26        4   25       4   24       4   2 ↪
↪ 9⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   - 11⋅x₁ ⋅x₂   - 15⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 3       4   22       3   52       3   50       3   49     3   48       3   4 ↪
↪   + 3⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂   + x₁ ⋅x₂   - 2⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 7     3   46       3   45       3   44     3   43       3   42       3   41  ↪
↪   - x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - 6⋅x₁ ⋅x₂   - x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂    ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪       3   39       3   38       3   37       3   36       3   35        3    ↪
↪ - 3⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   + 7⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   + 11⋅x₁ ⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 34        3   33       3   32        3   31       3   30        3   29     3 ↪
↪    - 10⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   - 13⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   + 11⋅x₁ ⋅x₂   - x₁  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    28       3   27     3   26       3   25     3   24     2   50       2   4 ↪
↪ ⋅x₂   + 7⋅x₁ ⋅x₂   + x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   - x₁ ⋅x₂   + x₁ ⋅x₂   - 2⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 8     2   47       2   45       2   44       2   43       2   42       2   4 ↪
↪   - x₁ ⋅x₂   + 4⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   + 3⋅x₁ ⋅x₂  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 1     2   40     2   39       2   38     2   37       2   36       2   35    ↪
↪   - x₁ ⋅x₂   + x₁ ⋅x₂   - 3⋅x₁ ⋅x₂   - x₁ ⋅x₂   - 6⋅x₁ ⋅x₂   - 4⋅x₁ ⋅x₂   +  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪      2   34     2   33       2   32       2   31       2   30     2   29     ↪
↪ 10⋅x₁ ⋅x₂   + x₁ ⋅x₂   + 5⋅x₁ ⋅x₂   - 2⋅x₁ ⋅x₂   - 5⋅x₁ ⋅x₂   + x₁ ⋅x₂   - 2 ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    2   28       2   27        47        46          45          43           ↪
↪ ⋅x₁ ⋅x₂   + 2⋅x₁ ⋅x₂   - x₁⋅x₂   + x₁⋅x₂   + 2⋅x₁⋅x₂   - 5⋅x₁⋅x₂   + 3⋅x₁⋅x₂ ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪ 42          41          40          39          38          37          36   ↪
↪    + 2⋅x₁⋅x₂   - 6⋅x₁⋅x₂   + 2⋅x₁⋅x₂   + 2⋅x₁⋅x₂   + 6⋅x₁⋅x₂   - 4⋅x₁⋅x₂   - ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪         35          34          33          32        31        30     44    ↪
↪  5⋅x₁⋅x₂   + 3⋅x₁⋅x₂   - 2⋅x₁⋅x₂   + 2⋅x₁⋅x₂   + x₁⋅x₂   - x₁⋅x₂   + x₂   -  ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪     43     42       41       40       39       38       37     36       35   ↪
↪ 3⋅x₂   + x₂   + 4⋅x₂   - 2⋅x₂   - 2⋅x₂   - 2⋅x₂   + 4⋅x₂   + x₂   - 3⋅x₂   + ↪
↪ ──────────────────────────────────────────────────────────────────────────── ↪
↪                                                                              ↪
↪                                                                              ↪
↪                                                                              ↪

↪    34
↪  x₂  
↪ ─────
↪      
↪      
↪      
Total time taken: 212.2641463279724 seconds